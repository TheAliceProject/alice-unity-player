class SizeProperty extends Property {
  SizeProperty(SThing owner, Size value) {
    super(owner: owner);
    this.value <- value;
  }

  Size getValue() {
    return this.value;
  }

  void setValue(Size value) {
    if (!this.value.equals(other: value)) {
      this.value <- value;
      $SceneGraph.updateProperty(owner: this.owner, property: this, value: value);
    }
  }

  void animateValue(Size endValue, DecimalNumber duration, AnimationStyle animationStyle) {
    SizeTween tween <- new SizeTween(property: this, start: this.value, end: endValue);
    tween.animate(duration: duration, animationStyle: animationStyle);
  }

  void animateWidth(DecimalNumber width, DimensionPolicy dimensionPolicy, DecimalNumber duration, AnimationStyle animationStyle) {
    DecimalNumber factor <- dimensionPolicy.secondaryFactor( primaryFactor: width / value.width );
    Size finalSize <- new Size( width: width, height: value.height * factor, depth: value.depth * factor )
    animateValue( endValue: finalSize, duration: duration, animationStyle: animationStyle );
  }

  void animateHeight(DecimalNumber height, DimensionPolicy dimensionPolicy, DecimalNumber duration, AnimationStyle animationStyle) {
    DecimalNumber factor <- dimensionPolicy.secondaryFactor( primaryFactor: height / value.height );
    Size finalSize <- new Size( width: value.width * factor, height: height, depth: value.depth * factor )
    animateValue( endValue: finalSize, duration: duration, animationStyle: animationStyle );
  }

  void animateDepth(DecimalNumber depth, DimensionPolicy dimensionPolicy, DecimalNumber duration, AnimationStyle animationStyle) {
    DecimalNumber factor <- dimensionPolicy.secondaryFactor( primaryFactor: depth / value.depth );
    Size finalSize <- new Size( width: value.width * factor, height: value.height * factor, depth: depth )
    animateValue( endValue: finalSize, duration: duration, animationStyle: animationStyle );
  }

  @CompletelyHidden Size value;
}