class PaintProperty extends Property {
  PaintProperty(SThing owner, Paint value) {
    super(owner: owner);
    this.value <- value;
  }

  Paint getValue() {
    return this.value;
  }

  void setValue(Paint value) {
    if (!this.value.equals(other: value) {
      this.value <- value;
      $SceneGraph.updateProperty(owner: this.owner, property: this, value: value);
    }
  }

  void animateValue(Paint endValue, DecimalNumber duration <- Default.duration(), AnimationStyle animationStyle <- Default.animationStyle()) {
     
    if (duration > 0) {     
      DecimalNumber startTime <- $Clock.currentTime;
      DecimalNumber currentTime <- startTime;
      DecimalNumber endTime <- startTime + duration;

      Paint startValue <- this.value;

      while (currentTime < endTime) {
        $Clock.delayOneFrame();

        currentTime <- $Clock.currentTime;
        
        if (currentTime >= endTime) {
          setValue(value: endValue);
        } else {
          //TODO: use animation style
          DecimalNumber t <- (currentTime - startTime)/duration;
          setValue(value: startValue.interpolatePortion(end: endValue, portion: t));
        }
      }
    } else {
      this.setValue(value: endValue);
    }
  }

  @CompletelyHidden Paint value;
}