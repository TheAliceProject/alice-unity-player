enum AnimationStyle {
    BEGIN_AND_END_ABRUPTLY(inflectA: 0.001, inflectB: 0.999),
    BEGIN_GENTLY_AND_END_ABRUPTLY(inflectA: 0.99, inflectB: 0.999),
    BEGIN_ABRUPTLY_AND_END_GENTLY(inflectA:  0.001, inflectB: 0.01),
    BEGIN_AND_END_GENTLY(inflectA: 0.3, inflectB: 0.8);

    AnimationStyle( DecimalNumber inflectA, DecimalNumber inflectB ) {
        startLinear <- inflectA;
        endLinear <- inflectB;

        DecimalNumber factor <- endLinear * endLinear - startLinear * endLinear + startLinear - 1;

        // Calculate the constants once
        startA <- ( endLinear - 1 ) / ( startLinear * factor );

        slope <- 2 * ( endLinear - 1 ) / factor;
        intercept <- ( -slope * startLinear) / 2;

        endA <- 1 / factor;
        endB <- -2 * endA;
        endC <- 1 + endA;
    }

    Portion calculatePortion( Duration timeElapsed, Duration timeTotal ) {
        if ( timeTotal.seconds == 0 ) {
            return Portion.WHOLE;
        }
        DecimalNumber portion <- timeElapsed.seconds / timeTotal.seconds;
        if( portion < startLinear ) {
            return new Portion(portion: startA * portion * portion);
        } else {
            if( portion < endLinear ) {
                return new Portion(portion: slope * portion + intercept);
            } else {
                return new Portion(portion: endA * portion * portion + endB * portion + endC);
            }
        }
    }

    @CompletelyHidden DecimalNumber startLinear;
    @CompletelyHidden DecimalNumber endLinear;
    //Quadratic from 0 to startLinear
    @CompletelyHidden DecimalNumber startA;
    // Linear equation in the middle
    @CompletelyHidden DecimalNumber slope;
    @CompletelyHidden DecimalNumber intercept;
    // Quadratic from linear to 1
    @CompletelyHidden DecimalNumber endA;
    @CompletelyHidden DecimalNumber endB;
    @CompletelyHidden DecimalNumber endC;

}
