class SScene extends SThing {
  SScene() {
    super();
    $SceneGraph.createSceneEntity(scene: this);
    $SceneGraph.bindFogDensityProperty(owner: this, property: fogDensity, value: fogDensity.getValue());
    $SceneGraph.bindGlobalBrightnessProperty(owner: this, property: globalBrightness, value: globalBrightness.getValue());
    $SceneGraph.bindAtmosphereColorProperty(owner: this, property: atmosphereColor, value: atmosphereColor.getValue());
    $SceneGraph.bindAmbientLightColorProperty(owner: this, property: ambientLightColor, value: ambientLightColor.getValue());
    $SceneGraph.bindFromAboveLightColorProperty(owner: this, property: fromAboveLightColor, value: fromAboveLightColor.getValue());
    $SceneGraph.bindFromBelowLightColorProperty(owner: this, property: fromBelowLightColor, value: fromBelowLightColor.getValue());
  }

  @CompletelyHidden SScene getScene() {
    return this;
  }

  Color getAtmosphereColor() {
    return atmosphereColor.getValue();
  }

  void setAtmosphereColor( Color color,
                           DecimalNumber duration <- Default.duration(),
                           AnimationStyle style <- Default.animationStyle() ) {
    atmosphereColor.animateValue( endValue: color, duration: duration, animationStyle: style );
  }

  @CompletelyHidden Color getAmbientLightColor() {
    return ambientLightColor.getValue();
  }

  @CompletelyHidden void setAmbientLightColor( Color color,
                                     DecimalNumber duration <- Default.duration(),
                                     AnimationStyle style <- Default.animationStyle() ) {
    ambientLightColor.animateValue( endValue: color, duration: duration, animationStyle: style );
  }

  Color getFromAboveLightColor() {
    return fromAboveLightColor.getValue();
  }

  void setFromAboveLightColor( Color color,
                               DecimalNumber duration <- Default.duration(),
                               AnimationStyle style <- Default.animationStyle() ) {
    fromAboveLightColor.animateValue( endValue: color, duration: duration, animationStyle: style );
  }

  Color getFromBelowLightColor() {
    return fromBelowLightColor.getValue();
  }

  void setFromBelowLightColor( Color color,
                               DecimalNumber duration <- Default.duration(),
                               AnimationStyle style <- Default.animationStyle() ) {
    fromBelowLightColor.animateValue( endValue: color, duration: duration, animationStyle: style );
  }

  Portion getFogDensity() {
    return fogDensity.getValue();
  }

  void setFogDensity( Portion density,
                      DecimalNumber duration <- Default.duration(),
                      AnimationStyle style <- Default.animationStyle() ) {
    fogDensity.animateValue( endValue: density, duration: duration, animationStyle: style );
  }

  void addSceneActivationListener( <SceneActivationEvent->void> listener ) {
    $SceneGraph.addSceneActivationListener(scene: this, listener: () -> {
      SceneActivationEvent event <- new SceneActivationEvent();
      listener(event);
    });
  }

/* TODO implement events
  void addMouseClickOnScreenListener( MouseClickOnScreenListener listener,
                                      OverlappingEventPolicy overlappingEventPolicy <- Default.overlappingEventPolicy()) {
    $Mouse.addClickOnScreenListener( listener: listener, overlappingEventPolicy: overlappingEventPolicy );
  }

  void addMouseClickOnObjectListener( MouseClickOnObjectListener listener,
                                      OverlappingEventPolicy overlappingEventPolicy <- Default.overlappingEventPolicy(),
                                      Visual[] setOfVisuals <- Default.allVisuals()) {
    $Mouse.addClickOnObjectListener( listener: listener, overlappingEventPolicy: overlappingEventPolicy, visuals: setOfVisuals );
  }

  void addDefaultModelManipulation() {
    $SceneManager.addDragAdapter();
  }

  void addTimeListener( TimeListener listener,
                        Number frequency,
                        OverlappingEventPolicy overlappingEventPolicy <- Default.overlappingEventPolicy() ) {
    $Clock.addTimerEventListener( listener: listener, frequency: frequency, overlappingEventPolicy: overlappingEventPolicy );
  }

  void addKeyPressListener( KeyPressListener listener,
                            OverlappingEventPolicy overlappingEventPolicy <- Default.overlappingEventPolicy(),
                            HeldKeyPolicy heldKeyPolicy <- Default.heldKeyPolicy() ) {
    $Keyboard.addKeyListener( listener: listener, overlappingEventPolicy: overlappingEventPolicy, heldKeyPolicy: heldKeyPolicy );
  }

  void addArrowKeyPressListener( ArrowKeyPressListener listener,
                                 OverlappingEventPolicy overlappingEventPolicy <- Default.overlappingEventPolicy(),
                                 HeldKeyPolicy heldKeyPolicy <- Default.heldKeyPolicy() ) {
    $Keyboard.addArrowKeyListener( listener: listener, overlappingEventPolicy: overlappingEventPolicy, heldKeyPolicy: heldKeyPolicy );
  }

  void addNumberKeyPressListener( NumberKeyPressListener listener,
                                  OverlappingEventPolicy overlappingEventPolicy <- Default.overlappingEventPolicy(),
                                  HeldKeyPolicy heldKeyPolicy <- Default.heldKeyPolicy() ) {
    $Keyboard.addNumberKeyListener( listener: listener, overlappingEventPolicy: overlappingEventPolicy, heldKeyPolicy: heldKeyPolicy );
  }

  void addObjectMoverFor( SMovableTurnable thing ) {
    $Keyboard.moveWithArrows( thing: thing, speed: 2.5 );
  }

  void addPointOfViewChangeListener( PointOfViewChangeListener listener, SThing[] set ) {
    $SceneGraph.addTransformationListener( listener: listener, targets: set );
  }

  void addCollisionStartListener( CollisionStartListener listener, SThing[] setA, SThing[] setB,
                                  OverlappingEventPolicy overlappingEventPolicy <- Default.overlappingEventPolicy() ) {
    $SceneGraph.addCollisionListener( listener: listener, a: setA, b: setB, overlappingEventPolicy: overlappingEventPolicy );
  }

  void addCollisionEndListener( CollisionEndListener listener, SThing[] setA, SThing[] setB,
                                OverlappingEventPolicy overlappingEventPolicy <- Default.overlappingEventPolicy() ) {
    $SceneGraph.addCollisionListener( listener: listener, a: setA, b: setB, overlappingEventPolicy: overlappingEventPolicy );
  }

  void addProximityEnterListener( ProximityEnterListener listener, SThing[] setA, SThing[] setB, Number distance,
                                  OverlappingEventPolicy overlappingEventPolicy <- Default.overlappingEventPolicy() ) {
    $SceneGraph.addProximityEventListener( listener: listener, a: setA, b: setB, distance: distance, overlappingEventPolicy: overlappingEventPolicy );
  }

  void addProximityExitListener( ProximityExitListener listener, SThing[] setA, SThing[] setB, Number distance,
                                 OverlappingEventPolicy overlappingEventPolicy <- Default.overlappingEventPolicy() ) {
    $SceneGraph.addProximityEventListener( listener: listener, a: setA, b: setB, distance: distance, overlappingEventPolicy: overlappingEventPolicy );
  }

  // These next four could one day move to the camera for which they are meaningful
  void addViewEnterListener( ViewEnterListener listener, SModel[] set,
                             OverlappingEventPolicy overlappingEventPolicy <- Default.overlappingEventPolicy() ) {
    $SceneGraph.addComesIntoViewEventListener( listener: listener, targets: set, overlappingEventPolicy: overlappingEventPolicy );
  }

  void addViewExitListener( ViewExitListener listener, SModel[] set,
                            OverlappingEventPolicy overlappingEventPolicy <- Default.overlappingEventPolicy() ) {
    $SceneGraph.addLeavesViewEventListener( listener: listener, targets: set, overlappingEventPolicy: overlappingEventPolicy );
  }

  void addOcclusionStartListener( OcclusionStartListener listener, SModel[] setA, SModel[] setB,
                                  OverlappingEventPolicy overlappingEventPolicy <- Default.overlappingEventPolicy() ) {
    $SceneGraph.addOcclusionEventListener( listener: listener, a: setA, b: setB, overlappingEventPolicy: overlappingEventPolicy );
  }

  void addOcclusionEndListener( OcclusionEndListener listener, SModel[] setA, SModel[] setB,
                                OverlappingEventPolicy overlappingEventPolicy <- Default.overlappingEventPolicy() ) {
    $SceneGraph.addOcclusionEventListener( listener: listener, a: setA, b: setB, overlappingEventPolicy: overlappingEventPolicy );
  }
*/

  @CompletelyHidden void activate( SProgram program ) {
    this.activeCount <- this.activeCount + 1;
    
    if( this.program != program ) {
      if( program != null ) {
        // TODO Implement the following to remove mouse, key and focus listeners
        // this.eventManager.removeListenersFrom( program.getOnscreenRenderTarget() );
        // or
        // program.disconnectSystemListeners();
      }
      this.program <- program;
      if( program != null ) {
        // TODO Implement the following to add mouse, key and focus listeners
        // this.eventManager.addListenersTo( program.getOnscreenRenderTarget() );
        // or
        // program.connectSystemListeners();
      }
    }

    this.globalBrightness.setValue(value: Portion.NONE);
    this.changeActiveStatus( isActive: true );
    
    //This forces the scene to initialize itself to make sure we can properly query bounding boxes and other
    // render dependent things. All this info is critical to a scene running
    //AdapterFactory.getAdapterFor( this.sgScene );

    //this.addCamerasTo( program: program );

    globalBrightness.animateValue( endValue: Portion.WHOLE, duration: 1, animationStyle: AnimationStyle.BEGIN_AND_END_GENTLY );
    $SceneGraph.activateScene(scene: this);
  }

  @CompletelyHidden void deactivate( SProgram program ) {
    globalBrightness.animateValue( endValue: Portion.NONE, duration: 0.25, animationStyle: AnimationStyle.BEGIN_AND_END_GENTLY );
    this.changeActiveStatus( isActive: false );
    //this.removeCamerasFrom( program: program );
    this.program <- null;
  }


  @CompletelyHidden void changeActiveStatus( Boolean isActive) {
    // TODO Work out appropriate mechanism to cause this happen immediately and not animate the setup 
    //DecimalNumber prevSimulationSpeedFactor <- program.getSimulationSpeedFactor();
    //program.setSimulationSpeedFactor( factor: $Math.POSITIVE_INFINITY );

    this.handleActiveChanged( isActive: isActive, activationCount: this.activeCount );

    //program.setSimulationSpeedFactor( factor: prevSimulationSpeedFactor );
  }
  
/*
  @CompletelyHidden void addCamerasTo( SProgram program ) {
    forEach(SCamera camera in this.getAllCameras() ) {
      program.addCameraToSceneGraph( camera: camera );
      // TODO adapt and implement the above from the original:
      // program.getOnscreenRenderTarget().addSgCamera( cameraImp.getSgCamera() );
    }
  }

  @CompletelyHidden void removeCamerasFrom( SProgram program ) {
    forEach(SCamera camera in this.getAllCameras() ) {
      program.removeCameraFromSceneGraph( camera: camera );
      // TODO adapt and implement the above from the original:
      // program.getOnscreenRenderTarget().removeSgCamera( cameraImp.getSgCamera() );
    }
  }
  */

  void handleActiveChanged(Boolean isActive, WholeNumber activationCount) {
    if(isActive) {
      if(activationCount==1) {
        this.performGeneratedSetUp();
        this.performCustomSetup();
        this.initializeEventListeners();
      } else {
        //this.restoreStateAndEventListeners();
      }
    } else {
      //this.preserveStateAndEventListeners();
    }
  }


  @CompletelyHidden SProgram getProgram() {
    return this.program;
  }

/* Unused and completely hidden
  void addWhileCollisionListener(WhileCollisionListener listener, SThing[] setA, SThing[] setB)
  void addWhileProximityListener(WhileProximityListener listener, SThing[] setA, SThing[] setB, Number distance)
  void addWhileInViewListener(WhileInViewListener listener, SModel[] set)
  void addWhileOcclusionListener(WhileOcclusionListener listener, SModel[] setA, SModel[] setB)
  void removeKeyListener(KeyPressListener listener)
  void removeSceneActivationListener(SceneActivationListener listener) */

/* TODO needs scenegraph implementation
  @CompletelyHidden void preserveStateAndEventListeners() {
    $EventManager.silenceAllListeners();
  }

  @CompletelyHidden void restoreStateAndEventListeners() {
    $EventManager.restoreAllListeners();
  }
  */

  @CompletelyHidden ColorProperty atmosphereColor <- new ColorProperty(owner: this, value: Color.LIGHT_BLUE);
  @CompletelyHidden ColorProperty ambientLightColor <- new ColorProperty(owner: this, value: Color.DARK_GRAY);
  @CompletelyHidden ColorProperty fromAboveLightColor <- new ColorProperty(owner: this, value: Color.WHITE);
  @CompletelyHidden ColorProperty fromBelowLightColor <- new ColorProperty(owner: this, value: Color.WHITE);
  
  @CompletelyHidden PortionProperty fogDensity <- new PortionProperty(owner: this, value: Portion.NONE);
  @CompletelyHidden PortionProperty globalBrightness <- new PortionProperty(owner: this, value: Portion.NONE);
  
  @CompletelyHidden SProgram program <- null;
  @CompletelyHidden WholeNumber activeCount <- 0;
  
}