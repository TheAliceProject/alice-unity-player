class SizeProperty extends Property {
  SizeProperty(SThing owner, Size value) {
    super(owner: owner);
    this.value <- value;
  }

  Size getValue() {
    return this.value;
  }

  void setValue(Size value) {
    if (!this.value.equals(other: value)) {
      this.value <- value;
      $SceneGraph.updateProperty(owner: this.owner, property: this, value: value);
      if (onValueChanged != null) {
        onValueChanged(this);
      }
    }
  }

  void animateValue(Size endValue, Duration duration, AnimationStyle animationStyle) {
    SizeTween tween <- new SizeTween(property: this, start: this.value, end: endValue);
    tween.animate(duration: duration, animationStyle: animationStyle);
  }

  void animateWidth(DecimalNumber width, DimensionPolicy dimensionPolicy, Duration duration, AnimationStyle animationStyle) {
    if (dimensionPolicy == DimensionPolicy.PRESERVE_NOTHING) {
      WidthOnlyTween tween <- new WidthOnlyTween(property: this, start: this.value.width, end: width);
      tween.animate(duration: duration, animationStyle: animationStyle);
    } else {
      DecimalNumber factor <- dimensionPolicy.secondaryFactor( primaryFactor: width / value.width );
      Size finalSize <- new Size( width: width, height: value.height * factor, depth: value.depth * factor );
      animateValue( endValue: finalSize, duration: duration, animationStyle: animationStyle );
    }
  }

  void animateHeight(DecimalNumber height, DimensionPolicy dimensionPolicy, Duration duration, AnimationStyle animationStyle) {
    if (dimensionPolicy == DimensionPolicy.PRESERVE_NOTHING) {
      HeightOnlyTween tween <- new HeightOnlyTween(property: this, start: this.value.height, end: height);
      tween.animate(duration: duration, animationStyle: animationStyle);
    } else {
      DecimalNumber factor <- dimensionPolicy.secondaryFactor( primaryFactor: height / value.height );
      Size finalSize <- new Size( width: value.width * factor, height: height, depth: value.depth * factor );
      animateValue( endValue: finalSize, duration: duration, animationStyle: animationStyle );
    }
  }

  void animateDepth(DecimalNumber depth, DimensionPolicy dimensionPolicy, Duration duration, AnimationStyle animationStyle) {
    if (dimensionPolicy == DimensionPolicy.PRESERVE_NOTHING) {
      DepthOnlyTween tween <- new DepthOnlyTween(property: this, start: this.value.depth, end: depth);
      tween.animate(duration: duration, animationStyle: animationStyle);
    } else {
      DecimalNumber factor <- dimensionPolicy.secondaryFactor( primaryFactor: depth / value.depth );
      Size finalSize <- new Size( width: value.width * factor, height: value.height * factor, depth: depth );
      animateValue( endValue: finalSize, duration: duration, animationStyle: animationStyle );
    }
  }

  void animateResize(DecimalNumber factor, Duration duration, AnimationStyle animationStyle ) {
    ApplyResizeTween tween <- new ApplyResizeTween(property: this, scale: new Scale(scale: factor));
    tween.animate(duration: duration, animationStyle: animationStyle);
  }

  void animateResizeWidth( DecimalNumber factor, DimensionPolicy dimensionPolicy, Duration duration, AnimationStyle animationStyle ) {
    DecimalNumber secondaryFactor <- dimensionPolicy.secondaryFactor(primaryFactor: factor);
    Scale scale <- new Scale(x: factor, y: secondaryFactor, z: secondaryFactor);
    ApplyResizeTween tween <- new ApplyResizeTween(property: this, scale: scale);
    tween.animate(duration: duration, animationStyle: animationStyle);
  }

  void animateResizeHeight( DecimalNumber factor, DimensionPolicy dimensionPolicy, Duration duration, AnimationStyle animationStyle ) {
    DecimalNumber secondaryFactor <- dimensionPolicy.secondaryFactor(primaryFactor: factor);
    Scale scale <- new Scale(x: secondaryFactor, y: factor, z: secondaryFactor);
    ApplyResizeTween tween <- new ApplyResizeTween(property: this, scale: scale);
    tween.animate(duration: duration, animationStyle: animationStyle);
  }

  void animateResizeDepth( DecimalNumber factor, DimensionPolicy dimensionPolicy, Duration duration, AnimationStyle animationStyle ) {
    DecimalNumber secondaryFactor <- dimensionPolicy.secondaryFactor(primaryFactor: factor);
    Scale scale <- new Scale(x: secondaryFactor, y: secondaryFactor, z: factor);
    ApplyResizeTween tween <- new ApplyResizeTween(property: this, scale: scale);
    tween.animate(duration: duration, animationStyle: animationStyle);
  }

  @TuckedAway void sync() {
    // get value from scene graph without calling update property
    value <- $SceneGraph.getLocalBoundingBoxSize(model:owner, dynamic: false);
  }

  @TuckedAway void setValueChangedListener(<SizeProperty->void> listener) {
    onValueChanged <- listener;
  }

  @CompletelyHidden Size value;
  @TuckedAway <SizeProperty->void> onValueChanged <- null;
}