class SBillboard extends SModel {
  SBillboard() {
    super(resource: $SceneGraph.BILLBOARD);
    $SceneGraph.bindBackPaintProperty(owner: this, property: this.backPaint, value: this.backPaint.getValue());
  }

  void setPaint(Paint paint,
                Duration duration <- Default.duration(),
                AnimationStyle style <- Default.animationStyle() ) {
    if (paint.isImage) {
      this.updateAspectRatio(frontPaint: paint, backPaint: getBackPaint());
    }
    super.setPaint( paint: paint, duration: duration, style: style );

  }

  Paint getBackPaint() {
    return this.backPaint.getValue();
  }

  void setBackPaint(Paint paint,
                    Duration duration <- Default.duration(),
                    AnimationStyle style <- Default.animationStyle() ) {
    if (paint.isImage) {
      this.updateAspectRatio(frontPaint: getPaint(), backPaint: paint);
    }
    this.backPaint.animateValue( endValue: paint, duration: duration, animationStyle: style );
    
  }

  @CompletelyHidden void updateAspectRatio(Paint frontPaint, Paint backPaint) {
    DecimalNumber width <- 0;
    DecimalNumber height <- 0;
    
    if( frontPaint.isImage ) {
      width <- frontPaint.width;
      height <- frontPaint.height;
    }

    if(!frontPaint.isImage && backPaint.isImage) {
      width <- backPaint.width;
      height <- backPaint.height;
    }

    DecimalNumber widthToHeightAspectRatio <- 1;
    if( width > 0  &&  height > 0 ) {
      widthToHeightAspectRatio <- width / height;
    }

    setWidth(width: getSize().height*widthToHeightAspectRatio, dimensionPolicy: DimensionPolicy.PRESERVE_NOTHING, duration: Duration.ZERO);
  }

  @CompletelyHidden PaintProperty backPaint <- new PaintProperty(owner: this, value: Color.WHITE);
}