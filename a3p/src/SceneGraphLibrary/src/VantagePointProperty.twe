class VantagePointProperty extends Property {
  VantagePointProperty(SThing owner, VantagePoint value) {
    super(owner: owner);
    this.value <- value;
  }

  Size getValue() {
    return this.value;
  }

  void setValue(VantagePoint value) {
    this.value <- value;
    $SceneGraph.updateProperty(owner: this.owner, property: this, value: value);
  }

  void applyTransformation(VantagePoint transformation, SThing asSeenBy) {
    VantagePoint viewerInVehicle <- asSeenBy.getVantagePoint(asSeenBy: owner.vehicle);
    VantagePoint subjectInViewer <- owner.getVantagePoint(asSeenBy: asSeenBy);
    VantagePoint m <- viewerInVehicle.multiply(other: transformation).multiply(other: subjectInViewer);
    
    setValue(value: m);
  }

  void animatePosition(Position endValue, DecimalNumber duration, AnimationStyle animationStyle) {
    PositionTween tween <- new PositionTween(property: this, start: this.value.position, end: endValue, asSeenBy: owner.vehicle);
    tween.animate(duration: duration, animationStyle: animationStyle);
  }

  void animateMove(Direction direction, DecimalNumber distance, SThing asSeenBy, DecimalNumber duration, AnimationStyle animationStyle) {
    ApplyTranslationTween tween <- new ApplyTranslationTween(property: this, direction: direction, distance: distance, asSeenBy: asSeenBy);
    tween.animate(duration: duration, animationStyle: animationStyle);
  }

  void animateMoveToward(SThing target, DecimalNumber distance, DecimalNumber duration, AnimationStyle animationStyle) {
    Position sp <- $SceneGraph.getAbsolutePosition(thing: owner);
    Position tp <- $SceneGraph.getAbsolutePosition(thing: target);

    Direction direction <- tp.directionFrom(other: sp);
    ApplyTranslationTween tween <- new ApplyTranslationTween(property: this, direction: direction, distance: distance, asSeenBy: owner.getScene());
    tween.animate(duration: duration, animationStyle: animationStyle);
  }

  void animateMoveTo(SThing target, PathStyle pathStyle, DecimalNumber duration, AnimationStyle animationStyle) {
    if (pathStyle.isSmooth()) {
      VantagePoint start <- owner.getVantagePoint(asSeenBy: target);

      SmoothPositionTween tween <- new SmoothPositionTween(property: this, start: start, end: VantagePoint.IDENTITY, asSeenBy: target);
      tween.animate(duration: duration, animationStyle: animationStyle);
    } else {
      Position start <- owner.getVantagePoint(asSeenBy: target).position;

      PositionTween tween <- new PositionTween(property: this, start: start, end: Position.ZERO, asSeenBy: target);
      tween.animate(duration: duration, animationStyle: animationStyle);
    }
  }

  void animatePlace(SpatialRelation spatialRelation, SThing target, DecimalNumber alongAxisOffset, SThing asSeenBy, PathStyle pathStyle, DecimalNumber duration, AnimationStyle animationStyle) {
    
    VantagePoint start <- owner.getVantagePoint(asSeenBy: asSeenBy);
    VantagePoint targetVP <- target.getVantagePoint(asSeenBy: asSeenBy);
    AxisAlignedBox subjectBox <- $SceneGraph.getLocalBoundingBox(model: owner, dynamic: true);
    AxisAlignedBox targetBox <- $SceneGraph.getLocalBoundingBox(model: target, dynamic: true).transform(vantagePoint: targetVP);

    Position endPos <- spatialRelation.getPlacePosition(alongAxisOffset: alongAxisOffset, subjectBoundingBox: subjectBox, targetBoundingBox: targetBox);
    VantagePoint end <- new VantagePoint(position: endPos, orientation: Orientation.IDENTITY);

    if (pathStyle.isSmooth()) {
      SmoothVantagePointTween tween <- new SmoothVantagePointTween(property: this, start: start, end: end, asSeenBy: asSeenBy);
      tween.animate(duration: duration, animationStyle: animationStyle);
    } else {
      VantagePointTween tween <- new VantagePointTween(property: this, start: start, end: end, asSeenBy: asSeenBy);
      tween.animate(duration: duration, animationStyle: animationStyle);
    }
  }

  void animateMoveAndOrientTo(SThing target, PathStyle pathStyle, DecimalNumber duration, AnimationStyle animationStyle) {

    VantagePoint start <- owner.getVantagePoint(asSeenBy: target);
    if (pathStyle.isSmooth()) {
      SmoothVantagePointTween tween <- new SmoothVantagePointTween(property: this, start: start, end: VantagePoint.IDENTITY, asSeenBy: target);
      tween.animate(duration: duration, animationStyle: animationStyle);
    } else {
      VantagePointTween tween <- new VantagePointTween(property: this, start: start, end: VantagePoint.IDENTITY, asSeenBy: target);
      tween.animate(duration: duration, animationStyle: animationStyle);
    }
  }

  void animateOrientation(Orientation endValue, DecimalNumber duration, AnimationStyle animationStyle) {
    OrientationTween tween <- new OrientationTween(property: this, start: this.value.orientation, end: endValue, asSeenBy: owner.vehicle);
    tween.animate(duration: duration, animationStyle: animationStyle);
  }

  void animateRotation(Direction axis, Angle angle, SThing asSeenBy, DecimalNumber duration, AnimationStyle animationStyle) {
    ApplyRotationTween tween <- new ApplyRotationTween(property: this, axis: axis, angle: angle, asSeenBy: asSeenBy);
    tween.animate(duration: duration, animationStyle: animationStyle);
  }

  void animateTurnToFace(SThing target, DecimalNumber duration, AnimationStyle animationStyle) {
    // target position in owner space
    Position tp <- target.getVantagePoint(asSeenBy: owner).position;
    Direction toTarget <- new Direction(x: tp.x, y: 0, z: tp.z);

    Orientation end <- value.orientation;
    if (!Epsilon.REASONABLE.isWithin0InSquaredSpace(number: toTarget.lengthSquared)) {
      // in vehicle space
      Direction up <- Direction.POSITIVE_Y_AXIS.rotate(orientation: value.orientation);
      Direction newForward <- toTarget.rotate(orientation: value.orientation).normalize();
      end <- new Orientation(forward: newForward, up: up);
    }

    OrientationTween tween <- new OrientationTween(property: this, start: this.value.orientation, end: end, asSeenBy: owner.vehicle);
    tween.animate(duration: duration, animationStyle: animationStyle);
  }

  void animateOrientToUpright(SThing upAsSeenBy, DecimalNumber duration, AnimationStyle animationStyle) {
    VantagePoint subjectInViewer <- owner.getVantagePoint(asSeenBy: upAsSeenBy);
    Orientation end <- subjectInViewer.orientation;

    Direction up <- Direction.POSITIVE_Y_AXIS.rotate(orientation: end);
    
    if (!Epsilon.REASONABLE.isWithin(number1: up.y, number2: 1.0)) { 
      // is not already oriented up
      Direction forward <- Direction.POSITIVE_Z_AXIS.rotate(orientation: end);

      if (Epsilon.REASONABLE.isWithin(number1: forward.y, number2: 1.0) || Epsilon.REASONABLE.isWithin(number1: forward.y, number2: -1.0)) { 
        // is facing directly up or down
        DecimalNumber revs <- 0;
        if (forward.y < 0.0) {
          revs <- -0.25;
        } else {
          revs <- 0.25; 
        }
        end <- end.multiply(other: new Orientation(axis: Direction.POSITIVE_X_AXIS, angle: new Angle(revolutions: revs)));
      } else {
        // all other orientations
        forward <- new Direction(x: forward.x, y: 0, z: forward.z).normalize();
        end <- new Orientation(forward: forward, up: Direction.POSITIVE_Y_AXIS);
      }
    }

    OrientationTween tween <- new OrientationTween(property: this, start: subjectInViewer.orientation, end: end, asSeenBy: upAsSeenBy);
    tween.animate(duration: duration, animationStyle: animationStyle);
  }

  void animatePointAt(SThing target, SThing upAsSeenBy, DecimalNumber duration, AnimationStyle animationStyle) {

    VantagePoint subjectInViewer <- owner.getVantagePoint(asSeenBy: upAsSeenBy);
    VantagePoint targetInViewer <- target.getVantagePoint(asSeenBy: upAsSeenBy);

    Direction toTarget <- targetInViewer.position.directionFrom(other: subjectInViewer.position);

    Orientation end <- subjectInViewer.orientation;
    if (!Epsilon.REASONABLE.isWithin0InSquaredSpace(number: toTarget.lengthSquared)) {
        end <- new Orientation(forward: toTarget.normalize());
    }

    OrientationTween tween <- new OrientationTween(property: this, start: subjectInViewer.orientation, end: end, asSeenBy: upAsSeenBy);
    tween.animate(duration: duration, animationStyle: animationStyle);
  }

  void animateOrientTo(SThing target, DecimalNumber duration, AnimationStyle animationStyle) {
    Orientation end <- target.getVantagePoint(asSeenBy: owner.vehicle).orientation;
    OrientationTween tween <- new OrientationTween(property: this, start: value.orientation, end: end, asSeenBy: owner.vehicle);
    tween.animate(duration: duration, animationStyle: animationStyle);
  }

  @CompletelyHidden VantagePoint value;
}