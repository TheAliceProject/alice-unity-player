class SModel extends SMovableTurnable
{
  SModel(TextString resource) {
    $SceneGraph.createEntity(model: this, resource: resource);
    $SceneGraph.bindTransformationProperty(owner: this, property: this.localTransformation, value: this.localTransformation.getValue());

    // get default size 
    this.size.sync();
    this.defaultSize <- this.size.getValue();
    $SceneGraph.bindSizeProperty(owner: this, property: this.size, value: this.defaultSize);

    $SceneGraph.bindPaintProperty(owner: this, property: this.paint, value: this.paint.getValue());
    $SceneGraph.bindOpacityProperty(owner: this, property: this.opacity, value: this.opacity.getValue());
    
  }

  Size getSize() {
    return this.size.getValue();
  }

  void setSize(Size size, Duration duration <- Default.duration(),  AnimationStyle animationStyle <- Default.animationStyle()) 
  {
    // constrain dimensions without values
    DecimalNumber w <- size.width;
    DecimalNumber h <- size.height;
    DecimalNumber d <- size.depth;

    if (Epsilon.TINY.isWithinZero(number: this.defaultSize.width)) {
      w <- this.defaultSize.width;
    }

    if (Epsilon.TINY.isWithinZero(number: this.defaultSize.height)) {
      h <- this.defaultSize.height;
    }

    if (Epsilon.TINY.isWithinZero(number: this.defaultSize.depth)) {
      d <- this.defaultSize.depth;
    }

    this.size.animateValue(endValue: new Size(width: w, height: h, depth: d), duration: duration, animationStyle: animationStyle);
  }

  void setWidth(DecimalNumber width, DimensionPolicy dimensionPolicy <- Default.dimensionPolicy(), Duration duration <- Default.duration(),  AnimationStyle style <- Default.animationStyle()) 
  {
    // constrain if model has no width
    if (Epsilon.TINY.isWithinZero(number: this.defaultSize.width)) {
      width <- this.defaultSize.width;
    }
    
    this.size.animateWidth(width: width, dimensionPolicy: dimensionPolicy, duration: duration, animationStyle: style);
  }

  void setHeight(DecimalNumber height, DimensionPolicy dimensionPolicy <- Default.dimensionPolicy(), Duration duration <- Default.duration(),  AnimationStyle style <- Default.animationStyle()) 
  {
    // constrain if model has no height
    if (Epsilon.TINY.isWithinZero(number: this.defaultSize.height)) {
      height <- this.defaultSize.height;
    }

    this.size.animateHeight(height: height, dimensionPolicy: dimensionPolicy, duration: duration, animationStyle: style);
  }

  void setDepth(DecimalNumber depth, DimensionPolicy dimensionPolicy <- Default.dimensionPolicy(), Duration duration <- Default.duration(),  AnimationStyle style <- Default.animationStyle()) 
  {
    // constrain if model has no depth
    if (Epsilon.TINY.isWithinZero(number: this.defaultSize.depth)) {
      depth <- this.defaultSize.depth;
    }

    this.size.animateDepth(depth: depth, dimensionPolicy: dimensionPolicy, duration: duration, animationStyle: style);
  }

  void resize(Number factor,
              Duration duration <- Default.duration(),
              AnimationStyle animationStyle <- Default.animationStyle()) {
    this.size.animateResize( factor: factor, duration: duration, animationStyle: animationStyle );
  }

  void resizeWidth(Number factor,
                   Duration duration <- Default.duration(),
                   AnimationStyle animationStyle <- Default.animationStyle(),
                   Boolean isVolumePreserved <- Default.isVolumePreserved()) {
    DimensionPolicy policy <- DimensionPolicy.PRESERVE_NOTHING;
    if (isVolumePreserved) {
      policy <- DimensionPolicy.PRESERVE_VOLUME;
    }
    this.size.animateResizeWidth( factor: factor, dimensionPolicy: policy, duration: duration, animationStyle: animationStyle );
  }

  void resizeHeight(Number factor,
                    Duration duration <- Default.duration(),
                    AnimationStyle animationStyle <- Default.animationStyle(),
                    Boolean isVolumePreserved <- Default.isVolumePreserved()) {
    DimensionPolicy policy <- DimensionPolicy.PRESERVE_NOTHING;
    if (isVolumePreserved) {
      policy <- DimensionPolicy.PRESERVE_VOLUME;
    }
    this.size.animateResizeHeight( factor: factor, dimensionPolicy: policy, duration: duration, animationStyle: animationStyle );
  }

  void resizeDepth(Number factor,
                   Duration duration <- Default.duration(),
                   AnimationStyle animationStyle <- Default.animationStyle(),
                   Boolean isVolumePreserved <- Default.isVolumePreserved()) {
    DimensionPolicy policy <- DimensionPolicy.PRESERVE_NOTHING;
    if (isVolumePreserved) {
      policy <- DimensionPolicy.PRESERVE_VOLUME;
    }
    this.size.animateResizeDepth( factor: factor, dimensionPolicy: policy, duration: duration, animationStyle: animationStyle );
  }

  Paint getPaint() {
    return this.paint.getValue();
  }

  void setPaint(Paint paint, Duration duration <- Default.duration(),  AnimationStyle style <- Default.animationStyle()) 
  {
    this.paint.animateValue(endValue: paint, duration: duration, animationStyle: style);
  }

  Portion getOpacity() {
    return this.opacity.getValue();
  }

  void setOpacity(Portion opacity,
                  Duration duration <- Default.duration(),
                  AnimationStyle style <- Default.animationStyle() ) {
    this.opacity.animateValue(endValue: opacity, duration: duration, animationStyle: style);
  }

  @CompletelyHidden Position getMinPoint( SThing asSeenBy ) {
    return this.getDynamicAxisAlignedMinimumBoundingBox( asSeenBy: asSeenBy ).minimum;
  }

  @CompletelyHidden Position getMaxPoint( SThing asSeenBy ) {
    return this.getDynamicAxisAlignedMinimumBoundingBox( asSeenBy: asSeenBy ).maximum;
  }

  //Returns a bounding box that reflects any changes to the given entity. Namely any changes to the skeleton of jointed models
  @CompletelyHidden AxisAlignedBox getDynamicAxisAlignedMinimumBoundingBox( SThing asSeenBy ) {
    AxisAlignedBox aabb <- $SceneGraph.getLocalBoundingBox(model: this, dynamic: true);
    VantagePoint trans <- this.getTransformation( asSeenBy: asSeenBy );
    return aabb.transform(vantagePoint: trans);
  }

  @CompletelyHidden AxisAlignedBox getAxisAlignedMinimumBoundingBox( SThing asSeenBy ) {
    AxisAlignedBox aabb <- $SceneGraph.getLocalBoundingBox(model: this, dynamic: false);
    VantagePoint trans <- this.getTransformation( asSeenBy: asSeenBy );
    return aabb.transform(vantagePoint: trans);
  }

  void setVehicle(SThing vehicle) {
    this.vehicle <- vehicle;
    localTransformation.value <- $SceneGraph.setVehicle(vehicle: vehicle, rider: this);
  }

  @CompletelyHidden Size defaultSize;
  @CompletelyHidden SizeProperty size <- new SizeProperty(owner: this, value: new Size(width: 1, height: 1, depth: 1));
  @CompletelyHidden PaintProperty paint <- new PaintProperty(owner: this, value: Color.WHITE);
  @CompletelyHidden PortionProperty opacity <- new PortionProperty(owner: this, value: Portion.WHOLE);
}