class Scene extends SScene {
  Scene() {
    super();
  }

  void initializeEventListeners() {
    this.addSceneActivationListener(listener: (SceneActivationEvent event)-> {
      this.myFirstMethod();
    });
  }

  void myFirstMethod() {
    // Make adjustments to the starting scene, in a way not available in the Scene editor
    $Debug.log(message: this.getName() .. ": myFirstMethod()");

    Position camPos <- camera.getPositionRelativeToVehicle();
    Orientation camRot <- camera.getOrientationRelativeToVehicle();

    $Debug.log(message: "billboard");
    this.camera.moveAndOrientToAGoodVantagePointOf(entity: billboard);
    billboard.setPaint(paint: Color.RED);
    billboard.turn(direction: TurnDirection.LEFT, amount new Angle(revolutions: 0.5), asSeenBy: billboard);
    billboard.setBackPaint(paint: Color.BLUE);
    billboard.turn(direction: TurnDirection.LEFT, amount new Angle(revolutions: 0.5), asSeenBy: billboard);
    billboard.setPaint(paint: new ImageSource(resource: "grass"));
    billboard.turn(direction: TurnDirection.LEFT, amount new Angle(revolutions: 1), asSeenBy: billboard);

    $Debug.log(message: "disc");
    this.camera.moveAndOrientToAGoodVantagePointOf(entity: disc);
    disc.setRadius(radius: 1.25);
    disc.setHeight(height: 1.25);
    disc.setDepth(depth: 0.5, dimensionPolicy: DimensionPolicy.PRESERVE_NOTHING);
    disc.setWidth(width: 0.5, dimensionPolicy: DimensionPolicy.PRESERVE_NOTHING);
    disc.setRadius(radius: 0.5);

    $Debug.log(message: "sphere");
    this.camera.pointAt(target: sphere);
    sphere.setRadius(radius: 1);
    sphere.setHeight(height: 1, dimensionPolicy: DimensionPolicy.PRESERVE_NOTHING);
    sphere.setRadius(radius: 0.3);
    sphere.setSize(size: Size.ONE);

    $Debug.log(message: "torus");
    this.camera.moveAndOrientToAGoodVantagePointOf(entity: torus);
    torus.setOuterRadius(radius: 1.25);
    torus.setInnerRadius(radius: 0.1);
    torus.setInnerRadius(radius: 0.7);
    torus.setOuterRadius(radius: 0.9);
    torus.setHeight(height: 0.5, dimensionPolicy: DimensionPolicy.PRESERVE_NOTHING);
    torus.setDepth(depth: 0.5, dimensionPolicy: DimensionPolicy.PRESERVE_NOTHING);
    torus.setInnerRadius(radius: 0.25);
    torus.setOuterRadius(radius: 0.75);
    torus.setDepth(depth: 1.5, dimensionPolicy: DimensionPolicy.PRESERVE_NOTHING);
    torus.setHeight(height: 0.5, dimensionPolicy: DimensionPolicy.PRESERVE_NOTHING);


    $Debug.log(message: "cylinder");
    this.camera.moveAndOrientToAGoodVantagePointOf(entity: cylinder);
    cylinder.setRadius(radius: 1);
    cylinder.setLength(length: 3);
    cylinder.setRadius(radius: 0.5);
    cylinder.setLength(length: 1);

    $Debug.log(message: "cone");
    cone.setBaseRadius(baseRadius: 1);
    cone.setLength(length: 3);
    cone.setBaseRadius(baseRadius: 0.5);
    cone.setLength(length: 1);

    doTogether {
      camera.setPositionRelativeToVehicle(position: camPos);
      camera.setOrientationRelativeToVehicle(orientation: camRot);
    }

    // fade in boxes
    $Debug.log(message: "opacity");
    Duration fadeDur <- new Duration(seconds: 0.1);
    box2.setOpacity(opacity: Portion.WHOLE, duration: fadeDur);
    box3.setOpacity(opacity: Portion.WHOLE, duration: fadeDur);
    box4.setOpacity(opacity: Portion.WHOLE, duration: fadeDur);
    box5.setOpacity(opacity: Portion.WHOLE, duration: fadeDur);

    Position pos <- box2.getPositionRelativeToVehicle();
    Orientation rot <- box2.getOrientationRelativeToVehicle();

    // vehicle
    $Debug.log(message: "vehicle");
    box3.move(direction: MoveDirection.LEFT, amount: 1, asSeenBy: box3);
    box3.turn(direction: TurnDirection.RIGHT, amount: new Angle(revolutions: 1), duration: Duration.TWO_SECONDS, asSeenBy: box3);
    box3.move(direction: MoveDirection.RIGHT, amount: 1, asSeenBy: box3);

    // move
    $Debug.log(message: "move forward/backward");
    moveBox(box: box2, dir: MoveDirection.FORWARD, asSeenBy:box2, showAsSeenBy: true);
    moveBox(box: box2, dir: MoveDirection.BACKWARD, asSeenBy:box2, showAsSeenBy: false);
    moveBox(box: box2, dir: MoveDirection.FORWARD, asSeenBy:box, showAsSeenBy: true);
    moveBox(box: box2, dir: MoveDirection.BACKWARD, asSeenBy:box, showAsSeenBy: false);
    moveBox(box: box2, dir: MoveDirection.FORWARD, asSeenBy:box3, showAsSeenBy: true);
    moveBox(box: box2, dir: MoveDirection.BACKWARD, asSeenBy:box3, showAsSeenBy: false);

    $Debug.log(message: "move right/left");
    moveBox(box: box2, dir: MoveDirection.RIGHT, asSeenBy:box2, showAsSeenBy: true);
    moveBox(box: box2, dir: MoveDirection.LEFT, asSeenBy:box2, showAsSeenBy: false);
    moveBox(box: box2, dir: MoveDirection.RIGHT, asSeenBy:box, showAsSeenBy: true);
    moveBox(box: box2, dir: MoveDirection.LEFT, asSeenBy:box, showAsSeenBy: false);
    moveBox(box: box2, dir: MoveDirection.RIGHT, asSeenBy:box3, showAsSeenBy: true);
    moveBox(box: box2, dir: MoveDirection.LEFT, asSeenBy:box3, showAsSeenBy: false);

    $Debug.log(message: "move up/down");
    moveBox(box: box2, dir: MoveDirection.UP, asSeenBy:box2, showAsSeenBy: true);
    moveBox(box: box2, dir: MoveDirection.DOWN, asSeenBy:box2, showAsSeenBy: false);
    moveBox(box: box2, dir: MoveDirection.UP, asSeenBy:box, showAsSeenBy: true);
    moveBox(box: box2, dir: MoveDirection.DOWN, asSeenBy:box, showAsSeenBy: false);
    moveBox(box: box2, dir: MoveDirection.UP, asSeenBy:box3, showAsSeenBy: true);
    moveBox(box: box2, dir: MoveDirection.DOWN, asSeenBy:box3, showAsSeenBy: false);

    // move toward and away
    $Debug.log(message: "move towards/away");
    moveBoxToward(box: box2, target: box4);
    moveBoxAway(box: box2, target: box4);
    moveBoxToward(box: box2, target: box3);
    moveBoxAway(box: box2, target: box3);
    moveBoxToward(box: box2, target: box5);
    moveBoxAway(box: box2, target: box5);

    // move to
    $Debug.log(message: "move to");
    moveToBox(box: box2, target: box4, pathStyle: PathStyle.BEE_LINE, duration: Duration.TWO_SECONDS);
    doTogether {
      box.move(direction: MoveDirection.RIGHT, amount: 1, asSeenBy: box);
      moveToBox(box: box2, target: box, pathStyle: PathStyle.SMOOTH, duration: Duration.TWO_SECONDS);
    }
    delay(duration: new Duration(seconds: 0.1));
    doTogether {
      box.move(direction: MoveDirection.LEFT, amount: 1, asSeenBy: box);
      box2.setPositionRelativeToVehicle(position: pos);
      box2.setOrientationRelativeToVehicle(orientation: rot);
    }

    //place
    $Debug.log(message: "place right of");
    placeBox(box:box2, target: box3, asSeenBy:box3, spatialRelation: SpatialRelation.RIGHT_OF, pathStyle: PathStyle.SMOOTH, offset: 0.1);
    $Debug.log(message: "place left of");
    placeBox(box:box2, target: box, asSeenBy:box, spatialRelation: SpatialRelation.LEFT_OF, pathStyle: PathStyle.SMOOTH, offset: 0.1);
    $Debug.log(message: "place behind");
    placeBox(box:box2, target: box4, asSeenBy:box4, spatialRelation: SpatialRelation.BEHIND, pathStyle: PathStyle.BEE_LINE, offset: 0.2);
    $Debug.log(message: "place in front of");
    placeBox(box:box2, target: box3, asSeenBy:box3, spatialRelation: SpatialRelation.IN_FRONT_OF, pathStyle: PathStyle.BEE_LINE, offset: 0.2);
    $Debug.log(message: "place below");
    placeBox(box:box2, target: box5, asSeenBy:box5, spatialRelation: SpatialRelation.BELOW, pathStyle: PathStyle.SMOOTH, offset: 0.5);
    $Debug.log(message: "place above");
    placeBox(box:box2, target: box3, asSeenBy:box3, spatialRelation: SpatialRelation.ABOVE, pathStyle: PathStyle.SMOOTH, offset: 0.5);

    // reset box2
    doTogether {
      box2.setPositionRelativeToVehicle(position: pos);
      box2.setOrientationRelativeToVehicle(orientation: rot);
    }

    // move to and orient
    $Debug.log(message: "move to and orient");
    moveAndOrientToBox(box: box2, target: box5, pathStyle: PathStyle.BEE_LINE, duration: Duration.TWO_SECONDS);
    moveAndOrientToBox(box: box2, target: box4, pathStyle: PathStyle.SMOOTH, duration: Duration.TWO_SECONDS);
    doTogether {
      box.move(direction: MoveDirection.RIGHT, amount: 1, asSeenBy: box);
      moveAndOrientToBox(box: box2, target: box, pathStyle: PathStyle.SMOOTH, duration: Duration.TWO_SECONDS);
    }
    delay(duration: new Duration(seconds: 0.1));
    doTogether {
      box.move(direction: MoveDirection.LEFT, amount: 1, asSeenBy: box);
      box2.setPositionRelativeToVehicle(position: pos);
      box2.setOrientationRelativeToVehicle(orientation: rot);
    }
    
    // turn and roll
    $Debug.log(message: "turn forward");
    turnBox(box: box2, dir: TurnDirection.FORWARD, asSeenBy: box2);
    turnBox(box: box2, dir: TurnDirection.FORWARD, asSeenBy: box);
    turnBox(box: box2, dir: TurnDirection.FORWARD, asSeenBy: box3);

    $Debug.log(message: "turn left");
    turnBox(box: box2, dir: TurnDirection.LEFT, asSeenBy: box2);
    turnBox(box: box2, dir: TurnDirection.LEFT, asSeenBy: box);
    turnBox(box: box2, dir: TurnDirection.LEFT, asSeenBy: box3);

    $Debug.log(message: "roll right");
    rollBox(box: box2, dir: RollDirection.RIGHT, asSeenBy: box2);
    rollBox(box: box2, dir: RollDirection.RIGHT, asSeenBy: box);
    rollBox(box: box2, dir: RollDirection.RIGHT, asSeenBy: box3);

    // turn to face
    $Debug.log(message: "turn to face");
    turnToFaceBox(box: box2, target: box);
    turnToFaceBox(box: box2, target: box3);
    turnToFaceBox(box: box2, target: box4);

    // orient to upright
    $Debug.log(message: "orient to upright");
    box2.setOrientationRelativeToVehicle(orientation: new Orientation(forward: Direction.UP, up: Direction.RIGHT));
    box2.orientToUpright(upAsSeenBy: this);

    box2.setOrientationRelativeToVehicle(orientation: new Orientation(forward: Direction.DOWN, up: Direction.RIGHT));
    box2.orientToUpright(upAsSeenBy: this);

    box2.setOrientationRelativeToVehicle(orientation: new Orientation(axis: new Direction(x: 1, y: 1, z: 1).normalize(), angle: new Angle(revolutions: 0.25)));
    box2.orientToUpright(upAsSeenBy: this);

    // point at
    $Debug.log(message: "point at");
    pointAtBox(box: box2, target: box, upAsSeenBy: this);
    pointAtBox(box: box2, target: box3, upAsSeenBy: box);
    pointAtBox(box: box2, target: box4, upAsSeenBy: box3);

    // orientTo
    $Debug.log(message: "orient to");
    orientToBox(box: box2, target: box4);
    orientToBox(box: box2, target: box5);
    orientToBox(box: box2, target: box);

    $Debug.log(message: "resize");
    this.box.resize(factor: 2);
    this.box.resize(factor: 0.5);

    $Debug.log(message: "resize width then height and depth together PRESERVE_NOTHING");
    this.box.resizeWidth(factor: 2, isVolumePreserved: false);
    $Debug.log(message: "resize height and depth together PRESERVE_NOTHING");
    doTogether {
      this.box.resizeHeight(factor: 2, isVolumePreserved: false);
      this.box.resizeDepth(factor: 2, isVolumePreserved: false);
    }

    this.box.resizeHeight(factor: 0.5, isVolumePreserved: false);
    doTogether {
      this.box.resizeWidth(factor: 0.5, isVolumePreserved: false);
      this.box.resizeDepth(factor: 0.5, isVolumePreserved: false);
    }

    $Debug.log(message: "resize height PRESERVE_VOLUME");
    this.box.resizeHeight(factor: 4, isVolumePreserved: true);
    this.box.resizeHeight(factor: 0.25, isVolumePreserved: true);

    $Debug.log(message: "set width PRESERVE_VOLUME");
    this.box.setWidth(width: 3, dimensionPolicy: DimensionPolicy.PRESERVE_VOLUME);
    this.box.setWidth(width: 1, dimensionPolicy: DimensionPolicy.PRESERVE_VOLUME);

    $Debug.log(message: "set height PRESERVE_ASPECT_RATIO");
    this.box.setHeight(height: 3, dimensionPolicy: DimensionPolicy.PRESERVE_ASPECT_RATIO);
    this.box.setHeight(height: 1, dimensionPolicy: DimensionPolicy.PRESERVE_ASPECT_RATIO);

    $Debug.log(message: "set depth PRESERVE_NOTHING");
    this.box.setDepth(depth: 3, dimensionPolicy: DimensionPolicy.PRESERVE_NOTHING);
    this.box.setDepth(depth: 1, dimensionPolicy: DimensionPolicy.PRESERVE_NOTHING);

    $Debug.log(message: "fog density and atmosphere color");
    Portion fogDensity <- getFogDensity();
    Color atmosphereColor <- getAtmosphereColor();
    doTogether {
      setFogDensity(density: new Portion(portion: 0.2), duration: Duration.TWO_SECONDS);
      setAtmosphereColor(color: new Color(red: 160.0/255.0, green: 150.0/255.0, blue: 170.0/255.0 ), duration: Duration.TWO_SECONDS);
    }
    doTogether {
      setAtmosphereColor(color: atmosphereColor, duration: Duration.TWO_SECONDS);
      setFogDensity(density: fogDensity, duration: Duration.TWO_SECONDS);
    }

    $Debug.log(message: "ambient light color");
    Color ambient <- getAmbientLightColor();
    setAmbientLightColor(color: Color.RED);
    setAmbientLightColor(color: ambient);

    $Debug.log(message: "from above light color");
    Color above <- getFromAboveLightColor();
    setFromAboveLightColor(color: Color.RED);
    setFromAboveLightColor(color: above);

    $Debug.log(message: "from below light color");
    Color below <- getFromBelowLightColor();
    setFromBelowLightColor(color: Color.BLUE);
    setFromBelowLightColor(color: below);
    
    
  }

  void moveBox(SBox box, MoveDirection dir, SBox asSeenBy, Boolean showAsSeenBy) {
    doTogether {
      if (showAsSeenBy) {
        asSeenBy.setPaint(paint: Color.BLUE);
      } else {
         asSeenBy.setPaint(paint: Color.WHITE);
      }
      box.move(direction: dir, amount: 1, duration: Duration.HALF_SECOND, asSeenBy: asSeenBy, style: AnimationStyle.BEGIN_GENTLY_AND_END_ABRUPTLY);
    }
  }

  void moveBoxToward(SBox box, SBox target) {
    doTogether {
      doInOrder {
        target.setPaint(paint: Color.RED, duration: Duration.HALF_SECOND);
        target.setPaint(paint: Color.WHITE, duration: Duration.HALF_SECOND);
      }
      box.moveToward(target: target, amount: 1, duration: Duration.ONE_SECOND, style: AnimationStyle.BEGIN_GENTLY_AND_END_ABRUPTLY);
    }
  }

  void moveBoxAway(SBox box, SBox target) {
    doTogether {
      doInOrder {
        target.setPaint(paint: Color.PURPLE, duration: Duration.HALF_SECOND);
        target.setPaint(paint: Color.WHITE, duration: Duration.HALF_SECOND);
      }
      box.moveAwayFrom(target: target, amount: 1, duration: Duration.ONE_SECOND, style: AnimationStyle.BEGIN_ABRUPTLY_AND_END_GENTLY);
    }
  }

  void moveToBox(SBox box, SBox target, PathStyle pathStyle, Duration duration <- Default.duration()) {
    Duration halfTime <- duration.dividedBy(divisor: 2);
    doTogether {
      doInOrder {
        target.setPaint(paint: Color.RED, duration: halfTime);
        target.setPaint(paint: Color.WHITE, duration: halfTime);
      }
      box.moveTo(target: target, pathStyle: pathStyle, duration: duration);
    }
  }

  void placeBox(SBox box, SBox target, SBox asSeenBy, SpatialRelation spatialRelation, PathStyle pathStyle, DecimalNumber offset, Duration duration <- Duration.TWO_SECONDS) {
    Duration halfTime <- duration.dividedBy(divisor: 2);
    doTogether {
      doInOrder {
        doTogether {
          target.setPaint(paint: Color.RED, duration: halfTime);
          if (target != asSeenBy) {
            asSeenBy.setPaint(paint: Color.BLUE, duration: halfTime);
          }
        } 
        doTogether {
          target.setPaint(paint: Color.WHITE, duration: halfTime);
          if (target != asSeenBy) {
            asSeenBy.setPaint(paint: Color.WHITE, duration: halfTime);
          }
        }
      }
      box.place(
        spatialRelation: spatialRelation,
        target: target,
        asSeenBy: asSeenBy,
        duration: duration,
        pathStyle: pathStyle,
        alongAxisOffset: offset
      );
    }
  }

  void moveAndOrientToBox(SBox box, SBox target, PathStyle pathStyle, Duration duration <- Default.duration()) {
    Duration halfTime <- duration.dividedBy(divisor: 2);
    doTogether {
      doInOrder {
        target.setPaint(paint: Color.RED, duration: halfTime);
        target.setPaint(paint: Color.WHITE, duration: halfTime);
      }
      box.moveAndOrientTo(target: target, pathStyle: pathStyle, duration: duration);
    }
  }

  void turnBox(SBox box, TurnDirection dir, SBox asSeenBy) {
    doTogether {
      doInOrder {
        asSeenBy.setPaint(paint: Color.BLUE);
        asSeenBy.setPaint(paint: Color.WHITE);
      }
      box.turn(direction: dir, amount: new Angle(revolutions: 1), duration: Duration.TWO_SECONDS, asSeenBy: asSeenBy);
    }
  }

  void rollBox(SBox box, RollDirection dir, SBox asSeenBy) {
    doTogether {
      doInOrder {
        asSeenBy.setPaint(paint: Color.BLUE);
        asSeenBy.setPaint(paint: Color.WHITE);
      }
      box.roll(direction: dir, amount: new Angle(revolutions: 1), duration: Duration.TWO_SECONDS, asSeenBy: asSeenBy);
    }
  }

  void turnToFaceBox(SBox box, SBox target) {
    doTogether {
      target.setPaint(paint: Color.RED);
      box.turnToFace(target: target, duration: Duration.ONE_SECOND);
    }
    target.setPaint(paint: Color.WHITE, duration: Duration.HALF_SECOND);
  }

  void pointAtBox(SBox box, SBox target, SThing upAsSeenBy) {
    doTogether {
      target.setPaint(paint: Color.RED);
      if ($System.isInstanceOf(instance: upAsSeenBy, type: SModel)) {
        SModel modelViewer <- upAsSeenBy;
        modelViewer.setPaint(paint: Color.BLUE);
      }
      box.pointAt(target: target, upAsSeenBy: upAsSeenBy, duration: Duration.ONE_SECOND);
    }
    doTogether {
      target.setPaint(paint: Color.WHITE, duration: Duration.HALF_SECOND);
      if ($System.isInstanceOf(instance: upAsSeenBy, type: SModel)) {
        SModel modelViewer <- upAsSeenBy;
        modelViewer.setPaint(paint: Color.WHITE, duration: Duration.HALF_SECOND);
      }
    }
  }

  void orientToBox(SBox box, SBox target) {
    doTogether {
      target.setPaint(paint: Color.RED);
      box.orientTo(target: target, duration: Duration.ONE_SECOND);
    }
    target.setPaint(paint: Color.WHITE, duration: Duration.HALF_SECOND);
  }

  //SGround ground <- new SGround();
  SCamera camera <- new SCamera();
  Box box <- new Box();
  DirectionalBox box2 <- new DirectionalBox();
  DirectionalBox box3 <- new DirectionalBox();
  DirectionalBox box4 <- new DirectionalBox();
  DirectionalBox box5 <- new DirectionalBox();
  SSphere sphere <- new SSphere();
  SCylinder cylinder <- new SCylinder();
  SCone cone <- new SCone();
  STorus torus <- new STorus();
  SDisc disc <- new SDisc();
  SBillboard billboard <- new SBillboard();

  void performCustomSetup() {
    this.box.setPositionRelativeToVehicle(position: new Position(x: -0.5, y: 0.0, z: 0.0), duration: Duration.ZERO);
    this.box.setOrientationRelativeToVehicle(orientation: new Orientation(axis: Direction.UP, angle: new Angle(revolutions: -0.1)), duration: Duration.ZERO);

    // show forward on box 
    SBox nose <- new SBox();
    nose.setName(name: "Nose");
    nose.setVehicle(vehicle: box);
    nose.setSize(size: new Size(width: 0.5, height: 0.5, depth: 0.5), duration: Duration.ZERO);
    nose.setOrientationRelativeToVehicle(orientation: Orientation.IDENTITY, duration: Duration.ZERO);
    nose.setPositionRelativeToVehicle(position: new Position(x: 0, y: 0, z: -0.5), duration: Duration.ZERO);
    
    box3.setName(name: "box3");
    box3.setVehicle(vehicle: this);
    box3.setPositionRelativeToVehicle(position: new Position(x: 3.5, y: 2.0, z: 0.0), duration: Duration.ZERO);
    box3.setOrientationRelativeToVehicle(orientation: new Orientation(axis: Direction.UP, angle: new Angle(revolutions: 0.1)), duration: Duration.ZERO);
    box3.setOpacity(opacity: Portion.NONE, duration: Duration.ZERO);

    box2.setName(name: "box2");
    box2.setPositionRelativeToVehicle(position: new Position(x: 2.5, y: 0.0, z: 0.0), duration: Duration.ZERO);
    box2.setVehicle(vehicle: box3);
    box2.setOpacity(opacity: Portion.NONE, duration: Duration.ZERO);

    box4.setName(name: "box4");
    box4.setVehicle(vehicle: this);
    box4.setPositionRelativeToVehicle(position: new Position(x: -2.0, y: 0.0, z: -4.0), duration: Duration.ZERO);
    box4.setOrientationRelativeToVehicle(orientation: new Orientation(axis: new Direction(x: 1, y: 1, z: 1).normalize(), angle: new Angle(revolutions: -0.25)), duration: Duration.ZERO);
    box4.setOpacity(opacity: Portion.NONE, duration: Duration.ZERO);

    box5.setName(name: "box5");
    box5.setVehicle(vehicle: this);
    box5.setPositionRelativeToVehicle(position: new Position(x: 2.0, y: 0.0, z: 5.0), duration: Duration.ZERO);
    box5.setOrientationRelativeToVehicle(orientation: new Orientation(axis: new Direction(x: 1, y: -1, z: 1).normalize(), angle: new Angle(revolutions: 0.2)), duration: Duration.ZERO);
    box5.setOpacity(opacity: Portion.NONE, duration: Duration.ZERO);

    sphere.setVehicle(vehicle: this);
    sphere.setPositionRelativeToVehicle(position: new Position(x: 2.0, y: 0.0, z: -12.0), duration: Duration.ZERO);

    cylinder.setVehicle(vehicle: this);
    cylinder.setPositionRelativeToVehicle(position: new Position(x: -2.0, y: 0.0, z: -12.0), duration: Duration.ZERO);

    cone.setVehicle(vehicle: this);
    cone.setPositionRelativeToVehicle(position: new Position(x: 0.0, y: 0.0, z: -12.0), duration: Duration.ZERO);

    torus.setVehicle(vehicle: this);
    torus.setPositionRelativeToVehicle(position: new Position(x: 4, y: 0.0, z: -12.0), duration: Duration.ZERO);

    disc.setVehicle(vehicle: this);
    disc.setPositionRelativeToVehicle(position: new Position(x: -4, y: 0.0, z: -12.0), duration: Duration.ZERO);

    billboard.setVehicle(vehicle: this);
    billboard.setPositionRelativeToVehicle(position: new Position(x: -6, y: 0.0, z: -12.0), duration: Duration.ZERO);

  }



  // NOTE: All property settings should use a duration of 0
  void performGeneratedSetUp() {
    // DO NOT EDIT
    // This code is automatically generated.  Any work you perform in this method will be overwritten.
    // DO NOT EDIT
    this.setAtmosphereColor(color: new Color(red: 0.0, green: 0.0941, blue: 0.294), duration: Duration.ZERO);
    this.setFromAboveLightColor(color: Color.WHITE, duration: Duration.ZERO);
    this.setFromBelowLightColor(color: new Color(red: 0.541, green: 0.0, blue: 0.125), duration: Duration.ZERO);
    this.setFogDensity(density: new Portion(portion: 0.1), duration: Duration.ZERO);
    this.setName(name: "myScene");
    //this.ground.setPaint(paint: SurfaceAppearance.DARK_GRASS);
    //this.ground.setOpacity(opacity: 1.0);
    //this.ground.setName(name: "ground");
    //this.ground.setVehicle(vehicle: this);
    this.camera.setName(name: "camera");
    this.camera.setVehicle(vehicle: this);
    this.camera.setOrientationRelativeToVehicle(orientation: new Orientation(x: 0.0, y: 0.995185, z: 0.0980144, w: 6.12323E-17), duration: Duration.ZERO);
    this.camera.setPositionRelativeToVehicle(position: new Position(x: 9.61E-16, y: 1.56, z: -7.85), duration: Duration.ZERO);
    this.box.setPaint(paint: Color.WHITE, duration: Duration.ZERO);
    this.box.setOpacity(opacity: new Portion(portion: 1.0), duration: Duration.ZERO);
    this.box.setName(name: "box");
    this.box.setVehicle(vehicle: this);
    this.box.setOrientationRelativeToVehicle(orientation: new Orientation(x: 0.0, y: 0.0, z: 0.0, w:1), duration: Duration.ZERO);
    this.box.setPositionRelativeToVehicle(position: new Position(x: 0.0, y: 0.0, z: 0.0), duration: Duration.ZERO);
    this.box.setSize(size: new Size(width: 1.0, height: 1.0, depth: 1.0), duration: Duration.ZERO);
  }

  /*SGround getGround() {
    return this.ground;
  }*/
  SCamera getCamera() {
    return this.camera;
  }
  Box getBox() {
    return this.box;
  }
}