class Program {

  TextString name;
  WholeNumber id <- 0;
  TestEnum test <- TestEnum.DOWN;
  DirectionEnum dir <- DirectionEnum.LEFT;

  Program(TextString name, WholeNumber id <- 0) {
    this.name <- name;
  }

  TextString getName() {
    return name;
  }

  void execute() {
    Portion p <- new Portion(number: 0);
    Portion clone <- new Portion(clone: p);
    $Debug.dump(object: clone);
    // $Debug.log(string: "Portion value is " .. p.value);

    test.logSelf();
  }
  
  static void main() {
    TextString textStr <- "This string is from tweedle";
    $Debug.log(string: "static incrementer is " .. Program.newPosTest);

    $Debug.log(string: textStr .. " (length " .. textStr.length .. ")";
    $Debug.log(string: "Substring from" .. " 7: " .. textStr.substring(startIndex: 0, length: 7) .. "[" .. textStr.substring(startIndex: 7) .. "]");
    forLoop(start: 0, end: 100);

    Program p <- new Program(name: "Some name");
    $Debug.log(string: "Program name is " .. p.getName() .. " and id is " .. p.id .. " and test is " .. p.test .. " and direction is " .. p.dir);
    p.execute();
  }

  static void forLoop(WholeNumber start, WholeNumber end) {
    WholeNumber i <- start;

    $Debug.beginTiming();
    $Debug.log(string: "Timing label: " .. $Debug.timingLabel);
    $Debug.timingLabel <- "Some other value";

    while (i <= end) {
      $Debug.log(string: "" .. i);
      i <- i + 1;
    }

    DecimalNumber totalTime <- $Debug.endTiming();
    DecimalNumber timePerLoop <- totalTime / (end - start + 1);
    $Debug.log(string: "Time per loop: " .. timePerLoop);
  }

  static Position newPosTest <- new Position(right: 2, up: -1, backward: -99999.999956);
}