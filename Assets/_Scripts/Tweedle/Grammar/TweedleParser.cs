//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/daniel/dev/alice/alice/core/tweedle/src/main/antlr4/org/alice/tweedle/TweedleParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

namespace Alice.Tweedle
{
	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
	[System.CLSCompliant(false)]
	public partial class TweedleParser : Parser
	{
		protected static DFA[] decisionToDFA;
		protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
		public const int
			BOOLEAN = 1, CLASS = 2, COUNT_UP_TO = 3, CONSTANT = 4, DECIMAL_NUMBER = 5, DO_IN_ORDER = 6,
			DO_TOGETHER = 7, EACH = 8, ELSE = 9, ENUM = 10, EXTENDS = 11, FOR_EACH = 12, EACH_TOGETHER = 13,
			COMPLETELY_HIDDEN = 14, IF = 15, IN = 16, LOOP = 17, MODELS = 18, NEW = 19, NUMBER = 20,
			PRIME_TIME = 21, RETURN = 22, STATIC = 23, STRING = 24, SUPER = 25, THIS = 26, TUCKED_AWAY = 27,
			VOID = 28, WHILE = 29, WHOLE_NUMBER = 30, DECIMAL_LITERAL = 31, FLOAT_LITERAL = 32,
			BOOL_LITERAL = 33, STRING_LITERAL = 34, NULL_LITERAL = 35, LPAREN = 36, RPAREN = 37,
			LBRACE = 38, RBRACE = 39, LBRACK = 40, RBRACK = 41, SEMI = 42, COMMA = 43, DOT = 44,
			ASSIGN = 45, GT = 46, LT = 47, BANG = 48, TILDE = 49, QUESTION = 50, COLON = 51, EQUAL = 52,
			LE = 53, GE = 54, NOTEQUAL = 55, AND = 56, OR = 57, INC = 58, DEC = 59, ADD = 60, SUB = 61,
			MUL = 62, DIV = 63, BITAND = 64, BITOR = 65, CARET = 66, MOD = 67, ADD_ASSIGN = 68,
			SUB_ASSIGN = 69, MUL_ASSIGN = 70, DIV_ASSIGN = 71, AND_ASSIGN = 72, OR_ASSIGN = 73,
			XOR_ASSIGN = 74, MOD_ASSIGN = 75, LSHIFT_ASSIGN = 76, RSHIFT_ASSIGN = 77, URSHIFT_ASSIGN = 78,
			ARROW = 79, COLONCOLON = 80, AT = 81, ELLIPSIS = 82, LARROW = 83, WS = 84, COMMENT = 85,
			LINE_COMMENT = 86, NODE_COMMENT = 87, IDENTIFIER = 88;
		public const int
			RULE_typeDeclaration = 0, RULE_classModifier = 1, RULE_visibility = 2,
			RULE_visibilityLevel = 3, RULE_variableModifier = 4, RULE_classDeclaration = 5,
			RULE_identifier = 6, RULE_typeParameters = 7, RULE_typeParameter = 8,
			RULE_typeBound = 9, RULE_enumDeclaration = 10, RULE_enumConstants = 11,
			RULE_enumConstant = 12, RULE_classBody = 13, RULE_classBodyDeclaration = 14,
			RULE_memberDeclaration = 15, RULE_methodDeclaration = 16, RULE_methodBody = 17,
			RULE_typeTypeOrVoid = 18, RULE_genericMethodDeclaration = 19, RULE_genericConstructorDeclaration = 20,
			RULE_constructorDeclaration = 21, RULE_fieldDeclaration = 22, RULE_variableDeclarators = 23,
			RULE_variableDeclarator = 24, RULE_variableDeclaratorId = 25, RULE_variableInitializer = 26,
			RULE_arrayInitializer = 27, RULE_classOrInterfaceType = 28, RULE_typeArgument = 29,
			RULE_formalParameters = 30, RULE_formalParameterList = 31, RULE_requiredParameter = 32,
			RULE_optionalParameter = 33, RULE_lastFormalParameter = 34, RULE_literal = 35,
			RULE_block = 36, RULE_blockStatement = 37, RULE_localVariableDeclaration = 38,
			RULE_statement = 39, RULE_forControl = 40, RULE_parExpression = 41, RULE_labeledExpressionList = 42,
			RULE_labeledExpression = 43, RULE_expressionList = 44, RULE_methodCall = 45,
			RULE_expression = 46, RULE_lambdaExpression = 47, RULE_lambdaParameters = 48,
			RULE_lambdaBody = 49, RULE_primary = 50, RULE_classType = 51, RULE_creator = 52,
			RULE_createdName = 53, RULE_innerCreator = 54, RULE_arrayCreatorRest = 55,
			RULE_classCreatorRest = 56, RULE_explicitGenericInvocation = 57, RULE_typeArgumentsOrDiamond = 58,
			RULE_nonWildcardTypeArgumentsOrDiamond = 59, RULE_nonWildcardTypeArguments = 60,
			RULE_typeList = 61, RULE_typeType = 62, RULE_primitiveType = 63, RULE_typeArguments = 64,
			RULE_superSuffix = 65, RULE_explicitGenericInvocationSuffix = 66, RULE_arguments = 67;
		public static readonly string[] ruleNames = {
		"typeDeclaration", "classModifier", "visibility", "visibilityLevel", "variableModifier",
		"classDeclaration", "identifier", "typeParameters", "typeParameter", "typeBound",
		"enumDeclaration", "enumConstants", "enumConstant", "classBody", "classBodyDeclaration",
		"memberDeclaration", "methodDeclaration", "methodBody", "typeTypeOrVoid",
		"genericMethodDeclaration", "genericConstructorDeclaration", "constructorDeclaration",
		"fieldDeclaration", "variableDeclarators", "variableDeclarator", "variableDeclaratorId",
		"variableInitializer", "arrayInitializer", "classOrInterfaceType", "typeArgument",
		"formalParameters", "formalParameterList", "requiredParameter", "optionalParameter",
		"lastFormalParameter", "literal", "block", "blockStatement", "localVariableDeclaration",
		"statement", "forControl", "parExpression", "labeledExpressionList", "labeledExpression",
		"expressionList", "methodCall", "expression", "lambdaExpression", "lambdaParameters",
		"lambdaBody", "primary", "classType", "creator", "createdName", "innerCreator",
		"arrayCreatorRest", "classCreatorRest", "explicitGenericInvocation", "typeArgumentsOrDiamond",
		"nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", "typeList",
		"typeType", "primitiveType", "typeArguments", "superSuffix", "explicitGenericInvocationSuffix",
		"arguments"
	};

		private static readonly string[] _LiteralNames = {
		null, "'Boolean'", "'class'", "'countUpTo'", "'constant'", "'DecimalNumber'",
		"'doInOrder'", "'doTogether'", "'each'", "'else'", "'enum'", "'extends'",
		"'forEach'", "'eachTogether'", "'CompletelyHidden'", "'if'", "'in'", "'loop'",
		"'models'", "'new'", "'Number'", "'PrimeTime'", "'return'", "'static'",
		"'String'", "'super'", "'this'", "'TuckedAway'", "'void'", "'while'",
		"'WholeNumber'", null, null, null, null, "'null'", "'('", "')'", "'{'",
		"'}'", "'['", "']'", "';'", "','", "'.'", "'='", "'>'", "'<'", "'!'",
		"'~'", "'?'", "':'", "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'",
		"'--'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='",
		"'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='",
		"'>>>='", "'->'", "'::'", "'@'", "'...'", "'<-'", null, null, null, "'**'"
	};
		private static readonly string[] _SymbolicNames = {
		null, "BOOLEAN", "CLASS", "COUNT_UP_TO", "CONSTANT", "DECIMAL_NUMBER",
		"DO_IN_ORDER", "DO_TOGETHER", "EACH", "ELSE", "ENUM", "EXTENDS", "FOR_EACH",
		"EACH_TOGETHER", "COMPLETELY_HIDDEN", "IF", "IN", "LOOP", "MODELS", "NEW",
		"NUMBER", "PRIME_TIME", "RETURN", "STATIC", "STRING", "SUPER", "THIS",
		"TUCKED_AWAY", "VOID", "WHILE", "WHOLE_NUMBER", "DECIMAL_LITERAL", "FLOAT_LITERAL",
		"BOOL_LITERAL", "STRING_LITERAL", "NULL_LITERAL", "LPAREN", "RPAREN",
		"LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN",
		"GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", "LE", "GE",
		"NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND",
		"BITOR", "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN",
		"AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN",
		"RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "ARROW", "COLONCOLON", "AT", "ELLIPSIS",
		"LARROW", "WS", "COMMENT", "LINE_COMMENT", "NODE_COMMENT", "IDENTIFIER"
	};
		public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

		[NotNull]
		public override IVocabulary Vocabulary
		{
			get
			{
				return DefaultVocabulary;
			}
		}

		public override string GrammarFileName { get { return "TweedleParser.g4"; } }

		public override string[] RuleNames { get { return ruleNames; } }

		public override string SerializedAtn { get { return new string(_serializedATN); } }

		static TweedleParser()
		{
			decisionToDFA = new DFA[_ATN.NumberOfDecisions];
			for (int i = 0; i < _ATN.NumberOfDecisions; i++)
			{
				decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
			}
		}

		public TweedleParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TweedleParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
		{
			Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
		}
		public partial class TypeDeclarationContext : ParserRuleContext
		{
			public ClassDeclarationContext classDeclaration()
			{
				return GetRuleContext<ClassDeclarationContext>(0);
			}
			public EnumDeclarationContext enumDeclaration()
			{
				return GetRuleContext<EnumDeclarationContext>(0);
			}
			public ClassModifierContext[] classModifier()
			{
				return GetRuleContexts<ClassModifierContext>();
			}
			public ClassModifierContext classModifier(int i)
			{
				return GetRuleContext<ClassModifierContext>(i);
			}
			public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_typeDeclaration; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterTypeDeclaration(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitTypeDeclaration(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public TypeDeclarationContext typeDeclaration()
		{
			TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
			EnterRule(_localctx, 0, RULE_typeDeclaration);
			int _la;
			try
			{
				State = 147;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case CLASS:
					case ENUM:
					case STATIC:
					case AT:
						EnterOuterAlt(_localctx, 1);
						{
							State = 139;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la == STATIC || _la == AT)
							{
								{
									{
										State = 136; classModifier();
									}
								}
								State = 141;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 144;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1))
							{
								case CLASS:
									{
										State = 142; classDeclaration();
									}
									break;
								case ENUM:
									{
										State = 143; enumDeclaration();
									}
									break;
								default:
									throw new NoViableAltException(this);
							}
						}
						break;
					case SEMI:
						EnterOuterAlt(_localctx, 2);
						{
							State = 146; Match(SEMI);
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ClassModifierContext : ParserRuleContext
		{
			public VisibilityContext visibility()
			{
				return GetRuleContext<VisibilityContext>(0);
			}
			public ITerminalNode STATIC() { return GetToken(TweedleParser.STATIC, 0); }
			public ClassModifierContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_classModifier; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterClassModifier(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitClassModifier(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitClassModifier(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ClassModifierContext classModifier()
		{
			ClassModifierContext _localctx = new ClassModifierContext(Context, State);
			EnterRule(_localctx, 2, RULE_classModifier);
			try
			{
				State = 151;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case AT:
						EnterOuterAlt(_localctx, 1);
						{
							State = 149; visibility();
						}
						break;
					case STATIC:
						EnterOuterAlt(_localctx, 2);
						{
							State = 150; Match(STATIC);
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class VisibilityContext : ParserRuleContext
		{
			public VisibilityLevelContext visibilityLevel()
			{
				return GetRuleContext<VisibilityLevelContext>(0);
			}
			public VisibilityContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_visibility; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterVisibility(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitVisibility(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public VisibilityContext visibility()
		{
			VisibilityContext _localctx = new VisibilityContext(Context, State);
			EnterRule(_localctx, 4, RULE_visibility);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 153; Match(AT);
					State = 154; visibilityLevel();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class VisibilityLevelContext : ParserRuleContext
		{
			public ITerminalNode COMPLETELY_HIDDEN() { return GetToken(TweedleParser.COMPLETELY_HIDDEN, 0); }
			public ITerminalNode TUCKED_AWAY() { return GetToken(TweedleParser.TUCKED_AWAY, 0); }
			public ITerminalNode PRIME_TIME() { return GetToken(TweedleParser.PRIME_TIME, 0); }
			public VisibilityLevelContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_visibilityLevel; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterVisibilityLevel(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitVisibilityLevel(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitVisibilityLevel(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public VisibilityLevelContext visibilityLevel()
		{
			VisibilityLevelContext _localctx = new VisibilityLevelContext(Context, State);
			EnterRule(_localctx, 6, RULE_visibilityLevel);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 156;
					_la = TokenStream.LA(1);
					if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMPLETELY_HIDDEN) | (1L << PRIME_TIME) | (1L << TUCKED_AWAY))) != 0)))
					{
						ErrorHandler.RecoverInline(this);
					}
					else
					{
						ErrorHandler.ReportMatch(this);
						Consume();
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class VariableModifierContext : ParserRuleContext
		{
			public ITerminalNode CONSTANT() { return GetToken(TweedleParser.CONSTANT, 0); }
			public VariableModifierContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_variableModifier; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterVariableModifier(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitVariableModifier(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitVariableModifier(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public VariableModifierContext variableModifier()
		{
			VariableModifierContext _localctx = new VariableModifierContext(Context, State);
			EnterRule(_localctx, 8, RULE_variableModifier);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 158; Match(CONSTANT);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ClassDeclarationContext : ParserRuleContext
		{
			public ITerminalNode CLASS() { return GetToken(TweedleParser.CLASS, 0); }
			public IdentifierContext identifier()
			{
				return GetRuleContext<IdentifierContext>(0);
			}
			public ClassBodyContext classBody()
			{
				return GetRuleContext<ClassBodyContext>(0);
			}
			public TypeParametersContext typeParameters()
			{
				return GetRuleContext<TypeParametersContext>(0);
			}
			public ITerminalNode EXTENDS() { return GetToken(TweedleParser.EXTENDS, 0); }
			public TypeTypeContext typeType()
			{
				return GetRuleContext<TypeTypeContext>(0);
			}
			public ITerminalNode MODELS() { return GetToken(TweedleParser.MODELS, 0); }
			public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
			public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_classDeclaration; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterClassDeclaration(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitClassDeclaration(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ClassDeclarationContext classDeclaration()
		{
			ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
			EnterRule(_localctx, 10, RULE_classDeclaration);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 160; Match(CLASS);
					State = 161; identifier();
					State = 163;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == LT)
					{
						{
							State = 162; typeParameters();
						}
					}

					State = 167;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == EXTENDS)
					{
						{
							State = 165; Match(EXTENDS);
							State = 166; typeType();
						}
					}

					State = 171;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == MODELS)
					{
						{
							State = 169; Match(MODELS);
							State = 170; Match(IDENTIFIER);
						}
					}

					State = 173; classBody();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class IdentifierContext : ParserRuleContext
		{
			public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
			public IdentifierContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_identifier; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterIdentifier(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitIdentifier(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public IdentifierContext identifier()
		{
			IdentifierContext _localctx = new IdentifierContext(Context, State);
			EnterRule(_localctx, 12, RULE_identifier);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 175; Match(IDENTIFIER);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class TypeParametersContext : ParserRuleContext
		{
			public TypeParameterContext[] typeParameter()
			{
				return GetRuleContexts<TypeParameterContext>();
			}
			public TypeParameterContext typeParameter(int i)
			{
				return GetRuleContext<TypeParameterContext>(i);
			}
			public TypeParametersContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_typeParameters; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterTypeParameters(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitTypeParameters(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public TypeParametersContext typeParameters()
		{
			TypeParametersContext _localctx = new TypeParametersContext(Context, State);
			EnterRule(_localctx, 14, RULE_typeParameters);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 177; Match(LT);
					State = 178; typeParameter();
					State = 183;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == COMMA)
					{
						{
							{
								State = 179; Match(COMMA);
								State = 180; typeParameter();
							}
						}
						State = 185;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 186; Match(GT);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class TypeParameterContext : ParserRuleContext
		{
			public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
			public ITerminalNode EXTENDS() { return GetToken(TweedleParser.EXTENDS, 0); }
			public TypeBoundContext typeBound()
			{
				return GetRuleContext<TypeBoundContext>(0);
			}
			public TypeParameterContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_typeParameter; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterTypeParameter(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitTypeParameter(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public TypeParameterContext typeParameter()
		{
			TypeParameterContext _localctx = new TypeParameterContext(Context, State);
			EnterRule(_localctx, 16, RULE_typeParameter);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 188; Match(IDENTIFIER);
					State = 191;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == EXTENDS)
					{
						{
							State = 189; Match(EXTENDS);
							State = 190; typeBound();
						}
					}

				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class TypeBoundContext : ParserRuleContext
		{
			public TypeTypeContext[] typeType()
			{
				return GetRuleContexts<TypeTypeContext>();
			}
			public TypeTypeContext typeType(int i)
			{
				return GetRuleContext<TypeTypeContext>(i);
			}
			public TypeBoundContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_typeBound; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterTypeBound(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitTypeBound(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitTypeBound(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public TypeBoundContext typeBound()
		{
			TypeBoundContext _localctx = new TypeBoundContext(Context, State);
			EnterRule(_localctx, 18, RULE_typeBound);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 193; typeType();
					State = 198;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == BITAND)
					{
						{
							{
								State = 194; Match(BITAND);
								State = 195; typeType();
							}
						}
						State = 200;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class EnumDeclarationContext : ParserRuleContext
		{
			public ITerminalNode ENUM() { return GetToken(TweedleParser.ENUM, 0); }
			public IdentifierContext identifier()
			{
				return GetRuleContext<IdentifierContext>(0);
			}
			public EnumConstantsContext enumConstants()
			{
				return GetRuleContext<EnumConstantsContext>(0);
			}
			public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_enumDeclaration; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterEnumDeclaration(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitEnumDeclaration(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public EnumDeclarationContext enumDeclaration()
		{
			EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
			EnterRule(_localctx, 20, RULE_enumDeclaration);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 201; Match(ENUM);
					State = 202; identifier();
					State = 203; Match(LBRACE);
					State = 205;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == IDENTIFIER)
					{
						{
							State = 204; enumConstants();
						}
					}

					State = 207; Match(RBRACE);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class EnumConstantsContext : ParserRuleContext
		{
			public EnumConstantContext[] enumConstant()
			{
				return GetRuleContexts<EnumConstantContext>();
			}
			public EnumConstantContext enumConstant(int i)
			{
				return GetRuleContext<EnumConstantContext>(i);
			}
			public EnumConstantsContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_enumConstants; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterEnumConstants(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitEnumConstants(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitEnumConstants(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public EnumConstantsContext enumConstants()
		{
			EnumConstantsContext _localctx = new EnumConstantsContext(Context, State);
			EnterRule(_localctx, 22, RULE_enumConstants);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 209; enumConstant();
					State = 214;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == COMMA)
					{
						{
							{
								State = 210; Match(COMMA);
								State = 211; enumConstant();
							}
						}
						State = 216;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class EnumConstantContext : ParserRuleContext
		{
			public IdentifierContext identifier()
			{
				return GetRuleContext<IdentifierContext>(0);
			}
			public ArgumentsContext arguments()
			{
				return GetRuleContext<ArgumentsContext>(0);
			}
			public ClassBodyContext classBody()
			{
				return GetRuleContext<ClassBodyContext>(0);
			}
			public EnumConstantContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_enumConstant; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterEnumConstant(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitEnumConstant(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitEnumConstant(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public EnumConstantContext enumConstant()
		{
			EnumConstantContext _localctx = new EnumConstantContext(Context, State);
			EnterRule(_localctx, 24, RULE_enumConstant);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 217; identifier();
					State = 219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == LPAREN)
					{
						{
							State = 218; arguments();
						}
					}

					State = 222;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == LBRACE)
					{
						{
							State = 221; classBody();
						}
					}

				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ClassBodyContext : ParserRuleContext
		{
			public ClassBodyDeclarationContext[] classBodyDeclaration()
			{
				return GetRuleContexts<ClassBodyDeclarationContext>();
			}
			public ClassBodyDeclarationContext classBodyDeclaration(int i)
			{
				return GetRuleContext<ClassBodyDeclarationContext>(i);
			}
			public ClassBodyContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_classBody; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterClassBody(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitClassBody(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ClassBodyContext classBody()
		{
			ClassBodyContext _localctx = new ClassBodyContext(Context, State);
			EnterRule(_localctx, 26, RULE_classBody);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 224; Match(LBRACE);
					State = 228;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CLASS) | (1L << DECIMAL_NUMBER) | (1L << ENUM) | (1L << NUMBER) | (1L << STATIC) | (1L << STRING) | (1L << VOID) | (1L << WHOLE_NUMBER) | (1L << LBRACE) | (1L << SEMI) | (1L << LT))) != 0) || _la == AT || _la == IDENTIFIER)
					{
						{
							{
								State = 225; classBodyDeclaration();
							}
						}
						State = 230;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 231; Match(RBRACE);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ClassBodyDeclarationContext : ParserRuleContext
		{
			public BlockContext block()
			{
				return GetRuleContext<BlockContext>(0);
			}
			public ITerminalNode STATIC() { return GetToken(TweedleParser.STATIC, 0); }
			public MemberDeclarationContext memberDeclaration()
			{
				return GetRuleContext<MemberDeclarationContext>(0);
			}
			public ClassModifierContext[] classModifier()
			{
				return GetRuleContexts<ClassModifierContext>();
			}
			public ClassModifierContext classModifier(int i)
			{
				return GetRuleContext<ClassModifierContext>(i);
			}
			public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterClassBodyDeclaration(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitClassBodyDeclaration(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitClassBodyDeclaration(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ClassBodyDeclarationContext classBodyDeclaration()
		{
			ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(Context, State);
			EnterRule(_localctx, 28, RULE_classBodyDeclaration);
			int _la;
			try
			{
				State = 245;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 17, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 233; Match(SEMI);
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 235;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == STATIC)
							{
								{
									State = 234; Match(STATIC);
								}
							}

							State = 237; block();
						}
						break;
					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							State = 241;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la == STATIC || _la == AT)
							{
								{
									{
										State = 238; classModifier();
									}
								}
								State = 243;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 244; memberDeclaration();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class MemberDeclarationContext : ParserRuleContext
		{
			public MethodDeclarationContext methodDeclaration()
			{
				return GetRuleContext<MethodDeclarationContext>(0);
			}
			public GenericMethodDeclarationContext genericMethodDeclaration()
			{
				return GetRuleContext<GenericMethodDeclarationContext>(0);
			}
			public FieldDeclarationContext fieldDeclaration()
			{
				return GetRuleContext<FieldDeclarationContext>(0);
			}
			public ConstructorDeclarationContext constructorDeclaration()
			{
				return GetRuleContext<ConstructorDeclarationContext>(0);
			}
			public GenericConstructorDeclarationContext genericConstructorDeclaration()
			{
				return GetRuleContext<GenericConstructorDeclarationContext>(0);
			}
			public ClassDeclarationContext classDeclaration()
			{
				return GetRuleContext<ClassDeclarationContext>(0);
			}
			public EnumDeclarationContext enumDeclaration()
			{
				return GetRuleContext<EnumDeclarationContext>(0);
			}
			public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_memberDeclaration; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterMemberDeclaration(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitMemberDeclaration(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public MemberDeclarationContext memberDeclaration()
		{
			MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
			EnterRule(_localctx, 30, RULE_memberDeclaration);
			try
			{
				State = 254;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 18, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 247; methodDeclaration();
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 248; genericMethodDeclaration();
						}
						break;
					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							State = 249; fieldDeclaration();
						}
						break;
					case 4:
						EnterOuterAlt(_localctx, 4);
						{
							State = 250; constructorDeclaration();
						}
						break;
					case 5:
						EnterOuterAlt(_localctx, 5);
						{
							State = 251; genericConstructorDeclaration();
						}
						break;
					case 6:
						EnterOuterAlt(_localctx, 6);
						{
							State = 252; classDeclaration();
						}
						break;
					case 7:
						EnterOuterAlt(_localctx, 7);
						{
							State = 253; enumDeclaration();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class MethodDeclarationContext : ParserRuleContext
		{
			public TypeTypeOrVoidContext typeTypeOrVoid()
			{
				return GetRuleContext<TypeTypeOrVoidContext>(0);
			}
			public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
			public FormalParametersContext formalParameters()
			{
				return GetRuleContext<FormalParametersContext>(0);
			}
			public MethodBodyContext methodBody()
			{
				return GetRuleContext<MethodBodyContext>(0);
			}
			public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_methodDeclaration; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterMethodDeclaration(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitMethodDeclaration(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public MethodDeclarationContext methodDeclaration()
		{
			MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
			EnterRule(_localctx, 32, RULE_methodDeclaration);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 256; typeTypeOrVoid();
					State = 257; Match(IDENTIFIER);
					State = 258; formalParameters();
					State = 263;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == LBRACK)
					{
						{
							{
								State = 259; Match(LBRACK);
								State = 260; Match(RBRACK);
							}
						}
						State = 265;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 266; methodBody();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class MethodBodyContext : ParserRuleContext
		{
			public BlockContext block()
			{
				return GetRuleContext<BlockContext>(0);
			}
			public MethodBodyContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_methodBody; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterMethodBody(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitMethodBody(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public MethodBodyContext methodBody()
		{
			MethodBodyContext _localctx = new MethodBodyContext(Context, State);
			EnterRule(_localctx, 34, RULE_methodBody);
			try
			{
				State = 270;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case LBRACE:
						EnterOuterAlt(_localctx, 1);
						{
							State = 268; block();
						}
						break;
					case SEMI:
						EnterOuterAlt(_localctx, 2);
						{
							State = 269; Match(SEMI);
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class TypeTypeOrVoidContext : ParserRuleContext
		{
			public TypeTypeContext typeType()
			{
				return GetRuleContext<TypeTypeContext>(0);
			}
			public ITerminalNode VOID() { return GetToken(TweedleParser.VOID, 0); }
			public TypeTypeOrVoidContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_typeTypeOrVoid; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterTypeTypeOrVoid(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitTypeTypeOrVoid(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitTypeTypeOrVoid(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public TypeTypeOrVoidContext typeTypeOrVoid()
		{
			TypeTypeOrVoidContext _localctx = new TypeTypeOrVoidContext(Context, State);
			EnterRule(_localctx, 36, RULE_typeTypeOrVoid);
			try
			{
				State = 274;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case BOOLEAN:
					case DECIMAL_NUMBER:
					case NUMBER:
					case STRING:
					case WHOLE_NUMBER:
					case IDENTIFIER:
						EnterOuterAlt(_localctx, 1);
						{
							State = 272; typeType();
						}
						break;
					case VOID:
						EnterOuterAlt(_localctx, 2);
						{
							State = 273; Match(VOID);
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class GenericMethodDeclarationContext : ParserRuleContext
		{
			public TypeParametersContext typeParameters()
			{
				return GetRuleContext<TypeParametersContext>(0);
			}
			public MethodDeclarationContext methodDeclaration()
			{
				return GetRuleContext<MethodDeclarationContext>(0);
			}
			public GenericMethodDeclarationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_genericMethodDeclaration; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterGenericMethodDeclaration(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitGenericMethodDeclaration(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitGenericMethodDeclaration(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public GenericMethodDeclarationContext genericMethodDeclaration()
		{
			GenericMethodDeclarationContext _localctx = new GenericMethodDeclarationContext(Context, State);
			EnterRule(_localctx, 38, RULE_genericMethodDeclaration);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 276; typeParameters();
					State = 277; methodDeclaration();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class GenericConstructorDeclarationContext : ParserRuleContext
		{
			public TypeParametersContext typeParameters()
			{
				return GetRuleContext<TypeParametersContext>(0);
			}
			public ConstructorDeclarationContext constructorDeclaration()
			{
				return GetRuleContext<ConstructorDeclarationContext>(0);
			}
			public GenericConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_genericConstructorDeclaration; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterGenericConstructorDeclaration(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitGenericConstructorDeclaration(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitGenericConstructorDeclaration(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public GenericConstructorDeclarationContext genericConstructorDeclaration()
		{
			GenericConstructorDeclarationContext _localctx = new GenericConstructorDeclarationContext(Context, State);
			EnterRule(_localctx, 40, RULE_genericConstructorDeclaration);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 279; typeParameters();
					State = 280; constructorDeclaration();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ConstructorDeclarationContext : ParserRuleContext
		{
			public BlockContext constructorBody;
			public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
			public FormalParametersContext formalParameters()
			{
				return GetRuleContext<FormalParametersContext>(0);
			}
			public BlockContext block()
			{
				return GetRuleContext<BlockContext>(0);
			}
			public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_constructorDeclaration; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ConstructorDeclarationContext constructorDeclaration()
		{
			ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
			EnterRule(_localctx, 42, RULE_constructorDeclaration);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 282; Match(IDENTIFIER);
					State = 283; formalParameters();
					State = 284; _localctx.constructorBody = block();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class FieldDeclarationContext : ParserRuleContext
		{
			public TypeTypeContext typeType()
			{
				return GetRuleContext<TypeTypeContext>(0);
			}
			public VariableDeclaratorsContext variableDeclarators()
			{
				return GetRuleContext<VariableDeclaratorsContext>(0);
			}
			public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_fieldDeclaration; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterFieldDeclaration(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitFieldDeclaration(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public FieldDeclarationContext fieldDeclaration()
		{
			FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
			EnterRule(_localctx, 44, RULE_fieldDeclaration);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 286; typeType();
					State = 287; variableDeclarators();
					State = 288; Match(SEMI);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class VariableDeclaratorsContext : ParserRuleContext
		{
			public VariableDeclaratorContext[] variableDeclarator()
			{
				return GetRuleContexts<VariableDeclaratorContext>();
			}
			public VariableDeclaratorContext variableDeclarator(int i)
			{
				return GetRuleContext<VariableDeclaratorContext>(i);
			}
			public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_variableDeclarators; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterVariableDeclarators(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitVariableDeclarators(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitVariableDeclarators(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public VariableDeclaratorsContext variableDeclarators()
		{
			VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(Context, State);
			EnterRule(_localctx, 46, RULE_variableDeclarators);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 290; variableDeclarator();
					State = 295;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == COMMA)
					{
						{
							{
								State = 291; Match(COMMA);
								State = 292; variableDeclarator();
							}
						}
						State = 297;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class VariableDeclaratorContext : ParserRuleContext
		{
			public VariableDeclaratorIdContext variableDeclaratorId()
			{
				return GetRuleContext<VariableDeclaratorIdContext>(0);
			}
			public ITerminalNode LARROW() { return GetToken(TweedleParser.LARROW, 0); }
			public VariableInitializerContext variableInitializer()
			{
				return GetRuleContext<VariableInitializerContext>(0);
			}
			public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_variableDeclarator; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterVariableDeclarator(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitVariableDeclarator(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public VariableDeclaratorContext variableDeclarator()
		{
			VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
			EnterRule(_localctx, 48, RULE_variableDeclarator);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 298; variableDeclaratorId();
					State = 301;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == LARROW)
					{
						{
							State = 299; Match(LARROW);
							State = 300; variableInitializer();
						}
					}

				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class VariableDeclaratorIdContext : ParserRuleContext
		{
			public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
			public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitVariableDeclaratorId(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public VariableDeclaratorIdContext variableDeclaratorId()
		{
			VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
			EnterRule(_localctx, 50, RULE_variableDeclaratorId);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 303; Match(IDENTIFIER);
					State = 308;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == LBRACK)
					{
						{
							{
								State = 304; Match(LBRACK);
								State = 305; Match(RBRACK);
							}
						}
						State = 310;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class VariableInitializerContext : ParserRuleContext
		{
			public ArrayInitializerContext arrayInitializer()
			{
				return GetRuleContext<ArrayInitializerContext>(0);
			}
			public ExpressionContext expression()
			{
				return GetRuleContext<ExpressionContext>(0);
			}
			public VariableInitializerContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_variableInitializer; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterVariableInitializer(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitVariableInitializer(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public VariableInitializerContext variableInitializer()
		{
			VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
			EnterRule(_localctx, 52, RULE_variableInitializer);
			try
			{
				State = 313;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case LBRACE:
						EnterOuterAlt(_localctx, 1);
						{
							State = 311; arrayInitializer();
						}
						break;
					case BOOLEAN:
					case DECIMAL_NUMBER:
					case NEW:
					case NUMBER:
					case STRING:
					case SUPER:
					case THIS:
					case VOID:
					case WHOLE_NUMBER:
					case DECIMAL_LITERAL:
					case FLOAT_LITERAL:
					case BOOL_LITERAL:
					case STRING_LITERAL:
					case NULL_LITERAL:
					case LPAREN:
					case LT:
					case BANG:
					case TILDE:
					case INC:
					case DEC:
					case ADD:
					case SUB:
					case IDENTIFIER:
						EnterOuterAlt(_localctx, 2);
						{
							State = 312; expression(0);
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ArrayInitializerContext : ParserRuleContext
		{
			public VariableInitializerContext[] variableInitializer()
			{
				return GetRuleContexts<VariableInitializerContext>();
			}
			public VariableInitializerContext variableInitializer(int i)
			{
				return GetRuleContext<VariableInitializerContext>(i);
			}
			public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_arrayInitializer; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterArrayInitializer(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitArrayInitializer(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ArrayInitializerContext arrayInitializer()
		{
			ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
			EnterRule(_localctx, 54, RULE_arrayInitializer);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 315; Match(LBRACE);
					State = 327;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << DECIMAL_NUMBER) | (1L << NEW) | (1L << NUMBER) | (1L << STRING) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << WHOLE_NUMBER) | (1L << DECIMAL_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << LBRACE) | (1L << LT) | (1L << BANG) | (1L << TILDE) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB))) != 0) || _la == IDENTIFIER)
					{
						{
							State = 316; variableInitializer();
							State = 321;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream, 26, Context);
							while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
							{
								if (_alt == 1)
								{
									{
										{
											State = 317; Match(COMMA);
											State = 318; variableInitializer();
										}
									}
								}
								State = 323;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream, 26, Context);
							}
							State = 325;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == COMMA)
							{
								{
									State = 324; Match(COMMA);
								}
							}

						}
					}

					State = 329; Match(RBRACE);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ClassOrInterfaceTypeContext : ParserRuleContext
		{
			public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
			public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceType(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ClassOrInterfaceTypeContext classOrInterfaceType()
		{
			ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(Context, State);
			EnterRule(_localctx, 56, RULE_classOrInterfaceType);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 331; Match(IDENTIFIER);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class TypeArgumentContext : ParserRuleContext
		{
			public TypeTypeContext typeType()
			{
				return GetRuleContext<TypeTypeContext>(0);
			}
			public ITerminalNode EXTENDS() { return GetToken(TweedleParser.EXTENDS, 0); }
			public ITerminalNode SUPER() { return GetToken(TweedleParser.SUPER, 0); }
			public TypeArgumentContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_typeArgument; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterTypeArgument(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitTypeArgument(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public TypeArgumentContext typeArgument()
		{
			TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
			EnterRule(_localctx, 58, RULE_typeArgument);
			int _la;
			try
			{
				State = 339;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case BOOLEAN:
					case DECIMAL_NUMBER:
					case NUMBER:
					case STRING:
					case WHOLE_NUMBER:
					case IDENTIFIER:
						EnterOuterAlt(_localctx, 1);
						{
							State = 333; typeType();
						}
						break;
					case QUESTION:
						EnterOuterAlt(_localctx, 2);
						{
							State = 334; Match(QUESTION);
							State = 337;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == EXTENDS || _la == SUPER)
							{
								{
									State = 335;
									_la = TokenStream.LA(1);
									if (!(_la == EXTENDS || _la == SUPER))
									{
										ErrorHandler.RecoverInline(this);
									}
									else
									{
										ErrorHandler.ReportMatch(this);
										Consume();
									}
									State = 336; typeType();
								}
							}

						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class FormalParametersContext : ParserRuleContext
		{
			public FormalParameterListContext formalParameterList()
			{
				return GetRuleContext<FormalParameterListContext>(0);
			}
			public FormalParametersContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_formalParameters; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterFormalParameters(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitFormalParameters(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public FormalParametersContext formalParameters()
		{
			FormalParametersContext _localctx = new FormalParametersContext(Context, State);
			EnterRule(_localctx, 60, RULE_formalParameters);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 341; Match(LPAREN);
					State = 343;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CONSTANT) | (1L << DECIMAL_NUMBER) | (1L << NUMBER) | (1L << STRING) | (1L << WHOLE_NUMBER))) != 0) || _la == IDENTIFIER)
					{
						{
							State = 342; formalParameterList();
						}
					}

					State = 345; Match(RPAREN);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class FormalParameterListContext : ParserRuleContext
		{
			public RequiredParameterContext[] requiredParameter()
			{
				return GetRuleContexts<RequiredParameterContext>();
			}
			public RequiredParameterContext requiredParameter(int i)
			{
				return GetRuleContext<RequiredParameterContext>(i);
			}
			public OptionalParameterContext[] optionalParameter()
			{
				return GetRuleContexts<OptionalParameterContext>();
			}
			public OptionalParameterContext optionalParameter(int i)
			{
				return GetRuleContext<OptionalParameterContext>(i);
			}
			public LastFormalParameterContext lastFormalParameter()
			{
				return GetRuleContext<LastFormalParameterContext>(0);
			}
			public FormalParameterListContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_formalParameterList; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterFormalParameterList(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitFormalParameterList(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public FormalParameterListContext formalParameterList()
		{
			FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
			EnterRule(_localctx, 62, RULE_formalParameterList);
			int _la;
			try
			{
				int _alt;
				State = 379;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 37, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 347; requiredParameter();
							State = 352;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream, 32, Context);
							while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
							{
								if (_alt == 1)
								{
									{
										{
											State = 348; Match(COMMA);
											State = 349; requiredParameter();
										}
									}
								}
								State = 354;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream, 32, Context);
							}
							State = 359;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream, 33, Context);
							while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
							{
								if (_alt == 1)
								{
									{
										{
											State = 355; Match(COMMA);
											State = 356; optionalParameter();
										}
									}
								}
								State = 361;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream, 33, Context);
							}
							State = 364;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == COMMA)
							{
								{
									State = 362; Match(COMMA);
									State = 363; lastFormalParameter();
								}
							}

						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 366; optionalParameter();
							State = 371;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream, 35, Context);
							while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
							{
								if (_alt == 1)
								{
									{
										{
											State = 367; Match(COMMA);
											State = 368; optionalParameter();
										}
									}
								}
								State = 373;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream, 35, Context);
							}
							State = 376;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == COMMA)
							{
								{
									State = 374; Match(COMMA);
									State = 375; lastFormalParameter();
								}
							}

						}
						break;
					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							State = 378; lastFormalParameter();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class RequiredParameterContext : ParserRuleContext
		{
			public TypeTypeContext typeType()
			{
				return GetRuleContext<TypeTypeContext>(0);
			}
			public VariableDeclaratorIdContext variableDeclaratorId()
			{
				return GetRuleContext<VariableDeclaratorIdContext>(0);
			}
			public VariableModifierContext[] variableModifier()
			{
				return GetRuleContexts<VariableModifierContext>();
			}
			public VariableModifierContext variableModifier(int i)
			{
				return GetRuleContext<VariableModifierContext>(i);
			}
			public RequiredParameterContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_requiredParameter; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterRequiredParameter(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitRequiredParameter(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitRequiredParameter(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public RequiredParameterContext requiredParameter()
		{
			RequiredParameterContext _localctx = new RequiredParameterContext(Context, State);
			EnterRule(_localctx, 64, RULE_requiredParameter);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 384;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == CONSTANT)
					{
						{
							{
								State = 381; variableModifier();
							}
						}
						State = 386;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 387; typeType();
					State = 388; variableDeclaratorId();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class OptionalParameterContext : ParserRuleContext
		{
			public TypeTypeContext typeType()
			{
				return GetRuleContext<TypeTypeContext>(0);
			}
			public VariableDeclaratorIdContext variableDeclaratorId()
			{
				return GetRuleContext<VariableDeclaratorIdContext>(0);
			}
			public ITerminalNode LARROW() { return GetToken(TweedleParser.LARROW, 0); }
			public ExpressionContext expression()
			{
				return GetRuleContext<ExpressionContext>(0);
			}
			public VariableModifierContext[] variableModifier()
			{
				return GetRuleContexts<VariableModifierContext>();
			}
			public VariableModifierContext variableModifier(int i)
			{
				return GetRuleContext<VariableModifierContext>(i);
			}
			public OptionalParameterContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_optionalParameter; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterOptionalParameter(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitOptionalParameter(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitOptionalParameter(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public OptionalParameterContext optionalParameter()
		{
			OptionalParameterContext _localctx = new OptionalParameterContext(Context, State);
			EnterRule(_localctx, 66, RULE_optionalParameter);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 393;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == CONSTANT)
					{
						{
							{
								State = 390; variableModifier();
							}
						}
						State = 395;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 396; typeType();
					State = 397; variableDeclaratorId();
					State = 398; Match(LARROW);
					State = 399; expression(0);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class LastFormalParameterContext : ParserRuleContext
		{
			public TypeTypeContext typeType()
			{
				return GetRuleContext<TypeTypeContext>(0);
			}
			public VariableDeclaratorIdContext variableDeclaratorId()
			{
				return GetRuleContext<VariableDeclaratorIdContext>(0);
			}
			public VariableModifierContext[] variableModifier()
			{
				return GetRuleContexts<VariableModifierContext>();
			}
			public VariableModifierContext variableModifier(int i)
			{
				return GetRuleContext<VariableModifierContext>(i);
			}
			public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_lastFormalParameter; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterLastFormalParameter(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitLastFormalParameter(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitLastFormalParameter(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public LastFormalParameterContext lastFormalParameter()
		{
			LastFormalParameterContext _localctx = new LastFormalParameterContext(Context, State);
			EnterRule(_localctx, 68, RULE_lastFormalParameter);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 404;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == CONSTANT)
					{
						{
							{
								State = 401; variableModifier();
							}
						}
						State = 406;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 407; typeType();
					State = 408; Match(ELLIPSIS);
					State = 409; variableDeclaratorId();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class LiteralContext : ParserRuleContext
		{
			public ITerminalNode DECIMAL_LITERAL() { return GetToken(TweedleParser.DECIMAL_LITERAL, 0); }
			public ITerminalNode FLOAT_LITERAL() { return GetToken(TweedleParser.FLOAT_LITERAL, 0); }
			public ITerminalNode STRING_LITERAL() { return GetToken(TweedleParser.STRING_LITERAL, 0); }
			public ITerminalNode BOOL_LITERAL() { return GetToken(TweedleParser.BOOL_LITERAL, 0); }
			public ITerminalNode NULL_LITERAL() { return GetToken(TweedleParser.NULL_LITERAL, 0); }
			public LiteralContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_literal; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterLiteral(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitLiteral(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public LiteralContext literal()
		{
			LiteralContext _localctx = new LiteralContext(Context, State);
			EnterRule(_localctx, 70, RULE_literal);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 411;
					_la = TokenStream.LA(1);
					if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DECIMAL_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL))) != 0)))
					{
						ErrorHandler.RecoverInline(this);
					}
					else
					{
						ErrorHandler.ReportMatch(this);
						Consume();
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class BlockContext : ParserRuleContext
		{
			public BlockStatementContext[] blockStatement()
			{
				return GetRuleContexts<BlockStatementContext>();
			}
			public BlockStatementContext blockStatement(int i)
			{
				return GetRuleContext<BlockStatementContext>(i);
			}
			public BlockContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_block; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterBlock(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitBlock(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitBlock(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public BlockContext block()
		{
			BlockContext _localctx = new BlockContext(Context, State);
			EnterRule(_localctx, 72, RULE_block);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 413; Match(LBRACE);
					State = 417;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << COUNT_UP_TO) | (1L << CONSTANT) | (1L << DECIMAL_NUMBER) | (1L << DO_IN_ORDER) | (1L << DO_TOGETHER) | (1L << FOR_EACH) | (1L << EACH_TOGETHER) | (1L << IF) | (1L << NEW) | (1L << NUMBER) | (1L << RETURN) | (1L << STRING) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << WHILE) | (1L << WHOLE_NUMBER) | (1L << DECIMAL_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << LBRACE) | (1L << LT) | (1L << BANG) | (1L << TILDE) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB))) != 0) || _la == NODE_COMMENT || _la == IDENTIFIER)
					{
						{
							{
								State = 414; blockStatement();
							}
						}
						State = 419;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 420; Match(RBRACE);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class BlockStatementContext : ParserRuleContext
		{
			public LocalVariableDeclarationContext localVariableDeclaration()
			{
				return GetRuleContext<LocalVariableDeclarationContext>(0);
			}
			public StatementContext statement()
			{
				return GetRuleContext<StatementContext>(0);
			}
			public BlockStatementContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_blockStatement; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterBlockStatement(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitBlockStatement(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public BlockStatementContext blockStatement()
		{
			BlockStatementContext _localctx = new BlockStatementContext(Context, State);
			EnterRule(_localctx, 74, RULE_blockStatement);
			try
			{
				State = 426;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 42, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 422; localVariableDeclaration();
							State = 423; Match(SEMI);
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 425; statement();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class LocalVariableDeclarationContext : ParserRuleContext
		{
			public TypeTypeContext typeType()
			{
				return GetRuleContext<TypeTypeContext>(0);
			}
			public VariableDeclaratorsContext variableDeclarators()
			{
				return GetRuleContext<VariableDeclaratorsContext>(0);
			}
			public ITerminalNode NODE_COMMENT() { return GetToken(TweedleParser.NODE_COMMENT, 0); }
			public VariableModifierContext[] variableModifier()
			{
				return GetRuleContexts<VariableModifierContext>();
			}
			public VariableModifierContext variableModifier(int i)
			{
				return GetRuleContext<VariableModifierContext>(i);
			}
			public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public LocalVariableDeclarationContext localVariableDeclaration()
		{
			LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
			EnterRule(_localctx, 76, RULE_localVariableDeclaration);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 429;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == NODE_COMMENT)
					{
						{
							State = 428; Match(NODE_COMMENT);
						}
					}

					State = 434;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == CONSTANT)
					{
						{
							{
								State = 431; variableModifier();
							}
						}
						State = 436;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 437; typeType();
					State = 438; variableDeclarators();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class StatementContext : ParserRuleContext
		{
			public BlockContext blockLabel;
			public ExpressionContext statementExpression;
			public IToken identifierLabel;
			public BlockContext block()
			{
				return GetRuleContext<BlockContext>(0);
			}
			public ITerminalNode COUNT_UP_TO() { return GetToken(TweedleParser.COUNT_UP_TO, 0); }
			public StatementContext[] statement()
			{
				return GetRuleContexts<StatementContext>();
			}
			public StatementContext statement(int i)
			{
				return GetRuleContext<StatementContext>(i);
			}
			public ExpressionContext expression()
			{
				return GetRuleContext<ExpressionContext>(0);
			}
			public ITerminalNode IF() { return GetToken(TweedleParser.IF, 0); }
			public ParExpressionContext parExpression()
			{
				return GetRuleContext<ParExpressionContext>(0);
			}
			public ITerminalNode ELSE() { return GetToken(TweedleParser.ELSE, 0); }
			public ITerminalNode FOR_EACH() { return GetToken(TweedleParser.FOR_EACH, 0); }
			public ForControlContext forControl()
			{
				return GetRuleContext<ForControlContext>(0);
			}
			public ITerminalNode EACH_TOGETHER() { return GetToken(TweedleParser.EACH_TOGETHER, 0); }
			public ITerminalNode WHILE() { return GetToken(TweedleParser.WHILE, 0); }
			public ITerminalNode DO_IN_ORDER() { return GetToken(TweedleParser.DO_IN_ORDER, 0); }
			public ITerminalNode DO_TOGETHER() { return GetToken(TweedleParser.DO_TOGETHER, 0); }
			public ITerminalNode RETURN() { return GetToken(TweedleParser.RETURN, 0); }
			public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
			public ITerminalNode NODE_COMMENT() { return GetToken(TweedleParser.NODE_COMMENT, 0); }
			public StatementContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_statement; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterStatement(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitStatement(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitStatement(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public StatementContext statement()
		{
			StatementContext _localctx = new StatementContext(Context, State);
			EnterRule(_localctx, 78, RULE_statement);
			int _la;
			try
			{
				State = 485;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 47, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 440; _localctx.blockLabel = block();
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 441; Match(COUNT_UP_TO);
							{
								State = 442; expression(0);
							}
							State = 443; statement();
						}
						break;
					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							State = 445; Match(IF);
							State = 446; parExpression();
							State = 447; statement();
							State = 450;
							ErrorHandler.Sync(this);
							switch (Interpreter.AdaptivePredict(TokenStream, 45, Context))
							{
								case 1:
									{
										State = 448; Match(ELSE);
										State = 449; statement();
									}
									break;
							}
						}
						break;
					case 4:
						EnterOuterAlt(_localctx, 4);
						{
							State = 452; Match(FOR_EACH);
							State = 453; Match(LPAREN);
							State = 454; forControl();
							State = 455; Match(RPAREN);
							State = 456; statement();
						}
						break;
					case 5:
						EnterOuterAlt(_localctx, 5);
						{
							State = 458; Match(EACH_TOGETHER);
							State = 459; Match(LPAREN);
							State = 460; forControl();
							State = 461; Match(RPAREN);
							State = 462; statement();
						}
						break;
					case 6:
						EnterOuterAlt(_localctx, 6);
						{
							State = 464; Match(WHILE);
							State = 465; parExpression();
							State = 466; statement();
						}
						break;
					case 7:
						EnterOuterAlt(_localctx, 7);
						{
							State = 468; Match(DO_IN_ORDER);
							State = 469; block();
						}
						break;
					case 8:
						EnterOuterAlt(_localctx, 8);
						{
							State = 470; Match(DO_TOGETHER);
							State = 471; block();
						}
						break;
					case 9:
						EnterOuterAlt(_localctx, 9);
						{
							State = 472; Match(RETURN);
							State = 474;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << DECIMAL_NUMBER) | (1L << NEW) | (1L << NUMBER) | (1L << STRING) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << WHOLE_NUMBER) | (1L << DECIMAL_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << LT) | (1L << BANG) | (1L << TILDE) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB))) != 0) || _la == IDENTIFIER)
							{
								{
									State = 473; expression(0);
								}
							}

							State = 476; Match(SEMI);
						}
						break;
					case 10:
						EnterOuterAlt(_localctx, 10);
						{
							State = 477; _localctx.statementExpression = expression(0);
							State = 478; Match(SEMI);
						}
						break;
					case 11:
						EnterOuterAlt(_localctx, 11);
						{
							State = 480; _localctx.identifierLabel = Match(IDENTIFIER);
							State = 481; Match(COLON);
							State = 482; statement();
						}
						break;
					case 12:
						EnterOuterAlt(_localctx, 12);
						{
							State = 483; Match(NODE_COMMENT);
							State = 484; statement();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ForControlContext : ParserRuleContext
		{
			public TypeTypeContext typeType()
			{
				return GetRuleContext<TypeTypeContext>(0);
			}
			public VariableDeclaratorIdContext variableDeclaratorId()
			{
				return GetRuleContext<VariableDeclaratorIdContext>(0);
			}
			public ITerminalNode IN() { return GetToken(TweedleParser.IN, 0); }
			public ExpressionContext expression()
			{
				return GetRuleContext<ExpressionContext>(0);
			}
			public ForControlContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_forControl; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterForControl(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitForControl(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitForControl(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ForControlContext forControl()
		{
			ForControlContext _localctx = new ForControlContext(Context, State);
			EnterRule(_localctx, 80, RULE_forControl);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 487; typeType();
					State = 488; variableDeclaratorId();
					State = 489; Match(IN);
					State = 490; expression(0);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ParExpressionContext : ParserRuleContext
		{
			public ExpressionContext expression()
			{
				return GetRuleContext<ExpressionContext>(0);
			}
			public ParExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_parExpression; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterParExpression(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitParExpression(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitParExpression(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ParExpressionContext parExpression()
		{
			ParExpressionContext _localctx = new ParExpressionContext(Context, State);
			EnterRule(_localctx, 82, RULE_parExpression);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 492; Match(LPAREN);
					State = 493; expression(0);
					State = 494; Match(RPAREN);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class LabeledExpressionListContext : ParserRuleContext
		{
			public LabeledExpressionContext[] labeledExpression()
			{
				return GetRuleContexts<LabeledExpressionContext>();
			}
			public LabeledExpressionContext labeledExpression(int i)
			{
				return GetRuleContext<LabeledExpressionContext>(i);
			}
			public LabeledExpressionListContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_labeledExpressionList; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterLabeledExpressionList(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitLabeledExpressionList(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitLabeledExpressionList(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public LabeledExpressionListContext labeledExpressionList()
		{
			LabeledExpressionListContext _localctx = new LabeledExpressionListContext(Context, State);
			EnterRule(_localctx, 84, RULE_labeledExpressionList);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 496; labeledExpression();
					State = 501;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == COMMA)
					{
						{
							{
								State = 497; Match(COMMA);
								State = 498; labeledExpression();
							}
						}
						State = 503;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class LabeledExpressionContext : ParserRuleContext
		{
			public IToken expressionLabel;
			public ExpressionContext expression()
			{
				return GetRuleContext<ExpressionContext>(0);
			}
			public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
			public LabeledExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_labeledExpression; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterLabeledExpression(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitLabeledExpression(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitLabeledExpression(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public LabeledExpressionContext labeledExpression()
		{
			LabeledExpressionContext _localctx = new LabeledExpressionContext(Context, State);
			EnterRule(_localctx, 86, RULE_labeledExpression);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 504; _localctx.expressionLabel = Match(IDENTIFIER);
					State = 505; Match(COLON);
					State = 506; expression(0);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ExpressionListContext : ParserRuleContext
		{
			public ExpressionContext[] expression()
			{
				return GetRuleContexts<ExpressionContext>();
			}
			public ExpressionContext expression(int i)
			{
				return GetRuleContext<ExpressionContext>(i);
			}
			public ExpressionListContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_expressionList; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterExpressionList(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitExpressionList(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ExpressionListContext expressionList()
		{
			ExpressionListContext _localctx = new ExpressionListContext(Context, State);
			EnterRule(_localctx, 88, RULE_expressionList);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 508; expression(0);
					State = 513;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == COMMA)
					{
						{
							{
								State = 509; Match(COMMA);
								State = 510; expression(0);
							}
						}
						State = 515;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class MethodCallContext : ParserRuleContext
		{
			public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
			public LabeledExpressionListContext labeledExpressionList()
			{
				return GetRuleContext<LabeledExpressionListContext>(0);
			}
			public MethodCallContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_methodCall; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterMethodCall(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitMethodCall(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public MethodCallContext methodCall()
		{
			MethodCallContext _localctx = new MethodCallContext(Context, State);
			EnterRule(_localctx, 90, RULE_methodCall);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 516; Match(IDENTIFIER);
					State = 517; Match(LPAREN);
					State = 519;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == IDENTIFIER)
					{
						{
							State = 518; labeledExpressionList();
						}
					}

					State = 521; Match(RPAREN);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ExpressionContext : ParserRuleContext
		{
			public IToken prefix;
			public IToken bop;
			public IToken postfix;
			public PrimaryContext primary()
			{
				return GetRuleContext<PrimaryContext>(0);
			}
			public MethodCallContext methodCall()
			{
				return GetRuleContext<MethodCallContext>(0);
			}
			public ITerminalNode NEW() { return GetToken(TweedleParser.NEW, 0); }
			public CreatorContext creator()
			{
				return GetRuleContext<CreatorContext>(0);
			}
			public TypeTypeContext typeType()
			{
				return GetRuleContext<TypeTypeContext>(0);
			}
			public ExpressionContext[] expression()
			{
				return GetRuleContexts<ExpressionContext>();
			}
			public ExpressionContext expression(int i)
			{
				return GetRuleContext<ExpressionContext>(i);
			}
			public LambdaExpressionContext lambdaExpression()
			{
				return GetRuleContext<LambdaExpressionContext>(0);
			}
			public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
			public TypeArgumentsContext typeArguments()
			{
				return GetRuleContext<TypeArgumentsContext>(0);
			}
			public ClassTypeContext classType()
			{
				return GetRuleContext<ClassTypeContext>(0);
			}
			public ITerminalNode LARROW() { return GetToken(TweedleParser.LARROW, 0); }
			public ITerminalNode THIS() { return GetToken(TweedleParser.THIS, 0); }
			public InnerCreatorContext innerCreator()
			{
				return GetRuleContext<InnerCreatorContext>(0);
			}
			public ITerminalNode SUPER() { return GetToken(TweedleParser.SUPER, 0); }
			public SuperSuffixContext superSuffix()
			{
				return GetRuleContext<SuperSuffixContext>(0);
			}
			public ExplicitGenericInvocationContext explicitGenericInvocation()
			{
				return GetRuleContext<ExplicitGenericInvocationContext>(0);
			}
			public NonWildcardTypeArgumentsContext nonWildcardTypeArguments()
			{
				return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
			}
			public ExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_expression; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterExpression(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitExpression(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitExpression(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ExpressionContext expression()
		{
			return expression(0);
		}

		private ExpressionContext expression(int _p)
		{
			ParserRuleContext _parentctx = Context;
			int _parentState = State;
			ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
			ExpressionContext _prevctx = _localctx;
			int _startState = 92;
			EnterRecursionRule(_localctx, 92, RULE_expression, _p);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 554;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 54, Context))
					{
						case 1:
							{
								State = 524; primary();
							}
							break;
						case 2:
							{
								State = 525; methodCall();
							}
							break;
						case 3:
							{
								State = 526; Match(NEW);
								State = 527; creator();
							}
							break;
						case 4:
							{
								State = 528; Match(LPAREN);
								State = 529; typeType();
								State = 530; Match(RPAREN);
								State = 531; expression(20);
							}
							break;
						case 5:
							{
								State = 533;
								_localctx.prefix = TokenStream.LT(1);
								_la = TokenStream.LA(1);
								if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB))) != 0)))
								{
									_localctx.prefix = ErrorHandler.RecoverInline(this);
								}
								else
								{
									ErrorHandler.ReportMatch(this);
									Consume();
								}
								State = 534; expression(18);
							}
							break;
						case 6:
							{
								State = 535;
								_localctx.prefix = TokenStream.LT(1);
								_la = TokenStream.LA(1);
								if (!(_la == BANG || _la == TILDE))
								{
									_localctx.prefix = ErrorHandler.RecoverInline(this);
								}
								else
								{
									ErrorHandler.ReportMatch(this);
									Consume();
								}
								State = 536; expression(17);
							}
							break;
						case 7:
							{
								State = 537; lambdaExpression();
							}
							break;
						case 8:
							{
								State = 538; typeType();
								State = 539; Match(COLONCOLON);
								State = 545;
								ErrorHandler.Sync(this);
								switch (TokenStream.LA(1))
								{
									case LT:
									case IDENTIFIER:
										{
											State = 541;
											ErrorHandler.Sync(this);
											_la = TokenStream.LA(1);
											if (_la == LT)
											{
												{
													State = 540; typeArguments();
												}
											}

											State = 543; Match(IDENTIFIER);
										}
										break;
									case NEW:
										{
											State = 544; Match(NEW);
										}
										break;
									default:
										throw new NoViableAltException(this);
								}
							}
							break;
						case 9:
							{
								State = 547; classType();
								State = 548; Match(COLONCOLON);
								State = 550;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la == LT)
								{
									{
										State = 549; typeArguments();
									}
								}

								State = 552; Match(NEW);
							}
							break;
					}
					Context.Stop = TokenStream.LT(-1);
					State = 633;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream, 60, Context);
					while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
					{
						if (_alt == 1)
						{
							if (ParseListeners != null)
								TriggerExitRuleEvent();
							_prevctx = _localctx;
							{
								State = 631;
								ErrorHandler.Sync(this);
								switch (Interpreter.AdaptivePredict(TokenStream, 59, Context))
								{
									case 1:
										{
											_localctx = new ExpressionContext(_parentctx, _parentState);
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 556;
											if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
											State = 557;
											_localctx.bop = TokenStream.LT(1);
											_la = TokenStream.LA(1);
											if (!(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (MUL - 62)) | (1L << (DIV - 62)) | (1L << (MOD - 62)))) != 0)))
											{
												_localctx.bop = ErrorHandler.RecoverInline(this);
											}
											else
											{
												ErrorHandler.ReportMatch(this);
												Consume();
											}
											State = 558; expression(17);
										}
										break;
									case 2:
										{
											_localctx = new ExpressionContext(_parentctx, _parentState);
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 559;
											if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
											State = 560;
											_localctx.bop = TokenStream.LT(1);
											_la = TokenStream.LA(1);
											if (!(_la == ADD || _la == SUB))
											{
												_localctx.bop = ErrorHandler.RecoverInline(this);
											}
											else
											{
												ErrorHandler.ReportMatch(this);
												Consume();
											}
											State = 561; expression(16);
										}
										break;
									case 3:
										{
											_localctx = new ExpressionContext(_parentctx, _parentState);
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 562;
											if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
											State = 570;
											ErrorHandler.Sync(this);
											switch (Interpreter.AdaptivePredict(TokenStream, 55, Context))
											{
												case 1:
													{
														State = 563; Match(LT);
														State = 564; Match(LT);
													}
													break;
												case 2:
													{
														State = 565; Match(GT);
														State = 566; Match(GT);
														State = 567; Match(GT);
													}
													break;
												case 3:
													{
														State = 568; Match(GT);
														State = 569; Match(GT);
													}
													break;
											}
											State = 572; expression(15);
										}
										break;
									case 4:
										{
											_localctx = new ExpressionContext(_parentctx, _parentState);
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 573;
											if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
											State = 574;
											_localctx.bop = TokenStream.LT(1);
											_la = TokenStream.LA(1);
											if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << LE) | (1L << GE))) != 0)))
											{
												_localctx.bop = ErrorHandler.RecoverInline(this);
											}
											else
											{
												ErrorHandler.ReportMatch(this);
												Consume();
											}
											State = 575; expression(14);
										}
										break;
									case 5:
										{
											_localctx = new ExpressionContext(_parentctx, _parentState);
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 576;
											if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
											State = 577;
											_localctx.bop = TokenStream.LT(1);
											_la = TokenStream.LA(1);
											if (!(_la == EQUAL || _la == NOTEQUAL))
											{
												_localctx.bop = ErrorHandler.RecoverInline(this);
											}
											else
											{
												ErrorHandler.ReportMatch(this);
												Consume();
											}
											State = 578; expression(13);
										}
										break;
									case 6:
										{
											_localctx = new ExpressionContext(_parentctx, _parentState);
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 579;
											if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
											State = 580; _localctx.bop = Match(BITAND);
											State = 581; expression(12);
										}
										break;
									case 7:
										{
											_localctx = new ExpressionContext(_parentctx, _parentState);
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 582;
											if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
											State = 583; _localctx.bop = Match(CARET);
											State = 584; expression(11);
										}
										break;
									case 8:
										{
											_localctx = new ExpressionContext(_parentctx, _parentState);
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 585;
											if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
											State = 586; _localctx.bop = Match(BITOR);
											State = 587; expression(10);
										}
										break;
									case 9:
										{
											_localctx = new ExpressionContext(_parentctx, _parentState);
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 588;
											if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
											State = 589; _localctx.bop = Match(AND);
											State = 590; expression(9);
										}
										break;
									case 10:
										{
											_localctx = new ExpressionContext(_parentctx, _parentState);
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 591;
											if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
											State = 592; _localctx.bop = Match(OR);
											State = 593; expression(8);
										}
										break;
									case 11:
										{
											_localctx = new ExpressionContext(_parentctx, _parentState);
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 594;
											if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
											State = 595; _localctx.bop = Match(QUESTION);
											State = 596; expression(0);
											State = 597; Match(COLON);
											State = 598; expression(7);
										}
										break;
									case 12:
										{
											_localctx = new ExpressionContext(_parentctx, _parentState);
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 600;
											if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
											State = 601; Match(LARROW);
											State = 602; expression(5);
										}
										break;
									case 13:
										{
											_localctx = new ExpressionContext(_parentctx, _parentState);
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 603;
											if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
											State = 604; _localctx.bop = Match(DOT);
											State = 616;
											ErrorHandler.Sync(this);
											switch (Interpreter.AdaptivePredict(TokenStream, 57, Context))
											{
												case 1:
													{
														State = 605; Match(IDENTIFIER);
													}
													break;
												case 2:
													{
														State = 606; methodCall();
													}
													break;
												case 3:
													{
														State = 607; Match(THIS);
													}
													break;
												case 4:
													{
														State = 608; Match(NEW);
														State = 610;
														ErrorHandler.Sync(this);
														_la = TokenStream.LA(1);
														if (_la == LT)
														{
															{
																State = 609; nonWildcardTypeArguments();
															}
														}

														State = 612; innerCreator();
													}
													break;
												case 5:
													{
														State = 613; Match(SUPER);
														State = 614; superSuffix();
													}
													break;
												case 6:
													{
														State = 615; explicitGenericInvocation();
													}
													break;
											}
										}
										break;
									case 14:
										{
											_localctx = new ExpressionContext(_parentctx, _parentState);
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 618;
											if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
											State = 619; Match(LBRACK);
											State = 620; expression(0);
											State = 621; Match(RBRACK);
										}
										break;
									case 15:
										{
											_localctx = new ExpressionContext(_parentctx, _parentState);
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 623;
											if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
											State = 624;
											_localctx.postfix = TokenStream.LT(1);
											_la = TokenStream.LA(1);
											if (!(_la == INC || _la == DEC))
											{
												_localctx.postfix = ErrorHandler.RecoverInline(this);
											}
											else
											{
												ErrorHandler.ReportMatch(this);
												Consume();
											}
										}
										break;
									case 16:
										{
											_localctx = new ExpressionContext(_parentctx, _parentState);
											PushNewRecursionContext(_localctx, _startState, RULE_expression);
											State = 625;
											if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
											State = 626; Match(COLONCOLON);
											State = 628;
											ErrorHandler.Sync(this);
											_la = TokenStream.LA(1);
											if (_la == LT)
											{
												{
													State = 627; typeArguments();
												}
											}

											State = 630; Match(IDENTIFIER);
										}
										break;
								}
							}
						}
						State = 635;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream, 60, Context);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				UnrollRecursionContexts(_parentctx);
			}
			return _localctx;
		}

		public partial class LambdaExpressionContext : ParserRuleContext
		{
			public LambdaParametersContext lambdaParameters()
			{
				return GetRuleContext<LambdaParametersContext>(0);
			}
			public LambdaBodyContext lambdaBody()
			{
				return GetRuleContext<LambdaBodyContext>(0);
			}
			public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_lambdaExpression; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterLambdaExpression(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitLambdaExpression(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public LambdaExpressionContext lambdaExpression()
		{
			LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
			EnterRule(_localctx, 94, RULE_lambdaExpression);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 636; lambdaParameters();
					State = 637; Match(ARROW);
					State = 638; lambdaBody();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class LambdaParametersContext : ParserRuleContext
		{
			public ITerminalNode[] IDENTIFIER() { return GetTokens(TweedleParser.IDENTIFIER); }
			public ITerminalNode IDENTIFIER(int i)
			{
				return GetToken(TweedleParser.IDENTIFIER, i);
			}
			public FormalParameterListContext formalParameterList()
			{
				return GetRuleContext<FormalParameterListContext>(0);
			}
			public LambdaParametersContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_lambdaParameters; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterLambdaParameters(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitLambdaParameters(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitLambdaParameters(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public LambdaParametersContext lambdaParameters()
		{
			LambdaParametersContext _localctx = new LambdaParametersContext(Context, State);
			EnterRule(_localctx, 96, RULE_lambdaParameters);
			int _la;
			try
			{
				State = 656;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 63, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 640; Match(IDENTIFIER);
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 641; Match(LPAREN);
							State = 643;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CONSTANT) | (1L << DECIMAL_NUMBER) | (1L << NUMBER) | (1L << STRING) | (1L << WHOLE_NUMBER))) != 0) || _la == IDENTIFIER)
							{
								{
									State = 642; formalParameterList();
								}
							}

							State = 645; Match(RPAREN);
						}
						break;
					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							State = 646; Match(LPAREN);
							State = 647; Match(IDENTIFIER);
							State = 652;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la == COMMA)
							{
								{
									{
										State = 648; Match(COMMA);
										State = 649; Match(IDENTIFIER);
									}
								}
								State = 654;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 655; Match(RPAREN);
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class LambdaBodyContext : ParserRuleContext
		{
			public ExpressionContext expression()
			{
				return GetRuleContext<ExpressionContext>(0);
			}
			public BlockContext block()
			{
				return GetRuleContext<BlockContext>(0);
			}
			public LambdaBodyContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_lambdaBody; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterLambdaBody(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitLambdaBody(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitLambdaBody(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public LambdaBodyContext lambdaBody()
		{
			LambdaBodyContext _localctx = new LambdaBodyContext(Context, State);
			EnterRule(_localctx, 98, RULE_lambdaBody);
			try
			{
				State = 660;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case BOOLEAN:
					case DECIMAL_NUMBER:
					case NEW:
					case NUMBER:
					case STRING:
					case SUPER:
					case THIS:
					case VOID:
					case WHOLE_NUMBER:
					case DECIMAL_LITERAL:
					case FLOAT_LITERAL:
					case BOOL_LITERAL:
					case STRING_LITERAL:
					case NULL_LITERAL:
					case LPAREN:
					case LT:
					case BANG:
					case TILDE:
					case INC:
					case DEC:
					case ADD:
					case SUB:
					case IDENTIFIER:
						EnterOuterAlt(_localctx, 1);
						{
							State = 658; expression(0);
						}
						break;
					case LBRACE:
						EnterOuterAlt(_localctx, 2);
						{
							State = 659; block();
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class PrimaryContext : ParserRuleContext
		{
			public ExpressionContext expression()
			{
				return GetRuleContext<ExpressionContext>(0);
			}
			public ITerminalNode THIS() { return GetToken(TweedleParser.THIS, 0); }
			public ITerminalNode SUPER() { return GetToken(TweedleParser.SUPER, 0); }
			public LiteralContext literal()
			{
				return GetRuleContext<LiteralContext>(0);
			}
			public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
			public TypeTypeOrVoidContext typeTypeOrVoid()
			{
				return GetRuleContext<TypeTypeOrVoidContext>(0);
			}
			public ITerminalNode CLASS() { return GetToken(TweedleParser.CLASS, 0); }
			public NonWildcardTypeArgumentsContext nonWildcardTypeArguments()
			{
				return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
			}
			public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix()
			{
				return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
			}
			public ArgumentsContext arguments()
			{
				return GetRuleContext<ArgumentsContext>(0);
			}
			public PrimaryContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_primary; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterPrimary(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitPrimary(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public PrimaryContext primary()
		{
			PrimaryContext _localctx = new PrimaryContext(Context, State);
			EnterRule(_localctx, 100, RULE_primary);
			try
			{
				State = 680;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 66, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 662; Match(LPAREN);
							State = 663; expression(0);
							State = 664; Match(RPAREN);
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 666; Match(THIS);
						}
						break;
					case 3:
						EnterOuterAlt(_localctx, 3);
						{
							State = 667; Match(SUPER);
						}
						break;
					case 4:
						EnterOuterAlt(_localctx, 4);
						{
							State = 668; literal();
						}
						break;
					case 5:
						EnterOuterAlt(_localctx, 5);
						{
							State = 669; Match(IDENTIFIER);
						}
						break;
					case 6:
						EnterOuterAlt(_localctx, 6);
						{
							State = 670; typeTypeOrVoid();
							State = 671; Match(DOT);
							State = 672; Match(CLASS);
						}
						break;
					case 7:
						EnterOuterAlt(_localctx, 7);
						{
							State = 674; nonWildcardTypeArguments();
							State = 678;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1))
							{
								case SUPER:
								case IDENTIFIER:
									{
										State = 675; explicitGenericInvocationSuffix();
									}
									break;
								case THIS:
									{
										State = 676; Match(THIS);
										State = 677; arguments();
									}
									break;
								default:
									throw new NoViableAltException(this);
							}
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ClassTypeContext : ParserRuleContext
		{
			public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
			public ClassOrInterfaceTypeContext classOrInterfaceType()
			{
				return GetRuleContext<ClassOrInterfaceTypeContext>(0);
			}
			public TypeArgumentsContext typeArguments()
			{
				return GetRuleContext<TypeArgumentsContext>(0);
			}
			public ClassTypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_classType; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterClassType(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitClassType(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitClassType(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ClassTypeContext classType()
		{
			ClassTypeContext _localctx = new ClassTypeContext(Context, State);
			EnterRule(_localctx, 102, RULE_classType);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 685;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 67, Context))
					{
						case 1:
							{
								State = 682; classOrInterfaceType();
								State = 683; Match(DOT);
							}
							break;
					}
					State = 687; Match(IDENTIFIER);
					State = 689;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == LT)
					{
						{
							State = 688; typeArguments();
						}
					}

				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class CreatorContext : ParserRuleContext
		{
			public NonWildcardTypeArgumentsContext nonWildcardTypeArguments()
			{
				return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
			}
			public CreatedNameContext createdName()
			{
				return GetRuleContext<CreatedNameContext>(0);
			}
			public ClassCreatorRestContext classCreatorRest()
			{
				return GetRuleContext<ClassCreatorRestContext>(0);
			}
			public ArrayCreatorRestContext arrayCreatorRest()
			{
				return GetRuleContext<ArrayCreatorRestContext>(0);
			}
			public CreatorContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_creator; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterCreator(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitCreator(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitCreator(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public CreatorContext creator()
		{
			CreatorContext _localctx = new CreatorContext(Context, State);
			EnterRule(_localctx, 104, RULE_creator);
			try
			{
				State = 700;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case LT:
						EnterOuterAlt(_localctx, 1);
						{
							State = 691; nonWildcardTypeArguments();
							State = 692; createdName();
							State = 693; classCreatorRest();
						}
						break;
					case BOOLEAN:
					case DECIMAL_NUMBER:
					case NUMBER:
					case STRING:
					case WHOLE_NUMBER:
					case IDENTIFIER:
						EnterOuterAlt(_localctx, 2);
						{
							State = 695; createdName();
							State = 698;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1))
							{
								case LBRACK:
									{
										State = 696; arrayCreatorRest();
									}
									break;
								case LPAREN:
									{
										State = 697; classCreatorRest();
									}
									break;
								default:
									throw new NoViableAltException(this);
							}
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class CreatedNameContext : ParserRuleContext
		{
			public ITerminalNode[] IDENTIFIER() { return GetTokens(TweedleParser.IDENTIFIER); }
			public ITerminalNode IDENTIFIER(int i)
			{
				return GetToken(TweedleParser.IDENTIFIER, i);
			}
			public TypeArgumentsOrDiamondContext[] typeArgumentsOrDiamond()
			{
				return GetRuleContexts<TypeArgumentsOrDiamondContext>();
			}
			public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond(int i)
			{
				return GetRuleContext<TypeArgumentsOrDiamondContext>(i);
			}
			public PrimitiveTypeContext primitiveType()
			{
				return GetRuleContext<PrimitiveTypeContext>(0);
			}
			public CreatedNameContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_createdName; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterCreatedName(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitCreatedName(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitCreatedName(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public CreatedNameContext createdName()
		{
			CreatedNameContext _localctx = new CreatedNameContext(Context, State);
			EnterRule(_localctx, 106, RULE_createdName);
			int _la;
			try
			{
				State = 717;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case IDENTIFIER:
						EnterOuterAlt(_localctx, 1);
						{
							State = 702; Match(IDENTIFIER);
							State = 704;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la == LT)
							{
								{
									State = 703; typeArgumentsOrDiamond();
								}
							}

							State = 713;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la == DOT)
							{
								{
									{
										State = 706; Match(DOT);
										State = 707; Match(IDENTIFIER);
										State = 709;
										ErrorHandler.Sync(this);
										_la = TokenStream.LA(1);
										if (_la == LT)
										{
											{
												State = 708; typeArgumentsOrDiamond();
											}
										}

									}
								}
								State = 715;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
						}
						break;
					case BOOLEAN:
					case DECIMAL_NUMBER:
					case NUMBER:
					case STRING:
					case WHOLE_NUMBER:
						EnterOuterAlt(_localctx, 2);
						{
							State = 716; primitiveType();
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class InnerCreatorContext : ParserRuleContext
		{
			public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
			public ClassCreatorRestContext classCreatorRest()
			{
				return GetRuleContext<ClassCreatorRestContext>(0);
			}
			public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond()
			{
				return GetRuleContext<NonWildcardTypeArgumentsOrDiamondContext>(0);
			}
			public InnerCreatorContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_innerCreator; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterInnerCreator(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitInnerCreator(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitInnerCreator(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public InnerCreatorContext innerCreator()
		{
			InnerCreatorContext _localctx = new InnerCreatorContext(Context, State);
			EnterRule(_localctx, 108, RULE_innerCreator);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 719; Match(IDENTIFIER);
					State = 721;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la == LT)
					{
						{
							State = 720; nonWildcardTypeArgumentsOrDiamond();
						}
					}

					State = 723; classCreatorRest();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ArrayCreatorRestContext : ParserRuleContext
		{
			public ArrayInitializerContext arrayInitializer()
			{
				return GetRuleContext<ArrayInitializerContext>(0);
			}
			public ExpressionContext[] expression()
			{
				return GetRuleContexts<ExpressionContext>();
			}
			public ExpressionContext expression(int i)
			{
				return GetRuleContext<ExpressionContext>(i);
			}
			public ArrayCreatorRestContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_arrayCreatorRest; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterArrayCreatorRest(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitArrayCreatorRest(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitArrayCreatorRest(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ArrayCreatorRestContext arrayCreatorRest()
		{
			ArrayCreatorRestContext _localctx = new ArrayCreatorRestContext(Context, State);
			EnterRule(_localctx, 110, RULE_arrayCreatorRest);
			int _la;
			try
			{
				int _alt;
				EnterOuterAlt(_localctx, 1);
				{
					State = 725; Match(LBRACK);
					State = 753;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1))
					{
						case RBRACK:
							{
								State = 726; Match(RBRACK);
								State = 731;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								while (_la == LBRACK)
								{
									{
										{
											State = 727; Match(LBRACK);
											State = 728; Match(RBRACK);
										}
									}
									State = 733;
									ErrorHandler.Sync(this);
									_la = TokenStream.LA(1);
								}
								State = 734; arrayInitializer();
							}
							break;
						case BOOLEAN:
						case DECIMAL_NUMBER:
						case NEW:
						case NUMBER:
						case STRING:
						case SUPER:
						case THIS:
						case VOID:
						case WHOLE_NUMBER:
						case DECIMAL_LITERAL:
						case FLOAT_LITERAL:
						case BOOL_LITERAL:
						case STRING_LITERAL:
						case NULL_LITERAL:
						case LPAREN:
						case LT:
						case BANG:
						case TILDE:
						case INC:
						case DEC:
						case ADD:
						case SUB:
						case IDENTIFIER:
							{
								State = 735; expression(0);
								State = 736; Match(RBRACK);
								State = 743;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream, 77, Context);
								while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
								{
									if (_alt == 1)
									{
										{
											{
												State = 737; Match(LBRACK);
												State = 738; expression(0);
												State = 739; Match(RBRACK);
											}
										}
									}
									State = 745;
									ErrorHandler.Sync(this);
									_alt = Interpreter.AdaptivePredict(TokenStream, 77, Context);
								}
								State = 750;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream, 78, Context);
								while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
								{
									if (_alt == 1)
									{
										{
											{
												State = 746; Match(LBRACK);
												State = 747; Match(RBRACK);
											}
										}
									}
									State = 752;
									ErrorHandler.Sync(this);
									_alt = Interpreter.AdaptivePredict(TokenStream, 78, Context);
								}
							}
							break;
						default:
							throw new NoViableAltException(this);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ClassCreatorRestContext : ParserRuleContext
		{
			public ArgumentsContext arguments()
			{
				return GetRuleContext<ArgumentsContext>(0);
			}
			public ClassBodyContext classBody()
			{
				return GetRuleContext<ClassBodyContext>(0);
			}
			public ClassCreatorRestContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_classCreatorRest; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterClassCreatorRest(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitClassCreatorRest(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitClassCreatorRest(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ClassCreatorRestContext classCreatorRest()
		{
			ClassCreatorRestContext _localctx = new ClassCreatorRestContext(Context, State);
			EnterRule(_localctx, 112, RULE_classCreatorRest);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 755; arguments();
					State = 757;
					ErrorHandler.Sync(this);
					switch (Interpreter.AdaptivePredict(TokenStream, 80, Context))
					{
						case 1:
							{
								State = 756; classBody();
							}
							break;
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ExplicitGenericInvocationContext : ParserRuleContext
		{
			public NonWildcardTypeArgumentsContext nonWildcardTypeArguments()
			{
				return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
			}
			public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix()
			{
				return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
			}
			public ExplicitGenericInvocationContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_explicitGenericInvocation; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterExplicitGenericInvocation(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitExplicitGenericInvocation(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitExplicitGenericInvocation(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ExplicitGenericInvocationContext explicitGenericInvocation()
		{
			ExplicitGenericInvocationContext _localctx = new ExplicitGenericInvocationContext(Context, State);
			EnterRule(_localctx, 114, RULE_explicitGenericInvocation);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 759; nonWildcardTypeArguments();
					State = 760; explicitGenericInvocationSuffix();
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class TypeArgumentsOrDiamondContext : ParserRuleContext
		{
			public TypeArgumentsContext typeArguments()
			{
				return GetRuleContext<TypeArgumentsContext>(0);
			}
			public TypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_typeArgumentsOrDiamond; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterTypeArgumentsOrDiamond(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitTypeArgumentsOrDiamond(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitTypeArgumentsOrDiamond(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond()
		{
			TypeArgumentsOrDiamondContext _localctx = new TypeArgumentsOrDiamondContext(Context, State);
			EnterRule(_localctx, 116, RULE_typeArgumentsOrDiamond);
			try
			{
				State = 765;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 81, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 762; Match(LT);
							State = 763; Match(GT);
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 764; typeArguments();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class NonWildcardTypeArgumentsOrDiamondContext : ParserRuleContext
		{
			public NonWildcardTypeArgumentsContext nonWildcardTypeArguments()
			{
				return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
			}
			public NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_nonWildcardTypeArgumentsOrDiamond; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterNonWildcardTypeArgumentsOrDiamond(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitNonWildcardTypeArgumentsOrDiamond(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitNonWildcardTypeArgumentsOrDiamond(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond()
		{
			NonWildcardTypeArgumentsOrDiamondContext _localctx = new NonWildcardTypeArgumentsOrDiamondContext(Context, State);
			EnterRule(_localctx, 118, RULE_nonWildcardTypeArgumentsOrDiamond);
			try
			{
				State = 770;
				ErrorHandler.Sync(this);
				switch (Interpreter.AdaptivePredict(TokenStream, 82, Context))
				{
					case 1:
						EnterOuterAlt(_localctx, 1);
						{
							State = 767; Match(LT);
							State = 768; Match(GT);
						}
						break;
					case 2:
						EnterOuterAlt(_localctx, 2);
						{
							State = 769; nonWildcardTypeArguments();
						}
						break;
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class NonWildcardTypeArgumentsContext : ParserRuleContext
		{
			public TypeListContext typeList()
			{
				return GetRuleContext<TypeListContext>(0);
			}
			public NonWildcardTypeArgumentsContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_nonWildcardTypeArguments; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterNonWildcardTypeArguments(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitNonWildcardTypeArguments(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitNonWildcardTypeArguments(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments()
		{
			NonWildcardTypeArgumentsContext _localctx = new NonWildcardTypeArgumentsContext(Context, State);
			EnterRule(_localctx, 120, RULE_nonWildcardTypeArguments);
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 772; Match(LT);
					State = 773; typeList();
					State = 774; Match(GT);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class TypeListContext : ParserRuleContext
		{
			public TypeTypeContext[] typeType()
			{
				return GetRuleContexts<TypeTypeContext>();
			}
			public TypeTypeContext typeType(int i)
			{
				return GetRuleContext<TypeTypeContext>(i);
			}
			public TypeListContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_typeList; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterTypeList(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitTypeList(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitTypeList(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public TypeListContext typeList()
		{
			TypeListContext _localctx = new TypeListContext(Context, State);
			EnterRule(_localctx, 122, RULE_typeList);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 776; typeType();
					State = 781;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == COMMA)
					{
						{
							{
								State = 777; Match(COMMA);
								State = 778; typeType();
							}
						}
						State = 783;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class TypeTypeContext : ParserRuleContext
		{
			public ClassOrInterfaceTypeContext classOrInterfaceType()
			{
				return GetRuleContext<ClassOrInterfaceTypeContext>(0);
			}
			public PrimitiveTypeContext primitiveType()
			{
				return GetRuleContext<PrimitiveTypeContext>(0);
			}
			public TypeTypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_typeType; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterTypeType(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitTypeType(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitTypeType(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public TypeTypeContext typeType()
		{
			TypeTypeContext _localctx = new TypeTypeContext(Context, State);
			EnterRule(_localctx, 124, RULE_typeType);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 786;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1))
					{
						case IDENTIFIER:
							{
								State = 784; classOrInterfaceType();
							}
							break;
						case BOOLEAN:
						case DECIMAL_NUMBER:
						case NUMBER:
						case STRING:
						case WHOLE_NUMBER:
							{
								State = 785; primitiveType();
							}
							break;
						default:
							throw new NoViableAltException(this);
					}
					State = 792;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == LBRACK)
					{
						{
							{
								State = 788; Match(LBRACK);
								State = 789; Match(RBRACK);
							}
						}
						State = 794;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class PrimitiveTypeContext : ParserRuleContext
		{
			public ITerminalNode BOOLEAN() { return GetToken(TweedleParser.BOOLEAN, 0); }
			public ITerminalNode DECIMAL_NUMBER() { return GetToken(TweedleParser.DECIMAL_NUMBER, 0); }
			public ITerminalNode WHOLE_NUMBER() { return GetToken(TweedleParser.WHOLE_NUMBER, 0); }
			public ITerminalNode NUMBER() { return GetToken(TweedleParser.NUMBER, 0); }
			public ITerminalNode STRING() { return GetToken(TweedleParser.STRING, 0); }
			public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_primitiveType; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterPrimitiveType(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitPrimitiveType(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public PrimitiveTypeContext primitiveType()
		{
			PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
			EnterRule(_localctx, 126, RULE_primitiveType);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 795;
					_la = TokenStream.LA(1);
					if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << DECIMAL_NUMBER) | (1L << NUMBER) | (1L << STRING) | (1L << WHOLE_NUMBER))) != 0)))
					{
						ErrorHandler.RecoverInline(this);
					}
					else
					{
						ErrorHandler.ReportMatch(this);
						Consume();
					}
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class TypeArgumentsContext : ParserRuleContext
		{
			public TypeArgumentContext[] typeArgument()
			{
				return GetRuleContexts<TypeArgumentContext>();
			}
			public TypeArgumentContext typeArgument(int i)
			{
				return GetRuleContext<TypeArgumentContext>(i);
			}
			public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_typeArguments; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterTypeArguments(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitTypeArguments(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public TypeArgumentsContext typeArguments()
		{
			TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
			EnterRule(_localctx, 128, RULE_typeArguments);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 797; Match(LT);
					State = 798; typeArgument();
					State = 803;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la == COMMA)
					{
						{
							{
								State = 799; Match(COMMA);
								State = 800; typeArgument();
							}
						}
						State = 805;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 806; Match(GT);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class SuperSuffixContext : ParserRuleContext
		{
			public ArgumentsContext arguments()
			{
				return GetRuleContext<ArgumentsContext>(0);
			}
			public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
			public SuperSuffixContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_superSuffix; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterSuperSuffix(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitSuperSuffix(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitSuperSuffix(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public SuperSuffixContext superSuffix()
		{
			SuperSuffixContext _localctx = new SuperSuffixContext(Context, State);
			EnterRule(_localctx, 130, RULE_superSuffix);
			try
			{
				State = 814;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case LPAREN:
						EnterOuterAlt(_localctx, 1);
						{
							State = 808; arguments();
						}
						break;
					case DOT:
						EnterOuterAlt(_localctx, 2);
						{
							State = 809; Match(DOT);
							State = 810; Match(IDENTIFIER);
							State = 812;
							ErrorHandler.Sync(this);
							switch (Interpreter.AdaptivePredict(TokenStream, 87, Context))
							{
								case 1:
									{
										State = 811; arguments();
									}
									break;
							}
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ExplicitGenericInvocationSuffixContext : ParserRuleContext
		{
			public ITerminalNode SUPER() { return GetToken(TweedleParser.SUPER, 0); }
			public SuperSuffixContext superSuffix()
			{
				return GetRuleContext<SuperSuffixContext>(0);
			}
			public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
			public ArgumentsContext arguments()
			{
				return GetRuleContext<ArgumentsContext>(0);
			}
			public ExplicitGenericInvocationSuffixContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_explicitGenericInvocationSuffix; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterExplicitGenericInvocationSuffix(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitExplicitGenericInvocationSuffix(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitExplicitGenericInvocationSuffix(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix()
		{
			ExplicitGenericInvocationSuffixContext _localctx = new ExplicitGenericInvocationSuffixContext(Context, State);
			EnterRule(_localctx, 132, RULE_explicitGenericInvocationSuffix);
			try
			{
				State = 820;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1))
				{
					case SUPER:
						EnterOuterAlt(_localctx, 1);
						{
							State = 816; Match(SUPER);
							State = 817; superSuffix();
						}
						break;
					case IDENTIFIER:
						EnterOuterAlt(_localctx, 2);
						{
							State = 818; Match(IDENTIFIER);
							State = 819; arguments();
						}
						break;
					default:
						throw new NoViableAltException(this);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public partial class ArgumentsContext : ParserRuleContext
		{
			public ExpressionListContext expressionList()
			{
				return GetRuleContext<ExpressionListContext>(0);
			}
			public ArgumentsContext(ParserRuleContext parent, int invokingState)
				: base(parent, invokingState)
			{
			}
			public override int RuleIndex { get { return RULE_arguments; } }
			public override void EnterRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.EnterArguments(this);
			}
			public override void ExitRule(IParseTreeListener listener)
			{
				ITweedleParserListener typedListener = listener as ITweedleParserListener;
				if (typedListener != null) typedListener.ExitArguments(this);
			}
			public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
			{
				ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
				if (typedVisitor != null) return typedVisitor.VisitArguments(this);
				else return visitor.VisitChildren(this);
			}
		}

		[RuleVersion(0)]
		public ArgumentsContext arguments()
		{
			ArgumentsContext _localctx = new ArgumentsContext(Context, State);
			EnterRule(_localctx, 134, RULE_arguments);
			int _la;
			try
			{
				EnterOuterAlt(_localctx, 1);
				{
					State = 822; Match(LPAREN);
					State = 824;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << DECIMAL_NUMBER) | (1L << NEW) | (1L << NUMBER) | (1L << STRING) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << WHOLE_NUMBER) | (1L << DECIMAL_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << LT) | (1L << BANG) | (1L << TILDE) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB))) != 0) || _la == IDENTIFIER)
					{
						{
							State = 823; expressionList();
						}
					}

					State = 826; Match(RPAREN);
				}
			}
			catch (RecognitionException re)
			{
				_localctx.exception = re;
				ErrorHandler.ReportError(this, re);
				ErrorHandler.Recover(this, re);
			}
			finally
			{
				ExitRule();
			}
			return _localctx;
		}

		public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex)
		{
			switch (ruleIndex)
			{
				case 46: return expression_sempred((ExpressionContext)_localctx, predIndex);
			}
			return true;
		}
		private bool expression_sempred(ExpressionContext _localctx, int predIndex)
		{
			switch (predIndex)
			{
				case 0: return Precpred(Context, 16);
				case 1: return Precpred(Context, 15);
				case 2: return Precpred(Context, 14);
				case 3: return Precpred(Context, 13);
				case 4: return Precpred(Context, 12);
				case 5: return Precpred(Context, 11);
				case 6: return Precpred(Context, 10);
				case 7: return Precpred(Context, 9);
				case 8: return Precpred(Context, 8);
				case 9: return Precpred(Context, 7);
				case 10: return Precpred(Context, 6);
				case 11: return Precpred(Context, 5);
				case 12: return Precpred(Context, 24);
				case 13: return Precpred(Context, 23);
				case 14: return Precpred(Context, 19);
				case 15: return Precpred(Context, 3);
			}
			return true;
		}

		private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786',
		'\x5964', '\x3', 'Z', '\x33F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3',
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4',
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b',
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v',
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t',
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4',
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t',
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4',
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t',
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4',
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t',
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4',
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4',
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&',
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')',
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t',
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/',
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32',
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34',
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37',
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39',
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4',
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@',
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4',
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t',
		'\x45', '\x3', '\x2', '\a', '\x2', '\x8C', '\n', '\x2', '\f', '\x2', '\xE',
		'\x2', '\x8F', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2',
		'\x93', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\x96', '\n', '\x2',
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x9A', '\n', '\x3', '\x3',
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3',
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a',
		'\xA6', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xAA', '\n',
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xAE', '\n', '\a', '\x3',
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t',
		'\x3', '\t', '\x3', '\t', '\a', '\t', '\xB8', '\n', '\t', '\f', '\t',
		'\xE', '\t', '\xBB', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n',
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\xC2', '\n', '\n', '\x3', '\v',
		'\x3', '\v', '\x3', '\v', '\a', '\v', '\xC7', '\n', '\v', '\f', '\v',
		'\xE', '\v', '\xCA', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f',
		'\x3', '\f', '\x5', '\f', '\xD0', '\n', '\f', '\x3', '\f', '\x3', '\f',
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xD7', '\n', '\r',
		'\f', '\r', '\xE', '\r', '\xDA', '\v', '\r', '\x3', '\xE', '\x3', '\xE',
		'\x5', '\xE', '\xDE', '\n', '\xE', '\x3', '\xE', '\x5', '\xE', '\xE1',
		'\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xE5', '\n', '\xF',
		'\f', '\xF', '\xE', '\xF', '\xE8', '\v', '\xF', '\x3', '\xF', '\x3', '\xF',
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xEE', '\n', '\x10', '\x3',
		'\x10', '\x3', '\x10', '\a', '\x10', '\xF2', '\n', '\x10', '\f', '\x10',
		'\xE', '\x10', '\xF5', '\v', '\x10', '\x3', '\x10', '\x5', '\x10', '\xF8',
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11',
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x101', '\n',
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3',
		'\x12', '\a', '\x12', '\x108', '\n', '\x12', '\f', '\x12', '\xE', '\x12',
		'\x10B', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3',
		'\x13', '\x5', '\x13', '\x111', '\n', '\x13', '\x3', '\x14', '\x3', '\x14',
		'\x5', '\x14', '\x115', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3',
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3',
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3',
		'\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a',
		'\x19', '\x128', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x12B', '\v',
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x130',
		'\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B',
		'\x135', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x138', '\v', '\x1B',
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x13C', '\n', '\x1C', '\x3',
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x142',
		'\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x145', '\v', '\x1D', '\x3',
		'\x1D', '\x5', '\x1D', '\x148', '\n', '\x1D', '\x5', '\x1D', '\x14A',
		'\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E',
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F',
		'\x154', '\n', '\x1F', '\x5', '\x1F', '\x156', '\n', '\x1F', '\x3', ' ',
		'\x3', ' ', '\x5', ' ', '\x15A', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3',
		'!', '\x3', '!', '\x3', '!', '\a', '!', '\x161', '\n', '!', '\f', '!',
		'\xE', '!', '\x164', '\v', '!', '\x3', '!', '\x3', '!', '\a', '!', '\x168',
		'\n', '!', '\f', '!', '\xE', '!', '\x16B', '\v', '!', '\x3', '!', '\x3',
		'!', '\x5', '!', '\x16F', '\n', '!', '\x3', '!', '\x3', '!', '\x3', '!',
		'\a', '!', '\x174', '\n', '!', '\f', '!', '\xE', '!', '\x177', '\v', '!',
		'\x3', '!', '\x3', '!', '\x5', '!', '\x17B', '\n', '!', '\x3', '!', '\x5',
		'!', '\x17E', '\n', '!', '\x3', '\"', '\a', '\"', '\x181', '\n', '\"',
		'\f', '\"', '\xE', '\"', '\x184', '\v', '\"', '\x3', '\"', '\x3', '\"',
		'\x3', '\"', '\x3', '#', '\a', '#', '\x18A', '\n', '#', '\f', '#', '\xE',
		'#', '\x18D', '\v', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#',
		'\x3', '#', '\x3', '$', '\a', '$', '\x195', '\n', '$', '\f', '$', '\xE',
		'$', '\x198', '\v', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$',
		'\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\a', '&', '\x1A2', '\n',
		'&', '\f', '&', '\xE', '&', '\x1A5', '\v', '&', '\x3', '&', '\x3', '&',
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x1AD',
		'\n', '\'', '\x3', '(', '\x5', '(', '\x1B0', '\n', '(', '\x3', '(', '\a',
		'(', '\x1B3', '\n', '(', '\f', '(', '\xE', '(', '\x1B6', '\v', '(', '\x3',
		'(', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3',
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3',
		')', '\x5', ')', '\x1C5', '\n', ')', '\x3', ')', '\x3', ')', '\x3', ')',
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')',
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')',
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')',
		'\x3', ')', '\x5', ')', '\x1DD', '\n', ')', '\x3', ')', '\x3', ')', '\x3',
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3',
		')', '\x5', ')', '\x1E8', '\n', ')', '\x3', '*', '\x3', '*', '\x3', '*',
		'\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+',
		'\x3', ',', '\x3', ',', '\x3', ',', '\a', ',', '\x1F6', '\n', ',', '\f',
		',', '\xE', ',', '\x1F9', '\v', ',', '\x3', '-', '\x3', '-', '\x3', '-',
		'\x3', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\a', '.', '\x202', '\n',
		'.', '\f', '.', '\xE', '.', '\x205', '\v', '.', '\x3', '/', '\x3', '/',
		'\x3', '/', '\x5', '/', '\x20A', '\n', '/', '\x3', '/', '\x3', '/', '\x3',
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3',
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3',
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3',
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x220', '\n', '\x30',
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x224', '\n', '\x30', '\x3',
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x229', '\n', '\x30',
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x22D', '\n', '\x30', '\x3',
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3',
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3',
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x23D',
		'\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30',
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30',
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30',
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30',
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30',
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30',
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30',
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30',
		'\x265', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3',
		'\x30', '\x5', '\x30', '\x26B', '\n', '\x30', '\x3', '\x30', '\x3', '\x30',
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30',
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x277', '\n',
		'\x30', '\x3', '\x30', '\a', '\x30', '\x27A', '\n', '\x30', '\f', '\x30',
		'\xE', '\x30', '\x27D', '\v', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3',
		'\x31', '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5',
		'\x32', '\x286', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32',
		'\x3', '\x32', '\x3', '\x32', '\a', '\x32', '\x28D', '\n', '\x32', '\f',
		'\x32', '\xE', '\x32', '\x290', '\v', '\x32', '\x3', '\x32', '\x5', '\x32',
		'\x293', '\n', '\x32', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x297',
		'\n', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34',
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34',
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34',
		'\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x2A9', '\n', '\x34', '\x5',
		'\x34', '\x2AB', '\n', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35',
		'\x5', '\x35', '\x2B0', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5',
		'\x35', '\x2B4', '\n', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36',
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36',
		'\x2BD', '\n', '\x36', '\x5', '\x36', '\x2BF', '\n', '\x36', '\x3', '\x37',
		'\x3', '\x37', '\x5', '\x37', '\x2C3', '\n', '\x37', '\x3', '\x37', '\x3',
		'\x37', '\x3', '\x37', '\x5', '\x37', '\x2C8', '\n', '\x37', '\a', '\x37',
		'\x2CA', '\n', '\x37', '\f', '\x37', '\xE', '\x37', '\x2CD', '\v', '\x37',
		'\x3', '\x37', '\x5', '\x37', '\x2D0', '\n', '\x37', '\x3', '\x38', '\x3',
		'\x38', '\x5', '\x38', '\x2D4', '\n', '\x38', '\x3', '\x38', '\x3', '\x38',
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\a', '\x39',
		'\x2DC', '\n', '\x39', '\f', '\x39', '\xE', '\x39', '\x2DF', '\v', '\x39',
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39',
		'\x3', '\x39', '\x3', '\x39', '\a', '\x39', '\x2E8', '\n', '\x39', '\f',
		'\x39', '\xE', '\x39', '\x2EB', '\v', '\x39', '\x3', '\x39', '\x3', '\x39',
		'\a', '\x39', '\x2EF', '\n', '\x39', '\f', '\x39', '\xE', '\x39', '\x2F2',
		'\v', '\x39', '\x5', '\x39', '\x2F4', '\n', '\x39', '\x3', ':', '\x3',
		':', '\x5', ':', '\x2F8', '\n', ':', '\x3', ';', '\x3', ';', '\x3', ';',
		'\x3', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x300', '\n', '<', '\x3',
		'=', '\x3', '=', '\x3', '=', '\x5', '=', '\x305', '\n', '=', '\x3', '>',
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', '?',
		'\a', '?', '\x30E', '\n', '?', '\f', '?', '\xE', '?', '\x311', '\v', '?',
		'\x3', '@', '\x3', '@', '\x5', '@', '\x315', '\n', '@', '\x3', '@', '\x3',
		'@', '\a', '@', '\x319', '\n', '@', '\f', '@', '\xE', '@', '\x31C', '\v',
		'@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3',
		'\x42', '\x3', '\x42', '\a', '\x42', '\x324', '\n', '\x42', '\f', '\x42',
		'\xE', '\x42', '\x327', '\v', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3',
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x32F',
		'\n', '\x43', '\x5', '\x43', '\x331', '\n', '\x43', '\x3', '\x44', '\x3',
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x337', '\n', '\x44',
		'\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x33B', '\n', '\x45', '\x3',
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x2', '\x3', '^', '\x46', '\x2',
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16',
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.',
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44',
		'\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`',
		'\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z',
		'|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', '\x2', '\r', '\x5',
		'\x2', '\x10', '\x10', '\x17', '\x17', '\x1D', '\x1D', '\x4', '\x2', '\r',
		'\r', '\x1B', '\x1B', '\x3', '\x2', '!', '%', '\x3', '\x2', '<', '?',
		'\x3', '\x2', '\x32', '\x33', '\x4', '\x2', '@', '\x41', '\x45', '\x45',
		'\x3', '\x2', '>', '?', '\x4', '\x2', '\x30', '\x31', '\x37', '\x38',
		'\x4', '\x2', '\x36', '\x36', '\x39', '\x39', '\x3', '\x2', '<', '=',
		'\a', '\x2', '\x3', '\x3', '\a', '\a', '\x16', '\x16', '\x1A', '\x1A',
		' ', ' ', '\x2', '\x386', '\x2', '\x95', '\x3', '\x2', '\x2', '\x2', '\x4',
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x6', '\x9B', '\x3', '\x2', '\x2',
		'\x2', '\b', '\x9E', '\x3', '\x2', '\x2', '\x2', '\n', '\xA0', '\x3',
		'\x2', '\x2', '\x2', '\f', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xE',
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\x10', '\xB3', '\x3', '\x2', '\x2',
		'\x2', '\x12', '\xBE', '\x3', '\x2', '\x2', '\x2', '\x14', '\xC3', '\x3',
		'\x2', '\x2', '\x2', '\x16', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x18',
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xDB', '\x3', '\x2', '\x2',
		'\x2', '\x1C', '\xE2', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xF7', '\x3',
		'\x2', '\x2', '\x2', ' ', '\x100', '\x3', '\x2', '\x2', '\x2', '\"', '\x102',
		'\x3', '\x2', '\x2', '\x2', '$', '\x110', '\x3', '\x2', '\x2', '\x2',
		'&', '\x114', '\x3', '\x2', '\x2', '\x2', '(', '\x116', '\x3', '\x2',
		'\x2', '\x2', '*', '\x119', '\x3', '\x2', '\x2', '\x2', ',', '\x11C',
		'\x3', '\x2', '\x2', '\x2', '.', '\x120', '\x3', '\x2', '\x2', '\x2',
		'\x30', '\x124', '\x3', '\x2', '\x2', '\x2', '\x32', '\x12C', '\x3', '\x2',
		'\x2', '\x2', '\x34', '\x131', '\x3', '\x2', '\x2', '\x2', '\x36', '\x13B',
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x13D', '\x3', '\x2', '\x2', '\x2',
		':', '\x14D', '\x3', '\x2', '\x2', '\x2', '<', '\x155', '\x3', '\x2',
		'\x2', '\x2', '>', '\x157', '\x3', '\x2', '\x2', '\x2', '@', '\x17D',
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x182', '\x3', '\x2', '\x2', '\x2',
		'\x44', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x46', '\x196', '\x3', '\x2',
		'\x2', '\x2', 'H', '\x19D', '\x3', '\x2', '\x2', '\x2', 'J', '\x19F',
		'\x3', '\x2', '\x2', '\x2', 'L', '\x1AC', '\x3', '\x2', '\x2', '\x2',
		'N', '\x1AF', '\x3', '\x2', '\x2', '\x2', 'P', '\x1E7', '\x3', '\x2',
		'\x2', '\x2', 'R', '\x1E9', '\x3', '\x2', '\x2', '\x2', 'T', '\x1EE',
		'\x3', '\x2', '\x2', '\x2', 'V', '\x1F2', '\x3', '\x2', '\x2', '\x2',
		'X', '\x1FA', '\x3', '\x2', '\x2', '\x2', 'Z', '\x1FE', '\x3', '\x2',
		'\x2', '\x2', '\\', '\x206', '\x3', '\x2', '\x2', '\x2', '^', '\x22C',
		'\x3', '\x2', '\x2', '\x2', '`', '\x27E', '\x3', '\x2', '\x2', '\x2',
		'\x62', '\x292', '\x3', '\x2', '\x2', '\x2', '\x64', '\x296', '\x3', '\x2',
		'\x2', '\x2', '\x66', '\x2AA', '\x3', '\x2', '\x2', '\x2', 'h', '\x2AF',
		'\x3', '\x2', '\x2', '\x2', 'j', '\x2BE', '\x3', '\x2', '\x2', '\x2',
		'l', '\x2CF', '\x3', '\x2', '\x2', '\x2', 'n', '\x2D1', '\x3', '\x2',
		'\x2', '\x2', 'p', '\x2D7', '\x3', '\x2', '\x2', '\x2', 'r', '\x2F5',
		'\x3', '\x2', '\x2', '\x2', 't', '\x2F9', '\x3', '\x2', '\x2', '\x2',
		'v', '\x2FF', '\x3', '\x2', '\x2', '\x2', 'x', '\x304', '\x3', '\x2',
		'\x2', '\x2', 'z', '\x306', '\x3', '\x2', '\x2', '\x2', '|', '\x30A',
		'\x3', '\x2', '\x2', '\x2', '~', '\x314', '\x3', '\x2', '\x2', '\x2',
		'\x80', '\x31D', '\x3', '\x2', '\x2', '\x2', '\x82', '\x31F', '\x3', '\x2',
		'\x2', '\x2', '\x84', '\x330', '\x3', '\x2', '\x2', '\x2', '\x86', '\x336',
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x338', '\x3', '\x2', '\x2', '\x2',
		'\x8A', '\x8C', '\x5', '\x4', '\x3', '\x2', '\x8B', '\x8A', '\x3', '\x2',
		'\x2', '\x2', '\x8C', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B',
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2',
		'\x8E', '\x92', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2',
		'\x2', '\x2', '\x90', '\x93', '\x5', '\f', '\a', '\x2', '\x91', '\x93',
		'\x5', '\x16', '\f', '\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2',
		'\x92', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', '\x96', '\x3', '\x2',
		'\x2', '\x2', '\x94', '\x96', '\a', ',', '\x2', '\x2', '\x95', '\x8D',
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x94', '\x3', '\x2', '\x2', '\x2',
		'\x96', '\x3', '\x3', '\x2', '\x2', '\x2', '\x97', '\x9A', '\x5', '\x6',
		'\x4', '\x2', '\x98', '\x9A', '\a', '\x19', '\x2', '\x2', '\x99', '\x97',
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x98', '\x3', '\x2', '\x2', '\x2',
		'\x9A', '\x5', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\a', 'S',
		'\x2', '\x2', '\x9C', '\x9D', '\x5', '\b', '\x5', '\x2', '\x9D', '\a',
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\t', '\x2', '\x2', '\x2',
		'\x9F', '\t', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', '\x6',
		'\x2', '\x2', '\xA1', '\v', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3',
		'\a', '\x4', '\x2', '\x2', '\xA3', '\xA5', '\x5', '\xE', '\b', '\x2',
		'\xA4', '\xA6', '\x5', '\x10', '\t', '\x2', '\xA5', '\xA4', '\x3', '\x2',
		'\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA9',
		'\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', '\r', '\x2', '\x2',
		'\xA8', '\xAA', '\x5', '~', '@', '\x2', '\xA9', '\xA7', '\x3', '\x2',
		'\x2', '\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAD',
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\a', '\x14', '\x2', '\x2',
		'\xAC', '\xAE', '\a', 'Z', '\x2', '\x2', '\xAD', '\xAB', '\x3', '\x2',
		'\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF',
		'\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x5', '\x1C', '\xF', '\x2',
		'\xB0', '\r', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\a', 'Z', '\x2',
		'\x2', '\xB2', '\xF', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\a',
		'\x31', '\x2', '\x2', '\xB4', '\xB9', '\x5', '\x12', '\n', '\x2', '\xB5',
		'\xB6', '\a', '-', '\x2', '\x2', '\xB6', '\xB8', '\x5', '\x12', '\n',
		'\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xBB', '\x3',
		'\x2', '\x2', '\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB9',
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBC', '\x3', '\x2', '\x2',
		'\x2', '\xBB', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\a',
		'\x30', '\x2', '\x2', '\xBD', '\x11', '\x3', '\x2', '\x2', '\x2', '\xBE',
		'\xC1', '\a', 'Z', '\x2', '\x2', '\xBF', '\xC0', '\a', '\r', '\x2', '\x2',
		'\xC0', '\xC2', '\x5', '\x14', '\v', '\x2', '\xC1', '\xBF', '\x3', '\x2',
		'\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x13',
		'\x3', '\x2', '\x2', '\x2', '\xC3', '\xC8', '\x5', '~', '@', '\x2', '\xC4',
		'\xC5', '\a', '\x42', '\x2', '\x2', '\xC5', '\xC7', '\x5', '~', '@', '\x2',
		'\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xCA', '\x3', '\x2',
		'\x2', '\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9',
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\x15', '\x3', '\x2', '\x2', '\x2',
		'\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\a', '\f',
		'\x2', '\x2', '\xCC', '\xCD', '\x5', '\xE', '\b', '\x2', '\xCD', '\xCF',
		'\a', '(', '\x2', '\x2', '\xCE', '\xD0', '\x5', '\x18', '\r', '\x2', '\xCF',
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2',
		'\x2', '\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\a',
		')', '\x2', '\x2', '\xD2', '\x17', '\x3', '\x2', '\x2', '\x2', '\xD3',
		'\xD8', '\x5', '\x1A', '\xE', '\x2', '\xD4', '\xD5', '\a', '-', '\x2',
		'\x2', '\xD5', '\xD7', '\x5', '\x1A', '\xE', '\x2', '\xD6', '\xD4', '\x3',
		'\x2', '\x2', '\x2', '\xD7', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xD8',
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2',
		'\x2', '\xD9', '\x19', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD8', '\x3',
		'\x2', '\x2', '\x2', '\xDB', '\xDD', '\x5', '\xE', '\b', '\x2', '\xDC',
		'\xDE', '\x5', '\x88', '\x45', '\x2', '\xDD', '\xDC', '\x3', '\x2', '\x2',
		'\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE0', '\x3',
		'\x2', '\x2', '\x2', '\xDF', '\xE1', '\x5', '\x1C', '\xF', '\x2', '\xE0',
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', '\x2', '\x2',
		'\x2', '\xE1', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE6', '\a',
		'(', '\x2', '\x2', '\xE3', '\xE5', '\x5', '\x1E', '\x10', '\x2', '\xE4',
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE8', '\x3', '\x2', '\x2',
		'\x2', '\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3',
		'\x2', '\x2', '\x2', '\xE7', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE8',
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\a', ')', '\x2',
		'\x2', '\xEA', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xF8', '\a',
		',', '\x2', '\x2', '\xEC', '\xEE', '\a', '\x19', '\x2', '\x2', '\xED',
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2',
		'\x2', '\xEE', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF8', '\x5',
		'J', '&', '\x2', '\xF0', '\xF2', '\x5', '\x4', '\x3', '\x2', '\xF1', '\xF0',
		'\x3', '\x2', '\x2', '\x2', '\xF2', '\xF5', '\x3', '\x2', '\x2', '\x2',
		'\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', '\x2',
		'\x2', '\x2', '\xF4', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF3',
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\xF8', '\x5', ' ', '\x11', '\x2',
		'\xF7', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xED', '\x3', '\x2',
		'\x2', '\x2', '\xF7', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF8', '\x1F',
		'\x3', '\x2', '\x2', '\x2', '\xF9', '\x101', '\x5', '\"', '\x12', '\x2',
		'\xFA', '\x101', '\x5', '(', '\x15', '\x2', '\xFB', '\x101', '\x5', '.',
		'\x18', '\x2', '\xFC', '\x101', '\x5', ',', '\x17', '\x2', '\xFD', '\x101',
		'\x5', '*', '\x16', '\x2', '\xFE', '\x101', '\x5', '\f', '\a', '\x2',
		'\xFF', '\x101', '\x5', '\x16', '\f', '\x2', '\x100', '\xF9', '\x3', '\x2',
		'\x2', '\x2', '\x100', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFB',
		'\x3', '\x2', '\x2', '\x2', '\x100', '\xFC', '\x3', '\x2', '\x2', '\x2',
		'\x100', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFE', '\x3', '\x2',
		'\x2', '\x2', '\x100', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '!',
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x5', '&', '\x14', '\x2',
		'\x103', '\x104', '\a', 'Z', '\x2', '\x2', '\x104', '\x109', '\x5', '>',
		' ', '\x2', '\x105', '\x106', '\a', '*', '\x2', '\x2', '\x106', '\x108',
		'\a', '+', '\x2', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', '\x2',
		'\x108', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x109', '\x107', '\x3',
		'\x2', '\x2', '\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10A',
		'\x10C', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', '\x2', '\x2',
		'\x2', '\x10C', '\x10D', '\x5', '$', '\x13', '\x2', '\x10D', '#', '\x3',
		'\x2', '\x2', '\x2', '\x10E', '\x111', '\x5', 'J', '&', '\x2', '\x10F',
		'\x111', '\a', ',', '\x2', '\x2', '\x110', '\x10E', '\x3', '\x2', '\x2',
		'\x2', '\x110', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x111', '%', '\x3',
		'\x2', '\x2', '\x2', '\x112', '\x115', '\x5', '~', '@', '\x2', '\x113',
		'\x115', '\a', '\x1E', '\x2', '\x2', '\x114', '\x112', '\x3', '\x2', '\x2',
		'\x2', '\x114', '\x113', '\x3', '\x2', '\x2', '\x2', '\x115', '\'', '\x3',
		'\x2', '\x2', '\x2', '\x116', '\x117', '\x5', '\x10', '\t', '\x2', '\x117',
		'\x118', '\x5', '\"', '\x12', '\x2', '\x118', ')', '\x3', '\x2', '\x2',
		'\x2', '\x119', '\x11A', '\x5', '\x10', '\t', '\x2', '\x11A', '\x11B',
		'\x5', ',', '\x17', '\x2', '\x11B', '+', '\x3', '\x2', '\x2', '\x2', '\x11C',
		'\x11D', '\a', 'Z', '\x2', '\x2', '\x11D', '\x11E', '\x5', '>', ' ', '\x2',
		'\x11E', '\x11F', '\x5', 'J', '&', '\x2', '\x11F', '-', '\x3', '\x2',
		'\x2', '\x2', '\x120', '\x121', '\x5', '~', '@', '\x2', '\x121', '\x122',
		'\x5', '\x30', '\x19', '\x2', '\x122', '\x123', '\a', ',', '\x2', '\x2',
		'\x123', '/', '\x3', '\x2', '\x2', '\x2', '\x124', '\x129', '\x5', '\x32',
		'\x1A', '\x2', '\x125', '\x126', '\a', '-', '\x2', '\x2', '\x126', '\x128',
		'\x5', '\x32', '\x1A', '\x2', '\x127', '\x125', '\x3', '\x2', '\x2', '\x2',
		'\x128', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x129', '\x127', '\x3',
		'\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A',
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2',
		'\x2', '\x12C', '\x12F', '\x5', '\x34', '\x1B', '\x2', '\x12D', '\x12E',
		'\a', 'U', '\x2', '\x2', '\x12E', '\x130', '\x5', '\x36', '\x1C', '\x2',
		'\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\x3',
		'\x2', '\x2', '\x2', '\x130', '\x33', '\x3', '\x2', '\x2', '\x2', '\x131',
		'\x136', '\a', 'Z', '\x2', '\x2', '\x132', '\x133', '\a', '*', '\x2',
		'\x2', '\x133', '\x135', '\a', '+', '\x2', '\x2', '\x134', '\x132', '\x3',
		'\x2', '\x2', '\x2', '\x135', '\x138', '\x3', '\x2', '\x2', '\x2', '\x136',
		'\x134', '\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2',
		'\x2', '\x137', '\x35', '\x3', '\x2', '\x2', '\x2', '\x138', '\x136',
		'\x3', '\x2', '\x2', '\x2', '\x139', '\x13C', '\x5', '\x38', '\x1D', '\x2',
		'\x13A', '\x13C', '\x5', '^', '\x30', '\x2', '\x13B', '\x139', '\x3',
		'\x2', '\x2', '\x2', '\x13B', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13C',
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x149', '\a', '(', '\x2',
		'\x2', '\x13E', '\x143', '\x5', '\x36', '\x1C', '\x2', '\x13F', '\x140',
		'\a', '-', '\x2', '\x2', '\x140', '\x142', '\x5', '\x36', '\x1C', '\x2',
		'\x141', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x142', '\x145', '\x3',
		'\x2', '\x2', '\x2', '\x143', '\x141', '\x3', '\x2', '\x2', '\x2', '\x143',
		'\x144', '\x3', '\x2', '\x2', '\x2', '\x144', '\x147', '\x3', '\x2', '\x2',
		'\x2', '\x145', '\x143', '\x3', '\x2', '\x2', '\x2', '\x146', '\x148',
		'\a', '-', '\x2', '\x2', '\x147', '\x146', '\x3', '\x2', '\x2', '\x2',
		'\x147', '\x148', '\x3', '\x2', '\x2', '\x2', '\x148', '\x14A', '\x3',
		'\x2', '\x2', '\x2', '\x149', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x149',
		'\x14A', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\x3', '\x2', '\x2',
		'\x2', '\x14B', '\x14C', '\a', ')', '\x2', '\x2', '\x14C', '\x39', '\x3',
		'\x2', '\x2', '\x2', '\x14D', '\x14E', '\a', 'Z', '\x2', '\x2', '\x14E',
		';', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x156', '\x5', '~', '@', '\x2',
		'\x150', '\x153', '\a', '\x34', '\x2', '\x2', '\x151', '\x152', '\t',
		'\x3', '\x2', '\x2', '\x152', '\x154', '\x5', '~', '@', '\x2', '\x153',
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', '\x3', '\x2', '\x2',
		'\x2', '\x154', '\x156', '\x3', '\x2', '\x2', '\x2', '\x155', '\x14F',
		'\x3', '\x2', '\x2', '\x2', '\x155', '\x150', '\x3', '\x2', '\x2', '\x2',
		'\x156', '=', '\x3', '\x2', '\x2', '\x2', '\x157', '\x159', '\a', '&',
		'\x2', '\x2', '\x158', '\x15A', '\x5', '@', '!', '\x2', '\x159', '\x158',
		'\x3', '\x2', '\x2', '\x2', '\x159', '\x15A', '\x3', '\x2', '\x2', '\x2',
		'\x15A', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', '\a',
		'\'', '\x2', '\x2', '\x15C', '?', '\x3', '\x2', '\x2', '\x2', '\x15D',
		'\x162', '\x5', '\x42', '\"', '\x2', '\x15E', '\x15F', '\a', '-', '\x2',
		'\x2', '\x15F', '\x161', '\x5', '\x42', '\"', '\x2', '\x160', '\x15E',
		'\x3', '\x2', '\x2', '\x2', '\x161', '\x164', '\x3', '\x2', '\x2', '\x2',
		'\x162', '\x160', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\x3',
		'\x2', '\x2', '\x2', '\x163', '\x169', '\x3', '\x2', '\x2', '\x2', '\x164',
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\a', '-', '\x2',
		'\x2', '\x166', '\x168', '\x5', '\x44', '#', '\x2', '\x167', '\x165',
		'\x3', '\x2', '\x2', '\x2', '\x168', '\x16B', '\x3', '\x2', '\x2', '\x2',
		'\x169', '\x167', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', '\x3',
		'\x2', '\x2', '\x2', '\x16A', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x16B',
		'\x169', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\a', '-', '\x2',
		'\x2', '\x16D', '\x16F', '\x5', '\x46', '$', '\x2', '\x16E', '\x16C',
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x16F', '\x3', '\x2', '\x2', '\x2',
		'\x16F', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x170', '\x175', '\x5',
		'\x44', '#', '\x2', '\x171', '\x172', '\a', '-', '\x2', '\x2', '\x172',
		'\x174', '\x5', '\x44', '#', '\x2', '\x173', '\x171', '\x3', '\x2', '\x2',
		'\x2', '\x174', '\x177', '\x3', '\x2', '\x2', '\x2', '\x175', '\x173',
		'\x3', '\x2', '\x2', '\x2', '\x175', '\x176', '\x3', '\x2', '\x2', '\x2',
		'\x176', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x177', '\x175', '\x3',
		'\x2', '\x2', '\x2', '\x178', '\x179', '\a', '-', '\x2', '\x2', '\x179',
		'\x17B', '\x5', '\x46', '$', '\x2', '\x17A', '\x178', '\x3', '\x2', '\x2',
		'\x2', '\x17A', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17E',
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x17E', '\x5', '\x46', '$', '\x2',
		'\x17D', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x170', '\x3',
		'\x2', '\x2', '\x2', '\x17D', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17E',
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x181', '\x5', '\n', '\x6',
		'\x2', '\x180', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x181', '\x184',
		'\x3', '\x2', '\x2', '\x2', '\x182', '\x180', '\x3', '\x2', '\x2', '\x2',
		'\x182', '\x183', '\x3', '\x2', '\x2', '\x2', '\x183', '\x185', '\x3',
		'\x2', '\x2', '\x2', '\x184', '\x182', '\x3', '\x2', '\x2', '\x2', '\x185',
		'\x186', '\x5', '~', '@', '\x2', '\x186', '\x187', '\x5', '\x34', '\x1B',
		'\x2', '\x187', '\x43', '\x3', '\x2', '\x2', '\x2', '\x188', '\x18A',
		'\x5', '\n', '\x6', '\x2', '\x189', '\x188', '\x3', '\x2', '\x2', '\x2',
		'\x18A', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x189', '\x3',
		'\x2', '\x2', '\x2', '\x18B', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18C',
		'\x18E', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18B', '\x3', '\x2', '\x2',
		'\x2', '\x18E', '\x18F', '\x5', '~', '@', '\x2', '\x18F', '\x190', '\x5',
		'\x34', '\x1B', '\x2', '\x190', '\x191', '\a', 'U', '\x2', '\x2', '\x191',
		'\x192', '\x5', '^', '\x30', '\x2', '\x192', '\x45', '\x3', '\x2', '\x2',
		'\x2', '\x193', '\x195', '\x5', '\n', '\x6', '\x2', '\x194', '\x193',
		'\x3', '\x2', '\x2', '\x2', '\x195', '\x198', '\x3', '\x2', '\x2', '\x2',
		'\x196', '\x194', '\x3', '\x2', '\x2', '\x2', '\x196', '\x197', '\x3',
		'\x2', '\x2', '\x2', '\x197', '\x199', '\x3', '\x2', '\x2', '\x2', '\x198',
		'\x196', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', '\x5', '~', '@',
		'\x2', '\x19A', '\x19B', '\a', 'T', '\x2', '\x2', '\x19B', '\x19C', '\x5',
		'\x34', '\x1B', '\x2', '\x19C', 'G', '\x3', '\x2', '\x2', '\x2', '\x19D',
		'\x19E', '\t', '\x4', '\x2', '\x2', '\x19E', 'I', '\x3', '\x2', '\x2',
		'\x2', '\x19F', '\x1A3', '\a', '(', '\x2', '\x2', '\x1A0', '\x1A2', '\x5',
		'L', '\'', '\x2', '\x1A1', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A2',
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A1', '\x3', '\x2', '\x2',
		'\x2', '\x1A3', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A6',
		'\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A3', '\x3', '\x2', '\x2', '\x2',
		'\x1A6', '\x1A7', '\a', ')', '\x2', '\x2', '\x1A7', 'K', '\x3', '\x2',
		'\x2', '\x2', '\x1A8', '\x1A9', '\x5', 'N', '(', '\x2', '\x1A9', '\x1AA',
		'\a', ',', '\x2', '\x2', '\x1AA', '\x1AD', '\x3', '\x2', '\x2', '\x2',
		'\x1AB', '\x1AD', '\x5', 'P', ')', '\x2', '\x1AC', '\x1A8', '\x3', '\x2',
		'\x2', '\x2', '\x1AC', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AD', 'M',
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1B0', '\a', 'Y', '\x2', '\x2',
		'\x1AF', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', '\x3',
		'\x2', '\x2', '\x2', '\x1B0', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B1',
		'\x1B3', '\x5', '\n', '\x6', '\x2', '\x1B2', '\x1B1', '\x3', '\x2', '\x2',
		'\x2', '\x1B3', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B2',
		'\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B5', '\x3', '\x2', '\x2', '\x2',
		'\x1B5', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B4', '\x3',
		'\x2', '\x2', '\x2', '\x1B7', '\x1B8', '\x5', '~', '@', '\x2', '\x1B8',
		'\x1B9', '\x5', '\x30', '\x19', '\x2', '\x1B9', 'O', '\x3', '\x2', '\x2',
		'\x2', '\x1BA', '\x1E8', '\x5', 'J', '&', '\x2', '\x1BB', '\x1BC', '\a',
		'\x5', '\x2', '\x2', '\x1BC', '\x1BD', '\x5', '^', '\x30', '\x2', '\x1BD',
		'\x1BE', '\x5', 'P', ')', '\x2', '\x1BE', '\x1E8', '\x3', '\x2', '\x2',
		'\x2', '\x1BF', '\x1C0', '\a', '\x11', '\x2', '\x2', '\x1C0', '\x1C1',
		'\x5', 'T', '+', '\x2', '\x1C1', '\x1C4', '\x5', 'P', ')', '\x2', '\x1C2',
		'\x1C3', '\a', '\v', '\x2', '\x2', '\x1C3', '\x1C5', '\x5', 'P', ')',
		'\x2', '\x1C4', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C5',
		'\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1E8', '\x3', '\x2', '\x2', '\x2',
		'\x1C6', '\x1C7', '\a', '\xE', '\x2', '\x2', '\x1C7', '\x1C8', '\a', '&',
		'\x2', '\x2', '\x1C8', '\x1C9', '\x5', 'R', '*', '\x2', '\x1C9', '\x1CA',
		'\a', '\'', '\x2', '\x2', '\x1CA', '\x1CB', '\x5', 'P', ')', '\x2', '\x1CB',
		'\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CD', '\a', '\xF', '\x2',
		'\x2', '\x1CD', '\x1CE', '\a', '&', '\x2', '\x2', '\x1CE', '\x1CF', '\x5',
		'R', '*', '\x2', '\x1CF', '\x1D0', '\a', '\'', '\x2', '\x2', '\x1D0',
		'\x1D1', '\x5', 'P', ')', '\x2', '\x1D1', '\x1E8', '\x3', '\x2', '\x2',
		'\x2', '\x1D2', '\x1D3', '\a', '\x1F', '\x2', '\x2', '\x1D3', '\x1D4',
		'\x5', 'T', '+', '\x2', '\x1D4', '\x1D5', '\x5', 'P', ')', '\x2', '\x1D5',
		'\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D7', '\a', '\b', '\x2',
		'\x2', '\x1D7', '\x1E8', '\x5', 'J', '&', '\x2', '\x1D8', '\x1D9', '\a',
		'\t', '\x2', '\x2', '\x1D9', '\x1E8', '\x5', 'J', '&', '\x2', '\x1DA',
		'\x1DC', '\a', '\x18', '\x2', '\x2', '\x1DB', '\x1DD', '\x5', '^', '\x30',
		'\x2', '\x1DC', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DD',
		'\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', '\x3', '\x2', '\x2', '\x2',
		'\x1DE', '\x1E8', '\a', ',', '\x2', '\x2', '\x1DF', '\x1E0', '\x5', '^',
		'\x30', '\x2', '\x1E0', '\x1E1', '\a', ',', '\x2', '\x2', '\x1E1', '\x1E8',
		'\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', '\a', 'Z', '\x2', '\x2',
		'\x1E3', '\x1E4', '\a', '\x35', '\x2', '\x2', '\x1E4', '\x1E8', '\x5',
		'P', ')', '\x2', '\x1E5', '\x1E6', '\a', 'Y', '\x2', '\x2', '\x1E6', '\x1E8',
		'\x5', 'P', ')', '\x2', '\x1E7', '\x1BA', '\x3', '\x2', '\x2', '\x2',
		'\x1E7', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1BF', '\x3',
		'\x2', '\x2', '\x2', '\x1E7', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1E7',
		'\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1D2', '\x3', '\x2', '\x2',
		'\x2', '\x1E7', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1D8',
		'\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1DA', '\x3', '\x2', '\x2', '\x2',
		'\x1E7', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E2', '\x3',
		'\x2', '\x2', '\x2', '\x1E7', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E8',
		'Q', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', '\x5', '~', '@', '\x2',
		'\x1EA', '\x1EB', '\x5', '\x34', '\x1B', '\x2', '\x1EB', '\x1EC', '\a',
		'\x12', '\x2', '\x2', '\x1EC', '\x1ED', '\x5', '^', '\x30', '\x2', '\x1ED',
		'S', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\a', '&', '\x2', '\x2',
		'\x1EF', '\x1F0', '\x5', '^', '\x30', '\x2', '\x1F0', '\x1F1', '\a', '\'',
		'\x2', '\x2', '\x1F1', 'U', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F7',
		'\x5', 'X', '-', '\x2', '\x1F3', '\x1F4', '\a', '-', '\x2', '\x2', '\x1F4',
		'\x1F6', '\x5', 'X', '-', '\x2', '\x1F5', '\x1F3', '\x3', '\x2', '\x2',
		'\x2', '\x1F6', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F5',
		'\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', '\x3', '\x2', '\x2', '\x2',
		'\x1F8', 'W', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1F7', '\x3', '\x2',
		'\x2', '\x2', '\x1FA', '\x1FB', '\a', 'Z', '\x2', '\x2', '\x1FB', '\x1FC',
		'\a', '\x35', '\x2', '\x2', '\x1FC', '\x1FD', '\x5', '^', '\x30', '\x2',
		'\x1FD', 'Y', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x203', '\x5', '^',
		'\x30', '\x2', '\x1FF', '\x200', '\a', '-', '\x2', '\x2', '\x200', '\x202',
		'\x5', '^', '\x30', '\x2', '\x201', '\x1FF', '\x3', '\x2', '\x2', '\x2',
		'\x202', '\x205', '\x3', '\x2', '\x2', '\x2', '\x203', '\x201', '\x3',
		'\x2', '\x2', '\x2', '\x203', '\x204', '\x3', '\x2', '\x2', '\x2', '\x204',
		'[', '\x3', '\x2', '\x2', '\x2', '\x205', '\x203', '\x3', '\x2', '\x2',
		'\x2', '\x206', '\x207', '\a', 'Z', '\x2', '\x2', '\x207', '\x209', '\a',
		'&', '\x2', '\x2', '\x208', '\x20A', '\x5', 'V', ',', '\x2', '\x209',
		'\x208', '\x3', '\x2', '\x2', '\x2', '\x209', '\x20A', '\x3', '\x2', '\x2',
		'\x2', '\x20A', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20C',
		'\a', '\'', '\x2', '\x2', '\x20C', ']', '\x3', '\x2', '\x2', '\x2', '\x20D',
		'\x20E', '\b', '\x30', '\x1', '\x2', '\x20E', '\x22D', '\x5', '\x66',
		'\x34', '\x2', '\x20F', '\x22D', '\x5', '\\', '/', '\x2', '\x210', '\x211',
		'\a', '\x15', '\x2', '\x2', '\x211', '\x22D', '\x5', 'j', '\x36', '\x2',
		'\x212', '\x213', '\a', '&', '\x2', '\x2', '\x213', '\x214', '\x5', '~',
		'@', '\x2', '\x214', '\x215', '\a', '\'', '\x2', '\x2', '\x215', '\x216',
		'\x5', '^', '\x30', '\x16', '\x216', '\x22D', '\x3', '\x2', '\x2', '\x2',
		'\x217', '\x218', '\t', '\x5', '\x2', '\x2', '\x218', '\x22D', '\x5',
		'^', '\x30', '\x14', '\x219', '\x21A', '\t', '\x6', '\x2', '\x2', '\x21A',
		'\x22D', '\x5', '^', '\x30', '\x13', '\x21B', '\x22D', '\x5', '`', '\x31',
		'\x2', '\x21C', '\x21D', '\x5', '~', '@', '\x2', '\x21D', '\x223', '\a',
		'R', '\x2', '\x2', '\x21E', '\x220', '\x5', '\x82', '\x42', '\x2', '\x21F',
		'\x21E', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x220', '\x3', '\x2', '\x2',
		'\x2', '\x220', '\x221', '\x3', '\x2', '\x2', '\x2', '\x221', '\x224',
		'\a', 'Z', '\x2', '\x2', '\x222', '\x224', '\a', '\x15', '\x2', '\x2',
		'\x223', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x223', '\x222', '\x3',
		'\x2', '\x2', '\x2', '\x224', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x225',
		'\x226', '\x5', 'h', '\x35', '\x2', '\x226', '\x228', '\a', 'R', '\x2',
		'\x2', '\x227', '\x229', '\x5', '\x82', '\x42', '\x2', '\x228', '\x227',
		'\x3', '\x2', '\x2', '\x2', '\x228', '\x229', '\x3', '\x2', '\x2', '\x2',
		'\x229', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x22B', '\a',
		'\x15', '\x2', '\x2', '\x22B', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x22C',
		'\x20D', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x20F', '\x3', '\x2', '\x2',
		'\x2', '\x22C', '\x210', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x212',
		'\x3', '\x2', '\x2', '\x2', '\x22C', '\x217', '\x3', '\x2', '\x2', '\x2',
		'\x22C', '\x219', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x21B', '\x3',
		'\x2', '\x2', '\x2', '\x22C', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x22C',
		'\x225', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x27B', '\x3', '\x2', '\x2',
		'\x2', '\x22E', '\x22F', '\f', '\x12', '\x2', '\x2', '\x22F', '\x230',
		'\t', '\a', '\x2', '\x2', '\x230', '\x27A', '\x5', '^', '\x30', '\x13',
		'\x231', '\x232', '\f', '\x11', '\x2', '\x2', '\x232', '\x233', '\t',
		'\b', '\x2', '\x2', '\x233', '\x27A', '\x5', '^', '\x30', '\x12', '\x234',
		'\x23C', '\f', '\x10', '\x2', '\x2', '\x235', '\x236', '\a', '\x31', '\x2',
		'\x2', '\x236', '\x23D', '\a', '\x31', '\x2', '\x2', '\x237', '\x238',
		'\a', '\x30', '\x2', '\x2', '\x238', '\x239', '\a', '\x30', '\x2', '\x2',
		'\x239', '\x23D', '\a', '\x30', '\x2', '\x2', '\x23A', '\x23B', '\a',
		'\x30', '\x2', '\x2', '\x23B', '\x23D', '\a', '\x30', '\x2', '\x2', '\x23C',
		'\x235', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x237', '\x3', '\x2', '\x2',
		'\x2', '\x23C', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x23E',
		'\x3', '\x2', '\x2', '\x2', '\x23E', '\x27A', '\x5', '^', '\x30', '\x11',
		'\x23F', '\x240', '\f', '\xF', '\x2', '\x2', '\x240', '\x241', '\t', '\t',
		'\x2', '\x2', '\x241', '\x27A', '\x5', '^', '\x30', '\x10', '\x242', '\x243',
		'\f', '\xE', '\x2', '\x2', '\x243', '\x244', '\t', '\n', '\x2', '\x2',
		'\x244', '\x27A', '\x5', '^', '\x30', '\xF', '\x245', '\x246', '\f', '\r',
		'\x2', '\x2', '\x246', '\x247', '\a', '\x42', '\x2', '\x2', '\x247', '\x27A',
		'\x5', '^', '\x30', '\xE', '\x248', '\x249', '\f', '\f', '\x2', '\x2',
		'\x249', '\x24A', '\a', '\x44', '\x2', '\x2', '\x24A', '\x27A', '\x5',
		'^', '\x30', '\r', '\x24B', '\x24C', '\f', '\v', '\x2', '\x2', '\x24C',
		'\x24D', '\a', '\x43', '\x2', '\x2', '\x24D', '\x27A', '\x5', '^', '\x30',
		'\f', '\x24E', '\x24F', '\f', '\n', '\x2', '\x2', '\x24F', '\x250', '\a',
		':', '\x2', '\x2', '\x250', '\x27A', '\x5', '^', '\x30', '\v', '\x251',
		'\x252', '\f', '\t', '\x2', '\x2', '\x252', '\x253', '\a', ';', '\x2',
		'\x2', '\x253', '\x27A', '\x5', '^', '\x30', '\n', '\x254', '\x255', '\f',
		'\b', '\x2', '\x2', '\x255', '\x256', '\a', '\x34', '\x2', '\x2', '\x256',
		'\x257', '\x5', '^', '\x30', '\x2', '\x257', '\x258', '\a', '\x35', '\x2',
		'\x2', '\x258', '\x259', '\x5', '^', '\x30', '\t', '\x259', '\x27A', '\x3',
		'\x2', '\x2', '\x2', '\x25A', '\x25B', '\f', '\a', '\x2', '\x2', '\x25B',
		'\x25C', '\a', 'U', '\x2', '\x2', '\x25C', '\x27A', '\x5', '^', '\x30',
		'\a', '\x25D', '\x25E', '\f', '\x1A', '\x2', '\x2', '\x25E', '\x26A',
		'\a', '.', '\x2', '\x2', '\x25F', '\x26B', '\a', 'Z', '\x2', '\x2', '\x260',
		'\x26B', '\x5', '\\', '/', '\x2', '\x261', '\x26B', '\a', '\x1C', '\x2',
		'\x2', '\x262', '\x264', '\a', '\x15', '\x2', '\x2', '\x263', '\x265',
		'\x5', 'z', '>', '\x2', '\x264', '\x263', '\x3', '\x2', '\x2', '\x2',
		'\x264', '\x265', '\x3', '\x2', '\x2', '\x2', '\x265', '\x266', '\x3',
		'\x2', '\x2', '\x2', '\x266', '\x26B', '\x5', 'n', '\x38', '\x2', '\x267',
		'\x268', '\a', '\x1B', '\x2', '\x2', '\x268', '\x26B', '\x5', '\x84',
		'\x43', '\x2', '\x269', '\x26B', '\x5', 't', ';', '\x2', '\x26A', '\x25F',
		'\x3', '\x2', '\x2', '\x2', '\x26A', '\x260', '\x3', '\x2', '\x2', '\x2',
		'\x26A', '\x261', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x262', '\x3',
		'\x2', '\x2', '\x2', '\x26A', '\x267', '\x3', '\x2', '\x2', '\x2', '\x26A',
		'\x269', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x27A', '\x3', '\x2', '\x2',
		'\x2', '\x26C', '\x26D', '\f', '\x19', '\x2', '\x2', '\x26D', '\x26E',
		'\a', '*', '\x2', '\x2', '\x26E', '\x26F', '\x5', '^', '\x30', '\x2',
		'\x26F', '\x270', '\a', '+', '\x2', '\x2', '\x270', '\x27A', '\x3', '\x2',
		'\x2', '\x2', '\x271', '\x272', '\f', '\x15', '\x2', '\x2', '\x272', '\x27A',
		'\t', '\v', '\x2', '\x2', '\x273', '\x274', '\f', '\x5', '\x2', '\x2',
		'\x274', '\x276', '\a', 'R', '\x2', '\x2', '\x275', '\x277', '\x5', '\x82',
		'\x42', '\x2', '\x276', '\x275', '\x3', '\x2', '\x2', '\x2', '\x276',
		'\x277', '\x3', '\x2', '\x2', '\x2', '\x277', '\x278', '\x3', '\x2', '\x2',
		'\x2', '\x278', '\x27A', '\a', 'Z', '\x2', '\x2', '\x279', '\x22E', '\x3',
		'\x2', '\x2', '\x2', '\x279', '\x231', '\x3', '\x2', '\x2', '\x2', '\x279',
		'\x234', '\x3', '\x2', '\x2', '\x2', '\x279', '\x23F', '\x3', '\x2', '\x2',
		'\x2', '\x279', '\x242', '\x3', '\x2', '\x2', '\x2', '\x279', '\x245',
		'\x3', '\x2', '\x2', '\x2', '\x279', '\x248', '\x3', '\x2', '\x2', '\x2',
		'\x279', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x279', '\x24E', '\x3',
		'\x2', '\x2', '\x2', '\x279', '\x251', '\x3', '\x2', '\x2', '\x2', '\x279',
		'\x254', '\x3', '\x2', '\x2', '\x2', '\x279', '\x25A', '\x3', '\x2', '\x2',
		'\x2', '\x279', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x279', '\x26C',
		'\x3', '\x2', '\x2', '\x2', '\x279', '\x271', '\x3', '\x2', '\x2', '\x2',
		'\x279', '\x273', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x27D', '\x3',
		'\x2', '\x2', '\x2', '\x27B', '\x279', '\x3', '\x2', '\x2', '\x2', '\x27B',
		'\x27C', '\x3', '\x2', '\x2', '\x2', '\x27C', '_', '\x3', '\x2', '\x2',
		'\x2', '\x27D', '\x27B', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27F',
		'\x5', '\x62', '\x32', '\x2', '\x27F', '\x280', '\a', 'Q', '\x2', '\x2',
		'\x280', '\x281', '\x5', '\x64', '\x33', '\x2', '\x281', '\x61', '\x3',
		'\x2', '\x2', '\x2', '\x282', '\x293', '\a', 'Z', '\x2', '\x2', '\x283',
		'\x285', '\a', '&', '\x2', '\x2', '\x284', '\x286', '\x5', '@', '!', '\x2',
		'\x285', '\x284', '\x3', '\x2', '\x2', '\x2', '\x285', '\x286', '\x3',
		'\x2', '\x2', '\x2', '\x286', '\x287', '\x3', '\x2', '\x2', '\x2', '\x287',
		'\x293', '\a', '\'', '\x2', '\x2', '\x288', '\x289', '\a', '&', '\x2',
		'\x2', '\x289', '\x28E', '\a', 'Z', '\x2', '\x2', '\x28A', '\x28B', '\a',
		'-', '\x2', '\x2', '\x28B', '\x28D', '\a', 'Z', '\x2', '\x2', '\x28C',
		'\x28A', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x290', '\x3', '\x2', '\x2',
		'\x2', '\x28E', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x28F',
		'\x3', '\x2', '\x2', '\x2', '\x28F', '\x291', '\x3', '\x2', '\x2', '\x2',
		'\x290', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x291', '\x293', '\a',
		'\'', '\x2', '\x2', '\x292', '\x282', '\x3', '\x2', '\x2', '\x2', '\x292',
		'\x283', '\x3', '\x2', '\x2', '\x2', '\x292', '\x288', '\x3', '\x2', '\x2',
		'\x2', '\x293', '\x63', '\x3', '\x2', '\x2', '\x2', '\x294', '\x297',
		'\x5', '^', '\x30', '\x2', '\x295', '\x297', '\x5', 'J', '&', '\x2', '\x296',
		'\x294', '\x3', '\x2', '\x2', '\x2', '\x296', '\x295', '\x3', '\x2', '\x2',
		'\x2', '\x297', '\x65', '\x3', '\x2', '\x2', '\x2', '\x298', '\x299',
		'\a', '&', '\x2', '\x2', '\x299', '\x29A', '\x5', '^', '\x30', '\x2',
		'\x29A', '\x29B', '\a', '\'', '\x2', '\x2', '\x29B', '\x2AB', '\x3', '\x2',
		'\x2', '\x2', '\x29C', '\x2AB', '\a', '\x1C', '\x2', '\x2', '\x29D', '\x2AB',
		'\a', '\x1B', '\x2', '\x2', '\x29E', '\x2AB', '\x5', 'H', '%', '\x2',
		'\x29F', '\x2AB', '\a', 'Z', '\x2', '\x2', '\x2A0', '\x2A1', '\x5', '&',
		'\x14', '\x2', '\x2A1', '\x2A2', '\a', '.', '\x2', '\x2', '\x2A2', '\x2A3',
		'\a', '\x4', '\x2', '\x2', '\x2A3', '\x2AB', '\x3', '\x2', '\x2', '\x2',
		'\x2A4', '\x2A8', '\x5', 'z', '>', '\x2', '\x2A5', '\x2A9', '\x5', '\x86',
		'\x44', '\x2', '\x2A6', '\x2A7', '\a', '\x1C', '\x2', '\x2', '\x2A7',
		'\x2A9', '\x5', '\x88', '\x45', '\x2', '\x2A8', '\x2A5', '\x3', '\x2',
		'\x2', '\x2', '\x2A8', '\x2A6', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AB',
		'\x3', '\x2', '\x2', '\x2', '\x2AA', '\x298', '\x3', '\x2', '\x2', '\x2',
		'\x2AA', '\x29C', '\x3', '\x2', '\x2', '\x2', '\x2AA', '\x29D', '\x3',
		'\x2', '\x2', '\x2', '\x2AA', '\x29E', '\x3', '\x2', '\x2', '\x2', '\x2AA',
		'\x29F', '\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2A0', '\x3', '\x2', '\x2',
		'\x2', '\x2AA', '\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2AB', 'g', '\x3',
		'\x2', '\x2', '\x2', '\x2AC', '\x2AD', '\x5', ':', '\x1E', '\x2', '\x2AD',
		'\x2AE', '\a', '.', '\x2', '\x2', '\x2AE', '\x2B0', '\x3', '\x2', '\x2',
		'\x2', '\x2AF', '\x2AC', '\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2B0',
		'\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2B1', '\x3', '\x2', '\x2', '\x2',
		'\x2B1', '\x2B3', '\a', 'Z', '\x2', '\x2', '\x2B2', '\x2B4', '\x5', '\x82',
		'\x42', '\x2', '\x2B3', '\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B3',
		'\x2B4', '\x3', '\x2', '\x2', '\x2', '\x2B4', 'i', '\x3', '\x2', '\x2',
		'\x2', '\x2B5', '\x2B6', '\x5', 'z', '>', '\x2', '\x2B6', '\x2B7', '\x5',
		'l', '\x37', '\x2', '\x2B7', '\x2B8', '\x5', 'r', ':', '\x2', '\x2B8',
		'\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2BC', '\x5', 'l', '\x37',
		'\x2', '\x2BA', '\x2BD', '\x5', 'p', '\x39', '\x2', '\x2BB', '\x2BD',
		'\x5', 'r', ':', '\x2', '\x2BC', '\x2BA', '\x3', '\x2', '\x2', '\x2',
		'\x2BC', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2BF', '\x3',
		'\x2', '\x2', '\x2', '\x2BE', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2BE',
		'\x2B9', '\x3', '\x2', '\x2', '\x2', '\x2BF', 'k', '\x3', '\x2', '\x2',
		'\x2', '\x2C0', '\x2C2', '\a', 'Z', '\x2', '\x2', '\x2C1', '\x2C3', '\x5',
		'v', '<', '\x2', '\x2C2', '\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2C2',
		'\x2C3', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2CB', '\x3', '\x2', '\x2',
		'\x2', '\x2C4', '\x2C5', '\a', '.', '\x2', '\x2', '\x2C5', '\x2C7', '\a',
		'Z', '\x2', '\x2', '\x2C6', '\x2C8', '\x5', 'v', '<', '\x2', '\x2C7',
		'\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2C8', '\x3', '\x2', '\x2',
		'\x2', '\x2C8', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2C4',
		'\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2CD', '\x3', '\x2', '\x2', '\x2',
		'\x2CB', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2CC', '\x3',
		'\x2', '\x2', '\x2', '\x2CC', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2CD',
		'\x2CB', '\x3', '\x2', '\x2', '\x2', '\x2CE', '\x2D0', '\x5', '\x80',
		'\x41', '\x2', '\x2CF', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2CF',
		'\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2D0', 'm', '\x3', '\x2', '\x2',
		'\x2', '\x2D1', '\x2D3', '\a', 'Z', '\x2', '\x2', '\x2D2', '\x2D4', '\x5',
		'x', '=', '\x2', '\x2D3', '\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D3',
		'\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2D5', '\x3', '\x2', '\x2',
		'\x2', '\x2D5', '\x2D6', '\x5', 'r', ':', '\x2', '\x2D6', 'o', '\x3',
		'\x2', '\x2', '\x2', '\x2D7', '\x2F3', '\a', '*', '\x2', '\x2', '\x2D8',
		'\x2DD', '\a', '+', '\x2', '\x2', '\x2D9', '\x2DA', '\a', '*', '\x2',
		'\x2', '\x2DA', '\x2DC', '\a', '+', '\x2', '\x2', '\x2DB', '\x2D9', '\x3',
		'\x2', '\x2', '\x2', '\x2DC', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2DD',
		'\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2DE', '\x3', '\x2', '\x2',
		'\x2', '\x2DE', '\x2E0', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2DD',
		'\x3', '\x2', '\x2', '\x2', '\x2E0', '\x2F4', '\x5', '\x38', '\x1D', '\x2',
		'\x2E1', '\x2E2', '\x5', '^', '\x30', '\x2', '\x2E2', '\x2E9', '\a', '+',
		'\x2', '\x2', '\x2E3', '\x2E4', '\a', '*', '\x2', '\x2', '\x2E4', '\x2E5',
		'\x5', '^', '\x30', '\x2', '\x2E5', '\x2E6', '\a', '+', '\x2', '\x2',
		'\x2E6', '\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2E3', '\x3',
		'\x2', '\x2', '\x2', '\x2E8', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x2E9',
		'\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2EA', '\x3', '\x2', '\x2',
		'\x2', '\x2EA', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2E9',
		'\x3', '\x2', '\x2', '\x2', '\x2EC', '\x2ED', '\a', '*', '\x2', '\x2',
		'\x2ED', '\x2EF', '\a', '+', '\x2', '\x2', '\x2EE', '\x2EC', '\x3', '\x2',
		'\x2', '\x2', '\x2EF', '\x2F2', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2EE',
		'\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2F1', '\x3', '\x2', '\x2', '\x2',
		'\x2F1', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2F2', '\x2F0', '\x3',
		'\x2', '\x2', '\x2', '\x2F3', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2F3',
		'\x2E1', '\x3', '\x2', '\x2', '\x2', '\x2F4', 'q', '\x3', '\x2', '\x2',
		'\x2', '\x2F5', '\x2F7', '\x5', '\x88', '\x45', '\x2', '\x2F6', '\x2F8',
		'\x5', '\x1C', '\xF', '\x2', '\x2F7', '\x2F6', '\x3', '\x2', '\x2', '\x2',
		'\x2F7', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2F8', 's', '\x3', '\x2',
		'\x2', '\x2', '\x2F9', '\x2FA', '\x5', 'z', '>', '\x2', '\x2FA', '\x2FB',
		'\x5', '\x86', '\x44', '\x2', '\x2FB', 'u', '\x3', '\x2', '\x2', '\x2',
		'\x2FC', '\x2FD', '\a', '\x31', '\x2', '\x2', '\x2FD', '\x300', '\a',
		'\x30', '\x2', '\x2', '\x2FE', '\x300', '\x5', '\x82', '\x42', '\x2',
		'\x2FF', '\x2FC', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x2FE', '\x3',
		'\x2', '\x2', '\x2', '\x300', 'w', '\x3', '\x2', '\x2', '\x2', '\x301',
		'\x302', '\a', '\x31', '\x2', '\x2', '\x302', '\x305', '\a', '\x30', '\x2',
		'\x2', '\x303', '\x305', '\x5', 'z', '>', '\x2', '\x304', '\x301', '\x3',
		'\x2', '\x2', '\x2', '\x304', '\x303', '\x3', '\x2', '\x2', '\x2', '\x305',
		'y', '\x3', '\x2', '\x2', '\x2', '\x306', '\x307', '\a', '\x31', '\x2',
		'\x2', '\x307', '\x308', '\x5', '|', '?', '\x2', '\x308', '\x309', '\a',
		'\x30', '\x2', '\x2', '\x309', '{', '\x3', '\x2', '\x2', '\x2', '\x30A',
		'\x30F', '\x5', '~', '@', '\x2', '\x30B', '\x30C', '\a', '-', '\x2', '\x2',
		'\x30C', '\x30E', '\x5', '~', '@', '\x2', '\x30D', '\x30B', '\x3', '\x2',
		'\x2', '\x2', '\x30E', '\x311', '\x3', '\x2', '\x2', '\x2', '\x30F', '\x30D',
		'\x3', '\x2', '\x2', '\x2', '\x30F', '\x310', '\x3', '\x2', '\x2', '\x2',
		'\x310', '}', '\x3', '\x2', '\x2', '\x2', '\x311', '\x30F', '\x3', '\x2',
		'\x2', '\x2', '\x312', '\x315', '\x5', ':', '\x1E', '\x2', '\x313', '\x315',
		'\x5', '\x80', '\x41', '\x2', '\x314', '\x312', '\x3', '\x2', '\x2', '\x2',
		'\x314', '\x313', '\x3', '\x2', '\x2', '\x2', '\x315', '\x31A', '\x3',
		'\x2', '\x2', '\x2', '\x316', '\x317', '\a', '*', '\x2', '\x2', '\x317',
		'\x319', '\a', '+', '\x2', '\x2', '\x318', '\x316', '\x3', '\x2', '\x2',
		'\x2', '\x319', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x318',
		'\x3', '\x2', '\x2', '\x2', '\x31A', '\x31B', '\x3', '\x2', '\x2', '\x2',
		'\x31B', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x31A', '\x3',
		'\x2', '\x2', '\x2', '\x31D', '\x31E', '\t', '\f', '\x2', '\x2', '\x31E',
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x320', '\a', '\x31', '\x2',
		'\x2', '\x320', '\x325', '\x5', '<', '\x1F', '\x2', '\x321', '\x322',
		'\a', '-', '\x2', '\x2', '\x322', '\x324', '\x5', '<', '\x1F', '\x2',
		'\x323', '\x321', '\x3', '\x2', '\x2', '\x2', '\x324', '\x327', '\x3',
		'\x2', '\x2', '\x2', '\x325', '\x323', '\x3', '\x2', '\x2', '\x2', '\x325',
		'\x326', '\x3', '\x2', '\x2', '\x2', '\x326', '\x328', '\x3', '\x2', '\x2',
		'\x2', '\x327', '\x325', '\x3', '\x2', '\x2', '\x2', '\x328', '\x329',
		'\a', '\x30', '\x2', '\x2', '\x329', '\x83', '\x3', '\x2', '\x2', '\x2',
		'\x32A', '\x331', '\x5', '\x88', '\x45', '\x2', '\x32B', '\x32C', '\a',
		'.', '\x2', '\x2', '\x32C', '\x32E', '\a', 'Z', '\x2', '\x2', '\x32D',
		'\x32F', '\x5', '\x88', '\x45', '\x2', '\x32E', '\x32D', '\x3', '\x2',
		'\x2', '\x2', '\x32E', '\x32F', '\x3', '\x2', '\x2', '\x2', '\x32F', '\x331',
		'\x3', '\x2', '\x2', '\x2', '\x330', '\x32A', '\x3', '\x2', '\x2', '\x2',
		'\x330', '\x32B', '\x3', '\x2', '\x2', '\x2', '\x331', '\x85', '\x3',
		'\x2', '\x2', '\x2', '\x332', '\x333', '\a', '\x1B', '\x2', '\x2', '\x333',
		'\x337', '\x5', '\x84', '\x43', '\x2', '\x334', '\x335', '\a', 'Z', '\x2',
		'\x2', '\x335', '\x337', '\x5', '\x88', '\x45', '\x2', '\x336', '\x332',
		'\x3', '\x2', '\x2', '\x2', '\x336', '\x334', '\x3', '\x2', '\x2', '\x2',
		'\x337', '\x87', '\x3', '\x2', '\x2', '\x2', '\x338', '\x33A', '\a', '&',
		'\x2', '\x2', '\x339', '\x33B', '\x5', 'Z', '.', '\x2', '\x33A', '\x339',
		'\x3', '\x2', '\x2', '\x2', '\x33A', '\x33B', '\x3', '\x2', '\x2', '\x2',
		'\x33B', '\x33C', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x33D', '\a',
		'\'', '\x2', '\x2', '\x33D', '\x89', '\x3', '\x2', '\x2', '\x2', ']',
		'\x8D', '\x92', '\x95', '\x99', '\xA5', '\xA9', '\xAD', '\xB9', '\xC1',
		'\xC8', '\xCF', '\xD8', '\xDD', '\xE0', '\xE6', '\xED', '\xF3', '\xF7',
		'\x100', '\x109', '\x110', '\x114', '\x129', '\x12F', '\x136', '\x13B',
		'\x143', '\x147', '\x149', '\x153', '\x155', '\x159', '\x162', '\x169',
		'\x16E', '\x175', '\x17A', '\x17D', '\x182', '\x18B', '\x196', '\x1A3',
		'\x1AC', '\x1AF', '\x1B4', '\x1C4', '\x1DC', '\x1E7', '\x1F7', '\x203',
		'\x209', '\x21F', '\x223', '\x228', '\x22C', '\x23C', '\x264', '\x26A',
		'\x276', '\x279', '\x27B', '\x285', '\x28E', '\x292', '\x296', '\x2A8',
		'\x2AA', '\x2AF', '\x2B3', '\x2BC', '\x2BE', '\x2C2', '\x2C7', '\x2CB',
		'\x2CF', '\x2D3', '\x2DD', '\x2E9', '\x2F0', '\x2F3', '\x2F7', '\x2FF',
		'\x304', '\x30F', '\x314', '\x31A', '\x325', '\x32E', '\x330', '\x336',
		'\x33A',
	};

		public static readonly ATN _ATN =
			new ATNDeserializer().Deserialize(_serializedATN);


	}
}