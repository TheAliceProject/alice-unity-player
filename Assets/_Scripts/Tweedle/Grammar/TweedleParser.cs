//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/daniel/dev/alice/alice/core/tweedle/src/main/antlr4/org/alice/tweedle/TweedleParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Alice.Tweedle {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class TweedleParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BOOLEAN=1, CLASS=2, COUNT_UP_TO=3, CONSTANT=4, DECIMAL_NUMBER=5, DO_IN_ORDER=6, 
		DO_TOGETHER=7, EACH=8, ELSE=9, ENUM=10, EXTENDS=11, FOR_EACH=12, EACH_TOGETHER=13, 
		COMPLETELY_HIDDEN=14, IF=15, IN=16, LOOP=17, MODELS=18, NEW=19, NUMBER=20, 
		PRIME_TIME=21, RETURN=22, STATIC=23, SUPER=24, THIS=25, TEXT_STRING=26, 
		TUCKED_AWAY=27, VOID=28, WHILE=29, WHOLE_NUMBER=30, DECIMAL_LITERAL=31, 
		FLOAT_LITERAL=32, BOOL_LITERAL=33, STRING_LITERAL=34, NULL_LITERAL=35, 
		LPAREN=36, RPAREN=37, LBRACE=38, RBRACE=39, LBRACK=40, RBRACK=41, SEMI=42, 
		COMMA=43, DOT=44, ASSIGN=45, GT=46, LT=47, BANG=48, TILDE=49, QUESTION=50, 
		COLON=51, EQUAL=52, LE=53, GE=54, NOTEQUAL=55, AND=56, OR=57, INC=58, 
		DEC=59, ADD=60, SUB=61, MUL=62, DIV=63, BITAND=64, BITOR=65, CARET=66, 
		MOD=67, ADD_ASSIGN=68, SUB_ASSIGN=69, MUL_ASSIGN=70, DIV_ASSIGN=71, AND_ASSIGN=72, 
		OR_ASSIGN=73, XOR_ASSIGN=74, MOD_ASSIGN=75, LSHIFT_ASSIGN=76, RSHIFT_ASSIGN=77, 
		URSHIFT_ASSIGN=78, ARROW=79, COLONCOLON=80, AT=81, ELLIPSIS=82, LARROW=83, 
		WS=84, COMMENT=85, LINE_COMMENT=86, NODE_DISABLE=87, NODE_ENABLE=88, IDENTIFIER=89;
	public const int
		RULE_typeDeclaration = 0, RULE_classModifier = 1, RULE_visibility = 2, 
		RULE_visibilityLevel = 3, RULE_variableModifier = 4, RULE_classDeclaration = 5, 
		RULE_identifier = 6, RULE_enumDeclaration = 7, RULE_enumConstants = 8, 
		RULE_enumConstant = 9, RULE_classBody = 10, RULE_classBodyDeclaration = 11, 
		RULE_memberDeclaration = 12, RULE_methodDeclaration = 13, RULE_methodBody = 14, 
		RULE_typeTypeOrVoid = 15, RULE_constructorDeclaration = 16, RULE_fieldDeclaration = 17, 
		RULE_variableDeclarator = 18, RULE_variableDeclaratorId = 19, RULE_variableInitializer = 20, 
		RULE_arrayInitializer = 21, RULE_classOrInterfaceType = 22, RULE_formalParameters = 23, 
		RULE_formalParameterList = 24, RULE_requiredParameter = 25, RULE_optionalParameter = 26, 
		RULE_lastFormalParameter = 27, RULE_literal = 28, RULE_block = 29, RULE_blockStatement = 30, 
		RULE_localVariableDeclaration = 31, RULE_statement = 32, RULE_forControl = 33, 
		RULE_parExpression = 34, RULE_labeledExpressionList = 35, RULE_labeledExpression = 36, 
		RULE_methodCall = 37, RULE_expression = 38, RULE_lambdaExpression = 39, 
		RULE_lambdaParameters = 40, RULE_lambdaBody = 41, RULE_primary = 42, RULE_creator = 43, 
		RULE_createdName = 44, RULE_arrayCreatorRest = 45, RULE_classCreatorRest = 46, 
		RULE_typeType = 47, RULE_primitiveType = 48, RULE_superSuffix = 49, RULE_arguments = 50;
	public static readonly string[] ruleNames = {
		"typeDeclaration", "classModifier", "visibility", "visibilityLevel", "variableModifier", 
		"classDeclaration", "identifier", "enumDeclaration", "enumConstants", 
		"enumConstant", "classBody", "classBodyDeclaration", "memberDeclaration", 
		"methodDeclaration", "methodBody", "typeTypeOrVoid", "constructorDeclaration", 
		"fieldDeclaration", "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
		"arrayInitializer", "classOrInterfaceType", "formalParameters", "formalParameterList", 
		"requiredParameter", "optionalParameter", "lastFormalParameter", "literal", 
		"block", "blockStatement", "localVariableDeclaration", "statement", "forControl", 
		"parExpression", "labeledExpressionList", "labeledExpression", "methodCall", 
		"expression", "lambdaExpression", "lambdaParameters", "lambdaBody", "primary", 
		"creator", "createdName", "arrayCreatorRest", "classCreatorRest", "typeType", 
		"primitiveType", "superSuffix", "arguments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Boolean'", "'class'", "'countUpTo'", "'constant'", "'DecimalNumber'", 
		"'doInOrder'", "'doTogether'", "'each'", "'else'", "'enum'", "'extends'", 
		"'forEach'", "'eachTogether'", "'CompletelyHidden'", "'if'", "'in'", "'loop'", 
		"'models'", "'new'", "'Number'", "'PrimeTime'", "'return'", "'static'", 
		"'super'", "'this'", "'TextString'", "'TuckedAway'", "'void'", "'while'", 
		"'WholeNumber'", null, null, null, null, "'null'", "'('", "')'", "'{'", 
		"'}'", "'['", "']'", "';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", 
		"'~'", "'?'", "':'", "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", 
		"'--'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", 
		"'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", 
		"'>>>='", "'->'", "'::'", "'@'", "'...'", "'<-'", null, null, null, "'*<'", 
		"'>*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BOOLEAN", "CLASS", "COUNT_UP_TO", "CONSTANT", "DECIMAL_NUMBER", 
		"DO_IN_ORDER", "DO_TOGETHER", "EACH", "ELSE", "ENUM", "EXTENDS", "FOR_EACH", 
		"EACH_TOGETHER", "COMPLETELY_HIDDEN", "IF", "IN", "LOOP", "MODELS", "NEW", 
		"NUMBER", "PRIME_TIME", "RETURN", "STATIC", "SUPER", "THIS", "TEXT_STRING", 
		"TUCKED_AWAY", "VOID", "WHILE", "WHOLE_NUMBER", "DECIMAL_LITERAL", "FLOAT_LITERAL", 
		"BOOL_LITERAL", "STRING_LITERAL", "NULL_LITERAL", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", 
		"GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", "LE", "GE", 
		"NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", 
		"BITOR", "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
		"AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
		"RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "ARROW", "COLONCOLON", "AT", "ELLIPSIS", 
		"LARROW", "WS", "COMMENT", "LINE_COMMENT", "NODE_DISABLE", "NODE_ENABLE", 
		"IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TweedleParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TweedleParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TweedleParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TweedleParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 0, RULE_typeDeclaration);
		int _la;
		try {
			State = 113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
			case ENUM:
			case STATIC:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==STATIC || _la==AT) {
					{
					{
					State = 102; classModifier();
					}
					}
					State = 107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 110;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLASS:
					{
					State = 108; classDeclaration();
					}
					break;
				case ENUM:
					{
					State = 109; enumDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifierContext : ParserRuleContext {
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(TweedleParser.STATIC, 0); }
		public ClassModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterClassModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitClassModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifierContext classModifier() {
		ClassModifierContext _localctx = new ClassModifierContext(Context, State);
		EnterRule(_localctx, 2, RULE_classModifier);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115; visibility();
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; Match(STATIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public VisibilityLevelContext visibilityLevel() {
			return GetRuleContext<VisibilityLevelContext>(0);
		}
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 4, RULE_visibility);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; Match(AT);
			State = 120; visibilityLevel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityLevelContext : ParserRuleContext {
		public ITerminalNode COMPLETELY_HIDDEN() { return GetToken(TweedleParser.COMPLETELY_HIDDEN, 0); }
		public ITerminalNode TUCKED_AWAY() { return GetToken(TweedleParser.TUCKED_AWAY, 0); }
		public ITerminalNode PRIME_TIME() { return GetToken(TweedleParser.PRIME_TIME, 0); }
		public VisibilityLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibilityLevel; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterVisibilityLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitVisibilityLevel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibilityLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityLevelContext visibilityLevel() {
		VisibilityLevelContext _localctx = new VisibilityLevelContext(Context, State);
		EnterRule(_localctx, 6, RULE_visibilityLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMPLETELY_HIDDEN) | (1L << PRIME_TIME) | (1L << TUCKED_AWAY))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		public ITerminalNode CONSTANT() { return GetToken(TweedleParser.CONSTANT, 0); }
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_variableModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(CONSTANT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(TweedleParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ITerminalNode EXTENDS() { return GetToken(TweedleParser.EXTENDS, 0); }
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode MODELS() { return GetToken(TweedleParser.MODELS, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126; Match(CLASS);
			State = 127; identifier();
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 128; Match(EXTENDS);
				State = 129; typeType();
				}
			}

			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MODELS) {
				{
				State = 132; Match(MODELS);
				State = 133; Match(IDENTIFIER);
				}
			}

			State = 136; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(TweedleParser.ENUM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumConstantsContext enumConstants() {
			return GetRuleContext<EnumConstantsContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(ENUM);
			State = 141; identifier();
			State = 142; Match(LBRACE);
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 143; enumConstants();
				}
			}

			State = 146; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantsContext : ParserRuleContext {
		public EnumConstantContext[] enumConstant() {
			return GetRuleContexts<EnumConstantContext>();
		}
		public EnumConstantContext enumConstant(int i) {
			return GetRuleContext<EnumConstantContext>(i);
		}
		public EnumConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstants; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterEnumConstants(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitEnumConstants(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantsContext enumConstants() {
		EnumConstantsContext _localctx = new EnumConstantsContext(Context, State);
		EnterRule(_localctx, 16, RULE_enumConstants);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; enumConstant();
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 149; Match(COMMA);
				State = 150; enumConstant();
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public EnumConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterEnumConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitEnumConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantContext enumConstant() {
		EnumConstantContext _localctx = new EnumConstantContext(Context, State);
		EnterRule(_localctx, 18, RULE_enumConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; identifier();
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 157; arguments();
				}
			}

			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 160; classBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 20, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(LBRACE);
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << DECIMAL_NUMBER) | (1L << NUMBER) | (1L << STATIC) | (1L << TEXT_STRING) | (1L << VOID) | (1L << WHOLE_NUMBER) | (1L << SEMI))) != 0) || _la==AT || _la==IDENTIFIER) {
				{
				{
				State = 164; classBodyDeclaration();
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 170; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclarationContext : ParserRuleContext {
		public MemberDeclarationContext memberDeclaration() {
			return GetRuleContext<MemberDeclarationContext>(0);
		}
		public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBodyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclarationContext classBodyDeclaration() {
		ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_classBodyDeclaration);
		int _la;
		try {
			State = 180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMI:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172; Match(SEMI);
				}
				break;
			case BOOLEAN:
			case DECIMAL_NUMBER:
			case NUMBER:
			case STATIC:
			case TEXT_STRING:
			case VOID:
			case WHOLE_NUMBER:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==STATIC || _la==AT) {
					{
					{
					State = 173; classModifier();
					}
					}
					State = 178;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 179; memberDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_memberDeclaration);
		try {
			State = 185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182; methodDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; fieldDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 184; constructorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; typeTypeOrVoid();
			State = 188; Match(IDENTIFIER);
			State = 189; formalParameters();
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 190; Match(LBRACK);
				State = 191; Match(RBRACK);
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 197; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 28, RULE_methodBody);
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 199; block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 200; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeOrVoidContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(TweedleParser.VOID, 0); }
		public TypeTypeOrVoidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTypeOrVoid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterTypeTypeOrVoid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitTypeTypeOrVoid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeTypeOrVoid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeOrVoidContext typeTypeOrVoid() {
		TypeTypeOrVoidContext _localctx = new TypeTypeOrVoidContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeTypeOrVoid);
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case DECIMAL_NUMBER:
			case NUMBER:
			case TEXT_STRING:
			case WHOLE_NUMBER:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 203; typeType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 204; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public BlockContext constructorBody;
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_constructorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(IDENTIFIER);
			State = 208; formalParameters();
			State = 209; _localctx.constructorBody = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; typeType();
			State = 212; variableDeclarator();
			State = 213; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ITerminalNode LARROW() { return GetToken(TweedleParser.LARROW, 0); }
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 36, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; variableDeclaratorId();
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LARROW) {
				{
				State = 216; Match(LARROW);
				State = 217; variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaratorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 38, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(IDENTIFIER);
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 221; Match(LBRACK);
				State = 222; Match(RBRACK);
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 40, RULE_variableInitializer);
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 228; arrayInitializer();
				}
				break;
			case NEW:
			case SUPER:
			case THIS:
			case DECIMAL_LITERAL:
			case FLOAT_LITERAL:
			case BOOL_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case LPAREN:
			case BANG:
			case ADD:
			case SUB:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 42, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; Match(LBRACE);
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << SUPER) | (1L << THIS) | (1L << DECIMAL_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << BANG) | (1L << ADD) | (1L << SUB))) != 0) || _la==IDENTIFIER) {
				{
				State = 233; expression(0);
				State = 238;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 234; Match(COMMA);
						State = 235; expression(0);
						}
						} 
					}
					State = 240;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 241; Match(COMMA);
					}
				}

				}
			}

			State = 246; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_classOrInterfaceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 46, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; Match(LPAREN);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << DECIMAL_NUMBER) | (1L << NUMBER) | (1L << TEXT_STRING) | (1L << WHOLE_NUMBER))) != 0) || _la==IDENTIFIER) {
				{
				State = 251; formalParameterList();
				}
			}

			State = 254; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public RequiredParameterContext[] requiredParameter() {
			return GetRuleContexts<RequiredParameterContext>();
		}
		public RequiredParameterContext requiredParameter(int i) {
			return GetRuleContext<RequiredParameterContext>(i);
		}
		public OptionalParameterContext[] optionalParameter() {
			return GetRuleContexts<OptionalParameterContext>();
		}
		public OptionalParameterContext optionalParameter(int i) {
			return GetRuleContext<OptionalParameterContext>(i);
		}
		public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 48, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256; requiredParameter();
				State = 261;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 257; Match(COMMA);
						State = 258; requiredParameter();
						}
						} 
					}
					State = 263;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				}
				State = 268;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 264; Match(COMMA);
						State = 265; optionalParameter();
						}
						} 
					}
					State = 270;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 271; Match(COMMA);
					State = 272; lastFormalParameter();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275; optionalParameter();
				State = 280;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 276; Match(COMMA);
						State = 277; optionalParameter();
						}
						} 
					}
					State = 282;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				}
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 283; Match(COMMA);
					State = 284; lastFormalParameter();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 287; lastFormalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequiredParameterContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public RequiredParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requiredParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterRequiredParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitRequiredParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequiredParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequiredParameterContext requiredParameter() {
		RequiredParameterContext _localctx = new RequiredParameterContext(Context, State);
		EnterRule(_localctx, 50, RULE_requiredParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; typeType();
			State = 291; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionalParameterContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ITerminalNode LARROW() { return GetToken(TweedleParser.LARROW, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OptionalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterOptionalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitOptionalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionalParameterContext optionalParameter() {
		OptionalParameterContext _localctx = new OptionalParameterContext(Context, State);
		EnterRule(_localctx, 52, RULE_optionalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; typeType();
			State = 294; variableDeclaratorId();
			State = 295; Match(LARROW);
			State = 296; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterLastFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitLastFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterContext lastFormalParameter() {
		LastFormalParameterContext _localctx = new LastFormalParameterContext(Context, State);
		EnterRule(_localctx, 54, RULE_lastFormalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; typeType();
			State = 299; Match(ELLIPSIS);
			State = 300; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(TweedleParser.DECIMAL_LITERAL, 0); }
		public ITerminalNode FLOAT_LITERAL() { return GetToken(TweedleParser.FLOAT_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(TweedleParser.STRING_LITERAL, 0); }
		public ITerminalNode BOOL_LITERAL() { return GetToken(TweedleParser.BOOL_LITERAL, 0); }
		public ITerminalNode NULL_LITERAL() { return GetToken(TweedleParser.NULL_LITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 56, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DECIMAL_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(LBRACE);
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << COUNT_UP_TO) | (1L << CONSTANT) | (1L << DECIMAL_NUMBER) | (1L << DO_IN_ORDER) | (1L << DO_TOGETHER) | (1L << FOR_EACH) | (1L << EACH_TOGETHER) | (1L << IF) | (1L << NEW) | (1L << NUMBER) | (1L << RETURN) | (1L << SUPER) | (1L << THIS) | (1L << TEXT_STRING) | (1L << WHILE) | (1L << WHOLE_NUMBER) | (1L << DECIMAL_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << BANG) | (1L << ADD) | (1L << SUB))) != 0) || _la==NODE_DISABLE || _la==IDENTIFIER) {
				{
				{
				State = 305; blockStatement();
				}
				}
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 311; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode NODE_DISABLE() { return GetToken(TweedleParser.NODE_DISABLE, 0); }
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public ITerminalNode NODE_ENABLE() { return GetToken(TweedleParser.NODE_ENABLE, 0); }
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_blockStatement);
		try {
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 313; localVariableDeclaration();
				State = 314; Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 316; statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 317; Match(NODE_DISABLE);
				State = 318; blockStatement();
				State = 319; Match(NODE_ENABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		public ITerminalNode CONSTANT() { return GetToken(TweedleParser.CONSTANT, 0); }
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTANT) {
				{
				State = 323; Match(CONSTANT);
				}
			}

			State = 326; typeType();
			State = 327; variableDeclarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExpressionContext statementExpression;
		public ITerminalNode COUNT_UP_TO() { return GetToken(TweedleParser.COUNT_UP_TO, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode IF() { return GetToken(TweedleParser.IF, 0); }
		public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(TweedleParser.ELSE, 0); }
		public ITerminalNode FOR_EACH() { return GetToken(TweedleParser.FOR_EACH, 0); }
		public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		public ITerminalNode EACH_TOGETHER() { return GetToken(TweedleParser.EACH_TOGETHER, 0); }
		public ITerminalNode WHILE() { return GetToken(TweedleParser.WHILE, 0); }
		public ITerminalNode DO_IN_ORDER() { return GetToken(TweedleParser.DO_IN_ORDER, 0); }
		public ITerminalNode DO_TOGETHER() { return GetToken(TweedleParser.DO_TOGETHER, 0); }
		public ITerminalNode RETURN() { return GetToken(TweedleParser.RETURN, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 64, RULE_statement);
		int _la;
		try {
			State = 372;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COUNT_UP_TO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 329; Match(COUNT_UP_TO);
				State = 330; Match(LPAREN);
				State = 331; Match(IDENTIFIER);
				State = 332; Match(LT);
				State = 333; expression(0);
				State = 334; Match(RPAREN);
				State = 335; block();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 337; Match(IF);
				State = 338; parExpression();
				State = 339; block();
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 340; Match(ELSE);
					State = 341; block();
					}
				}

				}
				break;
			case FOR_EACH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 344; Match(FOR_EACH);
				State = 345; Match(LPAREN);
				State = 346; forControl();
				State = 347; Match(RPAREN);
				State = 348; block();
				}
				break;
			case EACH_TOGETHER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 350; Match(EACH_TOGETHER);
				State = 351; Match(LPAREN);
				State = 352; forControl();
				State = 353; Match(RPAREN);
				State = 354; block();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 356; Match(WHILE);
				State = 357; parExpression();
				State = 358; block();
				}
				break;
			case DO_IN_ORDER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 360; Match(DO_IN_ORDER);
				State = 361; block();
				}
				break;
			case DO_TOGETHER:
				EnterOuterAlt(_localctx, 7);
				{
				State = 362; Match(DO_TOGETHER);
				State = 363; block();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 8);
				{
				State = 364; Match(RETURN);
				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NEW) | (1L << SUPER) | (1L << THIS) | (1L << DECIMAL_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << BANG) | (1L << ADD) | (1L << SUB))) != 0) || _la==IDENTIFIER) {
					{
					State = 365; expression(0);
					}
				}

				State = 368; Match(SEMI);
				}
				break;
			case NEW:
			case SUPER:
			case THIS:
			case DECIMAL_LITERAL:
			case FLOAT_LITERAL:
			case BOOL_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case LPAREN:
			case BANG:
			case ADD:
			case SUB:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 9);
				{
				State = 369; _localctx.statementExpression = expression(0);
				State = 370; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TweedleParser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterForControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitForControl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 66, RULE_forControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374; typeType();
			State = 375; variableDeclaratorId();
			State = 376; Match(IN);
			State = 377; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterParExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitParExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParExpressionContext parExpression() {
		ParExpressionContext _localctx = new ParExpressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_parExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; Match(LPAREN);
			State = 380; expression(0);
			State = 381; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledExpressionListContext : ParserRuleContext {
		public LabeledExpressionContext[] labeledExpression() {
			return GetRuleContexts<LabeledExpressionContext>();
		}
		public LabeledExpressionContext labeledExpression(int i) {
			return GetRuleContext<LabeledExpressionContext>(i);
		}
		public LabeledExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledExpressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterLabeledExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitLabeledExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledExpressionListContext labeledExpressionList() {
		LabeledExpressionListContext _localctx = new LabeledExpressionListContext(Context, State);
		EnterRule(_localctx, 70, RULE_labeledExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383; labeledExpression();
			State = 388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 384; Match(COMMA);
				State = 385; labeledExpression();
				}
				}
				State = 390;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledExpressionContext : ParserRuleContext {
		public IToken expressionLabel;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public LabeledExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterLabeledExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitLabeledExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeledExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabeledExpressionContext labeledExpression() {
		LabeledExpressionContext _localctx = new LabeledExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_labeledExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; _localctx.expressionLabel = Match(IDENTIFIER);
			State = 392; Match(COLON);
			State = 393; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public LabeledExpressionListContext labeledExpressionList() {
			return GetRuleContext<LabeledExpressionListContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 74, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; Match(IDENTIFIER);
			State = 396; Match(LPAREN);
			State = 398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 397; labeledExpressionList();
				}
			}

			State = 400; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken prefix;
		public IToken bop;
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(TweedleParser.NEW, 0); }
		public CreatorContext creator() {
			return GetRuleContext<CreatorContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public ITerminalNode LARROW() { return GetToken(TweedleParser.LARROW, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 403; primary();
				}
				break;
			case 2:
				{
				State = 404; Match(NEW);
				State = 405; creator();
				}
				break;
			case 3:
				{
				State = 406;
				_localctx.prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==SUB) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 407; expression(10);
				}
				break;
			case 4:
				{
				State = 408; _localctx.prefix = Match(BANG);
				State = 409; expression(9);
				}
				break;
			case 5:
				{
				State = 410; lambdaExpression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 447;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 445;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 413;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 414;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (MUL - 62)) | (1L << (DIV - 62)) | (1L << (MOD - 62)))) != 0)) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 415; expression(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 416;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 417;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 418; expression(8);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 419;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 420;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << LE) | (1L << GE))) != 0)) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 421; expression(7);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 422;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 423;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 424; expression(6);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 425;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 426; _localctx.bop = Match(AND);
						State = 427; expression(5);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 428;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 429; _localctx.bop = Match(OR);
						State = 430; expression(4);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 431;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 432; _localctx.bop = Match(LARROW);
						State = 433; expression(2);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 434;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 435; _localctx.bop = Match(DOT);
						State = 438;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
						case 1:
							{
							State = 436; Match(IDENTIFIER);
							}
							break;
						case 2:
							{
							State = 437; methodCall();
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 440;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 441; Match(LBRACK);
						State = 442; expression(0);
						State = 443; Match(RBRACK);
						}
						break;
					}
					} 
				}
				State = 449;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		public LambdaParametersContext lambdaParameters() {
			return GetRuleContext<LambdaParametersContext>(0);
		}
		public LambdaBodyContext lambdaBody() {
			return GetRuleContext<LambdaBodyContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450; lambdaParameters();
			State = 451; Match(ARROW);
			State = 452; lambdaBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParametersContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(TweedleParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(TweedleParser.IDENTIFIER, i);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public LambdaParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterLambdaParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitLambdaParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParametersContext lambdaParameters() {
		LambdaParametersContext _localctx = new LambdaParametersContext(Context, State);
		EnterRule(_localctx, 80, RULE_lambdaParameters);
		int _la;
		try {
			State = 470;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 454; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 455; Match(LPAREN);
				State = 457;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << DECIMAL_NUMBER) | (1L << NUMBER) | (1L << TEXT_STRING) | (1L << WHOLE_NUMBER))) != 0) || _la==IDENTIFIER) {
					{
					State = 456; formalParameterList();
					}
				}

				State = 459; Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 460; Match(LPAREN);
				State = 461; Match(IDENTIFIER);
				State = 466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 462; Match(COMMA);
					State = 463; Match(IDENTIFIER);
					}
					}
					State = 468;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 469; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaBodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LambdaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterLambdaBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitLambdaBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaBodyContext lambdaBody() {
		LambdaBodyContext _localctx = new LambdaBodyContext(Context, State);
		EnterRule(_localctx, 82, RULE_lambdaBody);
		try {
			State = 474;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
			case SUPER:
			case THIS:
			case DECIMAL_LITERAL:
			case FLOAT_LITERAL:
			case BOOL_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case LPAREN:
			case BANG:
			case ADD:
			case SUB:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 472; expression(0);
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 473; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THIS() { return GetToken(TweedleParser.THIS, 0); }
		public ITerminalNode SUPER() { return GetToken(TweedleParser.SUPER, 0); }
		public SuperSuffixContext superSuffix() {
			return GetRuleContext<SuperSuffixContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 84, RULE_primary);
		try {
			State = 485;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 476; Match(LPAREN);
				State = 477; expression(0);
				State = 478; Match(RPAREN);
				}
				break;
			case THIS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 480; Match(THIS);
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 481; Match(SUPER);
				State = 482; superSuffix();
				}
				break;
			case DECIMAL_LITERAL:
			case FLOAT_LITERAL:
			case BOOL_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 483; literal();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 484; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatorContext : ParserRuleContext {
		public CreatedNameContext createdName() {
			return GetRuleContext<CreatedNameContext>(0);
		}
		public ArrayCreatorRestContext arrayCreatorRest() {
			return GetRuleContext<ArrayCreatorRestContext>(0);
		}
		public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		public CreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterCreator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitCreator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreatorContext creator() {
		CreatorContext _localctx = new CreatorContext(Context, State);
		EnterRule(_localctx, 86, RULE_creator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487; createdName();
			State = 490;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACK:
				{
				State = 488; arrayCreatorRest();
				}
				break;
			case LPAREN:
				{
				State = 489; classCreatorRest();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedNameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public CreatedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterCreatedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitCreatedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreatedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreatedNameContext createdName() {
		CreatedNameContext _localctx = new CreatedNameContext(Context, State);
		EnterRule(_localctx, 88, RULE_createdName);
		try {
			State = 494;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 492; Match(IDENTIFIER);
				}
				break;
			case BOOLEAN:
			case DECIMAL_NUMBER:
			case NUMBER:
			case TEXT_STRING:
			case WHOLE_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 493; primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreatorRestContext : ParserRuleContext {
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreatorRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterArrayCreatorRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitArrayCreatorRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreatorRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreatorRestContext arrayCreatorRest() {
		ArrayCreatorRestContext _localctx = new ArrayCreatorRestContext(Context, State);
		EnterRule(_localctx, 90, RULE_arrayCreatorRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496; Match(LBRACK);
			State = 502;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RBRACK:
				{
				State = 497; Match(RBRACK);
				State = 498; arrayInitializer();
				}
				break;
			case NEW:
			case SUPER:
			case THIS:
			case DECIMAL_LITERAL:
			case FLOAT_LITERAL:
			case BOOL_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case LPAREN:
			case BANG:
			case ADD:
			case SUB:
			case IDENTIFIER:
				{
				State = 499; expression(0);
				State = 500; Match(RBRACK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassCreatorRestContext : ParserRuleContext {
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classCreatorRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterClassCreatorRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitClassCreatorRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassCreatorRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassCreatorRestContext classCreatorRest() {
		ClassCreatorRestContext _localctx = new ClassCreatorRestContext(Context, State);
		EnterRule(_localctx, 92, RULE_classCreatorRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504; arguments();
			State = 506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 505; classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeContext : ParserRuleContext {
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterTypeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitTypeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeContext typeType() {
		TypeTypeContext _localctx = new TypeTypeContext(Context, State);
		EnterRule(_localctx, 94, RULE_typeType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 508; classOrInterfaceType();
				}
				break;
			case BOOLEAN:
			case DECIMAL_NUMBER:
			case NUMBER:
			case TEXT_STRING:
			case WHOLE_NUMBER:
				{
				State = 509; primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACK) {
				{
				State = 512; Match(LBRACK);
				State = 513; Match(RBRACK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(TweedleParser.BOOLEAN, 0); }
		public ITerminalNode DECIMAL_NUMBER() { return GetToken(TweedleParser.DECIMAL_NUMBER, 0); }
		public ITerminalNode WHOLE_NUMBER() { return GetToken(TweedleParser.WHOLE_NUMBER, 0); }
		public ITerminalNode NUMBER() { return GetToken(TweedleParser.NUMBER, 0); }
		public ITerminalNode TEXT_STRING() { return GetToken(TweedleParser.TEXT_STRING, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 96, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << DECIMAL_NUMBER) | (1L << NUMBER) | (1L << TEXT_STRING) | (1L << WHOLE_NUMBER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperSuffixContext : ParserRuleContext {
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public SuperSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterSuperSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitSuperSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperSuffixContext superSuffix() {
		SuperSuffixContext _localctx = new SuperSuffixContext(Context, State);
		EnterRule(_localctx, 98, RULE_superSuffix);
		try {
			State = 524;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 518; arguments();
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 519; Match(DOT);
				State = 520; Match(IDENTIFIER);
				State = 522;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
				case 1:
					{
					State = 521; arguments();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public LabeledExpressionListContext labeledExpressionList() {
			return GetRuleContext<LabeledExpressionListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweedleParserVisitor<TResult> typedVisitor = visitor as ITweedleParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 100, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526; Match(LPAREN);
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 527; labeledExpressionList();
				}
			}

			State = 530; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 38: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 12);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '[', '\x217', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x3', '\x2', '\a', '\x2', 'j', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'm', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 'q', '\n', 
		'\x2', '\x3', '\x2', '\x5', '\x2', 't', '\n', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', 'x', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x85', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x89', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x93', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x9A', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\x9D', '\v', '\n', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\xA1', '\n', '\v', '\x3', '\v', '\x5', '\v', 
		'\xA4', '\n', '\v', '\x3', '\f', '\x3', '\f', '\a', '\f', '\xA8', '\n', 
		'\f', '\f', '\f', '\xE', '\f', '\xAB', '\v', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xB1', '\n', '\r', '\f', 
		'\r', '\xE', '\r', '\xB4', '\v', '\r', '\x3', '\r', '\x5', '\r', '\xB7', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xBC', 
		'\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\a', '\xF', '\xC3', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xC6', 
		'\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\xCC', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\xD0', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xDD', '\n', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xE2', 
		'\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xE5', '\v', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x5', '\x16', '\xE9', '\n', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\xEF', '\n', 
		'\x17', '\f', '\x17', '\xE', '\x17', '\xF2', '\v', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\xF5', '\n', '\x17', '\x5', '\x17', '\xF7', '\n', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\xFF', '\n', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x106', 
		'\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x109', '\v', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\a', '\x1A', '\x10D', '\n', '\x1A', '\f', '\x1A', 
		'\xE', '\x1A', '\x110', '\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\x114', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\a', '\x1A', '\x119', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x11C', 
		'\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x120', '\n', 
		'\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x123', '\n', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\a', '\x1F', '\x135', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x138', 
		'\v', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', 
		' ', '\x144', '\n', ' ', '\x3', '!', '\x5', '!', '\x147', '\n', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x159', 
		'\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x5', '\"', '\x171', '\n', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x5', '\"', '\x177', '\n', '\"', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\a', '%', 
		'\x185', '\n', '%', '\f', '%', '\xE', '%', '\x188', '\v', '%', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x5', '\'', '\x191', '\n', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x5', '(', '\x19E', '\n', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x5', '(', '\x1B9', '\n', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\a', '(', '\x1C0', '\n', '(', '\f', '(', '\xE', '(', 
		'\x1C3', '\v', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x5', '*', '\x1CC', '\n', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\a', '*', '\x1D3', '\n', 
		'*', '\f', '*', '\xE', '*', '\x1D6', '\v', '*', '\x3', '*', '\x5', '*', 
		'\x1D9', '\n', '*', '\x3', '+', '\x3', '+', '\x5', '+', '\x1DD', '\n', 
		'+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x1E8', '\n', ',', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x1ED', '\n', '-', '\x3', 
		'.', '\x3', '.', '\x5', '.', '\x1F1', '\n', '.', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x1F9', '\n', 
		'/', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x1FD', '\n', '\x30', 
		'\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x201', '\n', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x5', '\x31', '\x205', '\n', '\x31', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x5', '\x33', '\x20D', '\n', '\x33', '\x5', '\x33', '\x20F', '\n', '\x33', 
		'\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x213', '\n', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x2', '\x3', 'N', '\x35', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', 
		'\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', 
		'\x62', '\x64', '\x66', '\x2', '\t', '\x5', '\x2', '\x10', '\x10', '\x17', 
		'\x17', '\x1D', '\x1D', '\x3', '\x2', '!', '%', '\x3', '\x2', '>', '?', 
		'\x4', '\x2', '@', '\x41', '\x45', '\x45', '\x4', '\x2', '\x30', '\x31', 
		'\x37', '\x38', '\x4', '\x2', '\x36', '\x36', '\x39', '\x39', '\a', '\x2', 
		'\x3', '\x3', '\a', '\a', '\x16', '\x16', '\x1C', '\x1C', ' ', ' ', '\x2', 
		'\x233', '\x2', 's', '\x3', '\x2', '\x2', '\x2', '\x4', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\x6', 'y', '\x3', '\x2', '\x2', '\x2', '\b', '|', '\x3', 
		'\x2', '\x2', '\x2', '\n', '~', '\x3', '\x2', '\x2', '\x2', '\f', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x12', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x16', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\xB6', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\xCB', '\x3', '\x2', '\x2', '\x2', ' ', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\xD1', '\x3', '\x2', '\x2', '\x2', 
		'$', '\xD5', '\x3', '\x2', '\x2', '\x2', '&', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '(', '\xDE', '\x3', '\x2', '\x2', '\x2', '*', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', ',', '\xEA', '\x3', '\x2', '\x2', '\x2', '.', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x34', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x127', '\x3', '\x2', '\x2', '\x2', '\x38', '\x12C', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x130', '\x3', '\x2', '\x2', '\x2', '<', '\x132', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x146', '\x3', '\x2', '\x2', '\x2', '\x42', '\x176', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x178', '\x3', '\x2', '\x2', '\x2', '\x46', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x189', '\x3', '\x2', '\x2', '\x2', 'L', '\x18D', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x19D', '\x3', '\x2', '\x2', '\x2', 'P', '\x1C4', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x1D8', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x1DC', '\x3', '\x2', '\x2', '\x2', 'V', '\x1E7', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x1E9', '\x3', '\x2', '\x2', '\x2', 'Z', '\x1F0', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x1F2', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x1FA', '\x3', '\x2', '\x2', '\x2', '`', '\x200', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x206', '\x3', '\x2', '\x2', '\x2', '\x64', '\x20E', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x210', '\x3', '\x2', '\x2', '\x2', 
		'h', 'j', '\x5', '\x4', '\x3', '\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 
		'j', 'm', '\x3', '\x2', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'p', '\x3', '\x2', '\x2', '\x2', 
		'm', 'k', '\x3', '\x2', '\x2', '\x2', 'n', 'q', '\x5', '\f', '\a', '\x2', 
		'o', 'q', '\x5', '\x10', '\t', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 
		'p', 'o', '\x3', '\x2', '\x2', '\x2', 'q', 't', '\x3', '\x2', '\x2', '\x2', 
		'r', 't', '\a', ',', '\x2', '\x2', 's', 'k', '\x3', '\x2', '\x2', '\x2', 
		's', 'r', '\x3', '\x2', '\x2', '\x2', 't', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'x', '\x5', '\x6', '\x4', '\x2', 'v', 'x', '\a', '\x19', '\x2', 
		'\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'x', '\x5', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\a', 'S', '\x2', 
		'\x2', 'z', '{', '\x5', '\b', '\x5', '\x2', '{', '\a', '\x3', '\x2', '\x2', 
		'\x2', '|', '}', '\t', '\x2', '\x2', '\x2', '}', '\t', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x7F', '\a', '\x6', '\x2', '\x2', '\x7F', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x81', '\a', '\x4', '\x2', '\x2', '\x81', '\x84', 
		'\x5', '\xE', '\b', '\x2', '\x82', '\x83', '\a', '\r', '\x2', '\x2', '\x83', 
		'\x85', '\x5', '`', '\x31', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x87', '\a', '\x14', '\x2', '\x2', '\x87', 
		'\x89', '\a', '[', '\x2', '\x2', '\x88', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x8B', '\x5', '\x16', '\f', '\x2', '\x8B', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\a', '[', '\x2', '\x2', 
		'\x8D', '\xF', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\a', '\f', 
		'\x2', '\x2', '\x8F', '\x90', '\x5', '\xE', '\b', '\x2', '\x90', '\x92', 
		'\a', '(', '\x2', '\x2', '\x91', '\x93', '\x5', '\x12', '\n', '\x2', '\x92', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', 
		')', '\x2', '\x2', '\x95', '\x11', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x9B', '\x5', '\x14', '\v', '\x2', '\x97', '\x98', '\a', '-', '\x2', 
		'\x2', '\x98', '\x9A', '\x5', '\x14', '\v', '\x2', '\x99', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x13', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\xA0', '\x5', '\xE', '\b', '\x2', '\x9F', 
		'\xA1', '\x5', '\x66', '\x34', '\x2', '\xA0', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA4', '\x5', '\x16', '\f', '\x2', '\xA3', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\x15', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA9', '\a', 
		'(', '\x2', '\x2', '\xA6', '\xA8', '\x5', '\x18', '\r', '\x2', '\xA7', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\a', ')', '\x2', 
		'\x2', '\xAD', '\x17', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB7', '\a', 
		',', '\x2', '\x2', '\xAF', '\xB1', '\x5', '\x4', '\x3', '\x2', '\xB0', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB7', '\x5', '\x1A', '\xE', 
		'\x2', '\xB6', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\x19', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xBC', '\x5', '\x1C', '\xF', '\x2', '\xB9', '\xBC', '\x5', '$', '\x13', 
		'\x2', '\xBA', '\xBC', '\x5', '\"', '\x12', '\x2', '\xBB', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBB', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBE', '\x5', ' ', '\x11', '\x2', '\xBE', '\xBF', '\a', 
		'[', '\x2', '\x2', '\xBF', '\xC4', '\x5', '\x30', '\x19', '\x2', '\xC0', 
		'\xC1', '\a', '*', '\x2', '\x2', '\xC1', '\xC3', '\a', '+', '\x2', '\x2', 
		'\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x5', '\x1E', 
		'\x10', '\x2', '\xC8', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCC', 
		'\x5', '<', '\x1F', '\x2', '\xCA', '\xCC', '\a', ',', '\x2', '\x2', '\xCB', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xD0', '\x5', 
		'`', '\x31', '\x2', '\xCE', '\xD0', '\a', '\x1E', '\x2', '\x2', '\xCF', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '!', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\a', 
		'[', '\x2', '\x2', '\xD2', '\xD3', '\x5', '\x30', '\x19', '\x2', '\xD3', 
		'\xD4', '\x5', '<', '\x1F', '\x2', '\xD4', '#', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD6', '\x5', '`', '\x31', '\x2', '\xD6', '\xD7', '\x5', '&', 
		'\x14', '\x2', '\xD7', '\xD8', '\a', ',', '\x2', '\x2', '\xD8', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDC', '\x5', '(', '\x15', '\x2', '\xDA', 
		'\xDB', '\a', 'U', '\x2', '\x2', '\xDB', '\xDD', '\x5', '*', '\x16', '\x2', 
		'\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', 
		'\x2', '\x2', '\xDD', '\'', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE3', 
		'\a', '[', '\x2', '\x2', '\xDF', '\xE0', '\a', '*', '\x2', '\x2', '\xE0', 
		'\xE2', '\a', '+', '\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		')', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE6', '\xE9', '\x5', ',', '\x17', '\x2', '\xE7', '\xE9', '\x5', 
		'N', '(', '\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE7', 
		'\x3', '\x2', '\x2', '\x2', '\xE9', '+', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xF6', '\a', '(', '\x2', '\x2', '\xEB', '\xF0', '\x5', 'N', '(', '\x2', 
		'\xEC', '\xED', '\a', '-', '\x2', '\x2', '\xED', '\xEF', '\x5', 'N', '(', 
		'\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF5', '\a', 
		'-', '\x2', '\x2', '\xF4', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xF9', '\a', ')', '\x2', '\x2', '\xF9', '-', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\xFB', '\a', '[', '\x2', '\x2', '\xFB', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\xFE', '\a', '&', '\x2', '\x2', '\xFD', '\xFF', '\x5', 
		'\x32', '\x1A', '\x2', '\xFE', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\x101', '\a', '\'', '\x2', '\x2', '\x101', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x107', '\x5', '\x34', '\x1B', '\x2', '\x103', 
		'\x104', '\a', '-', '\x2', '\x2', '\x104', '\x106', '\x5', '\x34', '\x1B', 
		'\x2', '\x105', '\x103', '\x3', '\x2', '\x2', '\x2', '\x106', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x108', '\x3', '\x2', '\x2', '\x2', '\x108', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x107', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x10B', '\a', '-', '\x2', '\x2', '\x10B', '\x10D', '\x5', '\x36', '\x1C', 
		'\x2', '\x10C', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x111', 
		'\x112', '\a', '-', '\x2', '\x2', '\x112', '\x114', '\x5', '\x38', '\x1D', 
		'\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x11A', '\x5', '\x36', '\x1C', '\x2', '\x116', '\x117', '\a', 
		'-', '\x2', '\x2', '\x117', '\x119', '\x5', '\x36', '\x1C', '\x2', '\x118', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11C', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x11F', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\a', 
		'-', '\x2', '\x2', '\x11E', '\x120', '\x5', '\x38', '\x1D', '\x2', '\x11F', 
		'\x11D', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x123', '\x3', '\x2', '\x2', '\x2', '\x121', '\x123', 
		'\x5', '\x38', '\x1D', '\x2', '\x122', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x115', '\x3', '\x2', '\x2', '\x2', '\x122', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x33', '\x3', '\x2', '\x2', '\x2', '\x124', 
		'\x125', '\x5', '`', '\x31', '\x2', '\x125', '\x126', '\x5', '(', '\x15', 
		'\x2', '\x126', '\x35', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', 
		'\x5', '`', '\x31', '\x2', '\x128', '\x129', '\x5', '(', '\x15', '\x2', 
		'\x129', '\x12A', '\a', 'U', '\x2', '\x2', '\x12A', '\x12B', '\x5', 'N', 
		'(', '\x2', '\x12B', '\x37', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', 
		'\x5', '`', '\x31', '\x2', '\x12D', '\x12E', '\a', 'T', '\x2', '\x2', 
		'\x12E', '\x12F', '\x5', '(', '\x15', '\x2', '\x12F', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x130', '\x131', '\t', '\x3', '\x2', '\x2', '\x131', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x136', '\a', '(', '\x2', '\x2', 
		'\x133', '\x135', '\x5', '>', ' ', '\x2', '\x134', '\x133', '\x3', '\x2', 
		'\x2', '\x2', '\x135', '\x138', '\x3', '\x2', '\x2', '\x2', '\x136', '\x134', 
		'\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2', '\x2', 
		'\x137', '\x139', '\x3', '\x2', '\x2', '\x2', '\x138', '\x136', '\x3', 
		'\x2', '\x2', '\x2', '\x139', '\x13A', '\a', ')', '\x2', '\x2', '\x13A', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', '\x5', '@', '!', '\x2', 
		'\x13C', '\x13D', '\a', ',', '\x2', '\x2', '\x13D', '\x144', '\x3', '\x2', 
		'\x2', '\x2', '\x13E', '\x144', '\x5', '\x42', '\"', '\x2', '\x13F', '\x140', 
		'\a', 'Y', '\x2', '\x2', '\x140', '\x141', '\x5', '>', ' ', '\x2', '\x141', 
		'\x142', '\a', 'Z', '\x2', '\x2', '\x142', '\x144', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x143', '\x13E', 
		'\x3', '\x2', '\x2', '\x2', '\x143', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '?', '\x3', '\x2', '\x2', '\x2', '\x145', '\x147', '\a', '\x6', 
		'\x2', '\x2', '\x146', '\x145', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', 
		'\x3', '\x2', '\x2', '\x2', '\x147', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'\x148', '\x149', '\x5', '`', '\x31', '\x2', '\x149', '\x14A', '\x5', 
		'&', '\x14', '\x2', '\x14A', '\x41', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x14C', '\a', '\x5', '\x2', '\x2', '\x14C', '\x14D', '\a', '&', '\x2', 
		'\x2', '\x14D', '\x14E', '\a', '[', '\x2', '\x2', '\x14E', '\x14F', '\a', 
		'\x31', '\x2', '\x2', '\x14F', '\x150', '\x5', 'N', '(', '\x2', '\x150', 
		'\x151', '\a', '\'', '\x2', '\x2', '\x151', '\x152', '\x5', '<', '\x1F', 
		'\x2', '\x152', '\x177', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', 
		'\a', '\x11', '\x2', '\x2', '\x154', '\x155', '\x5', '\x46', '$', '\x2', 
		'\x155', '\x158', '\x5', '<', '\x1F', '\x2', '\x156', '\x157', '\a', '\v', 
		'\x2', '\x2', '\x157', '\x159', '\x5', '<', '\x1F', '\x2', '\x158', '\x156', 
		'\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x159', '\x177', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\a', 
		'\xE', '\x2', '\x2', '\x15B', '\x15C', '\a', '&', '\x2', '\x2', '\x15C', 
		'\x15D', '\x5', '\x44', '#', '\x2', '\x15D', '\x15E', '\a', '\'', '\x2', 
		'\x2', '\x15E', '\x15F', '\x5', '<', '\x1F', '\x2', '\x15F', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '\x160', '\x161', '\a', '\xF', '\x2', '\x2', 
		'\x161', '\x162', '\a', '&', '\x2', '\x2', '\x162', '\x163', '\x5', '\x44', 
		'#', '\x2', '\x163', '\x164', '\a', '\'', '\x2', '\x2', '\x164', '\x165', 
		'\x5', '<', '\x1F', '\x2', '\x165', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '\x167', '\a', '\x1F', '\x2', '\x2', '\x167', '\x168', '\x5', 
		'\x46', '$', '\x2', '\x168', '\x169', '\x5', '<', '\x1F', '\x2', '\x169', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', '\a', '\b', '\x2', 
		'\x2', '\x16B', '\x177', '\x5', '<', '\x1F', '\x2', '\x16C', '\x16D', 
		'\a', '\t', '\x2', '\x2', '\x16D', '\x177', '\x5', '<', '\x1F', '\x2', 
		'\x16E', '\x170', '\a', '\x18', '\x2', '\x2', '\x16F', '\x171', '\x5', 
		'N', '(', '\x2', '\x170', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x171', '\x3', '\x2', '\x2', '\x2', '\x171', '\x172', '\x3', '\x2', '\x2', 
		'\x2', '\x172', '\x177', '\a', ',', '\x2', '\x2', '\x173', '\x174', '\x5', 
		'N', '(', '\x2', '\x174', '\x175', '\a', ',', '\x2', '\x2', '\x175', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '\x176', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'\x176', '\x153', '\x3', '\x2', '\x2', '\x2', '\x176', '\x15A', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\x160', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x176', '\x16A', '\x3', '\x2', '\x2', 
		'\x2', '\x176', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x176', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x176', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x177', '\x43', '\x3', '\x2', '\x2', '\x2', '\x178', '\x179', '\x5', 
		'`', '\x31', '\x2', '\x179', '\x17A', '\x5', '(', '\x15', '\x2', '\x17A', 
		'\x17B', '\a', '\x12', '\x2', '\x2', '\x17B', '\x17C', '\x5', 'N', '(', 
		'\x2', '\x17C', '\x45', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', 
		'\a', '&', '\x2', '\x2', '\x17E', '\x17F', '\x5', 'N', '(', '\x2', '\x17F', 
		'\x180', '\a', '\'', '\x2', '\x2', '\x180', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x186', '\x5', 'J', '&', '\x2', '\x182', '\x183', '\a', 
		'-', '\x2', '\x2', '\x183', '\x185', '\x5', 'J', '&', '\x2', '\x184', 
		'\x182', '\x3', '\x2', '\x2', '\x2', '\x185', '\x188', '\x3', '\x2', '\x2', 
		'\x2', '\x186', '\x184', '\x3', '\x2', '\x2', '\x2', '\x186', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x187', 'I', '\x3', '\x2', '\x2', '\x2', 
		'\x188', '\x186', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\a', 
		'[', '\x2', '\x2', '\x18A', '\x18B', '\a', '\x35', '\x2', '\x2', '\x18B', 
		'\x18C', '\x5', 'N', '(', '\x2', '\x18C', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x18D', '\x18E', '\a', '[', '\x2', '\x2', '\x18E', '\x190', '\a', '&', 
		'\x2', '\x2', '\x18F', '\x191', '\x5', 'H', '%', '\x2', '\x190', '\x18F', 
		'\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\x3', '\x2', '\x2', '\x2', 
		'\x191', '\x192', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\a', 
		'\'', '\x2', '\x2', '\x193', 'M', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x195', '\b', '(', '\x1', '\x2', '\x195', '\x19E', '\x5', 'V', ',', '\x2', 
		'\x196', '\x197', '\a', '\x15', '\x2', '\x2', '\x197', '\x19E', '\x5', 
		'X', '-', '\x2', '\x198', '\x199', '\t', '\x4', '\x2', '\x2', '\x199', 
		'\x19E', '\x5', 'N', '(', '\f', '\x19A', '\x19B', '\a', '\x32', '\x2', 
		'\x2', '\x19B', '\x19E', '\x5', 'N', '(', '\v', '\x19C', '\x19E', '\x5', 
		'P', ')', '\x2', '\x19D', '\x194', '\x3', '\x2', '\x2', '\x2', '\x19D', 
		'\x196', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x198', '\x3', '\x2', '\x2', 
		'\x2', '\x19D', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19C', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x1C1', '\x3', '\x2', '\x2', '\x2', 
		'\x19F', '\x1A0', '\f', '\n', '\x2', '\x2', '\x1A0', '\x1A1', '\t', '\x5', 
		'\x2', '\x2', '\x1A1', '\x1C0', '\x5', 'N', '(', '\v', '\x1A2', '\x1A3', 
		'\f', '\t', '\x2', '\x2', '\x1A3', '\x1A4', '\t', '\x4', '\x2', '\x2', 
		'\x1A4', '\x1C0', '\x5', 'N', '(', '\n', '\x1A5', '\x1A6', '\f', '\b', 
		'\x2', '\x2', '\x1A6', '\x1A7', '\t', '\x6', '\x2', '\x2', '\x1A7', '\x1C0', 
		'\x5', 'N', '(', '\t', '\x1A8', '\x1A9', '\f', '\a', '\x2', '\x2', '\x1A9', 
		'\x1AA', '\t', '\a', '\x2', '\x2', '\x1AA', '\x1C0', '\x5', 'N', '(', 
		'\b', '\x1AB', '\x1AC', '\f', '\x6', '\x2', '\x2', '\x1AC', '\x1AD', '\a', 
		':', '\x2', '\x2', '\x1AD', '\x1C0', '\x5', 'N', '(', '\a', '\x1AE', '\x1AF', 
		'\f', '\x5', '\x2', '\x2', '\x1AF', '\x1B0', '\a', ';', '\x2', '\x2', 
		'\x1B0', '\x1C0', '\x5', 'N', '(', '\x6', '\x1B1', '\x1B2', '\f', '\x4', 
		'\x2', '\x2', '\x1B2', '\x1B3', '\a', 'U', '\x2', '\x2', '\x1B3', '\x1C0', 
		'\x5', 'N', '(', '\x4', '\x1B4', '\x1B5', '\f', '\xF', '\x2', '\x2', '\x1B5', 
		'\x1B8', '\a', '.', '\x2', '\x2', '\x1B6', '\x1B9', '\a', '[', '\x2', 
		'\x2', '\x1B7', '\x1B9', '\x5', 'L', '\'', '\x2', '\x1B8', '\x1B6', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B9', 
		'\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\f', '\xE', '\x2', 
		'\x2', '\x1BB', '\x1BC', '\a', '*', '\x2', '\x2', '\x1BC', '\x1BD', '\x5', 
		'N', '(', '\x2', '\x1BD', '\x1BE', '\a', '+', '\x2', '\x2', '\x1BE', '\x1C0', 
		'\x3', '\x2', '\x2', '\x2', '\x1BF', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'\x1BF', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1A5', '\x3', 
		'\x2', '\x2', '\x2', '\x1BF', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1BF', 
		'\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1AE', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1B4', 
		'\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1BA', '\x3', '\x2', '\x2', '\x2', 
		'\x1C0', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1BF', '\x3', 
		'\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C2', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C1', '\x3', '\x2', '\x2', 
		'\x2', '\x1C4', '\x1C5', '\x5', 'R', '*', '\x2', '\x1C5', '\x1C6', '\a', 
		'Q', '\x2', '\x2', '\x1C6', '\x1C7', '\x5', 'T', '+', '\x2', '\x1C7', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1D9', '\a', '[', '\x2', '\x2', 
		'\x1C9', '\x1CB', '\a', '&', '\x2', '\x2', '\x1CA', '\x1CC', '\x5', '\x32', 
		'\x1A', '\x2', '\x1CB', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CB', 
		'\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CD', '\x3', '\x2', '\x2', 
		'\x2', '\x1CD', '\x1D9', '\a', '\'', '\x2', '\x2', '\x1CE', '\x1CF', '\a', 
		'&', '\x2', '\x2', '\x1CF', '\x1D4', '\a', '[', '\x2', '\x2', '\x1D0', 
		'\x1D1', '\a', '-', '\x2', '\x2', '\x1D1', '\x1D3', '\a', '[', '\x2', 
		'\x2', '\x1D2', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D6', 
		'\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D2', '\x3', '\x2', '\x2', '\x2', 
		'\x1D4', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D7', '\x3', 
		'\x2', '\x2', '\x2', '\x1D6', '\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1D7', 
		'\x1D9', '\a', '\'', '\x2', '\x2', '\x1D8', '\x1C8', '\x3', '\x2', '\x2', 
		'\x2', '\x1D8', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1CE', 
		'\x3', '\x2', '\x2', '\x2', '\x1D9', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x1DA', '\x1DD', '\x5', 'N', '(', '\x2', '\x1DB', '\x1DD', '\x5', '<', 
		'\x1F', '\x2', '\x1DC', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DC', 
		'\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DD', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x1DE', '\x1DF', '\a', '&', '\x2', '\x2', '\x1DF', '\x1E0', '\x5', 
		'N', '(', '\x2', '\x1E0', '\x1E1', '\a', '\'', '\x2', '\x2', '\x1E1', 
		'\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E8', '\a', '\x1B', '\x2', 
		'\x2', '\x1E3', '\x1E4', '\a', '\x1A', '\x2', '\x2', '\x1E4', '\x1E8', 
		'\x5', '\x64', '\x33', '\x2', '\x1E5', '\x1E8', '\x5', ':', '\x1E', '\x2', 
		'\x1E6', '\x1E8', '\a', '[', '\x2', '\x2', '\x1E7', '\x1DE', '\x3', '\x2', 
		'\x2', '\x2', '\x1E7', '\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E3', 
		'\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E5', '\x3', '\x2', '\x2', '\x2', 
		'\x1E7', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E8', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\x1E9', '\x1EC', '\x5', 'Z', '.', '\x2', '\x1EA', '\x1ED', 
		'\x5', '\\', '/', '\x2', '\x1EB', '\x1ED', '\x5', '^', '\x30', '\x2', 
		'\x1EC', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1EB', '\x3', 
		'\x2', '\x2', '\x2', '\x1ED', 'Y', '\x3', '\x2', '\x2', '\x2', '\x1EE', 
		'\x1F1', '\a', '[', '\x2', '\x2', '\x1EF', '\x1F1', '\x5', '\x62', '\x32', 
		'\x2', '\x1F0', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1EF', 
		'\x3', '\x2', '\x2', '\x2', '\x1F1', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x1F2', '\x1F8', '\a', '*', '\x2', '\x2', '\x1F3', '\x1F4', '\a', '+', 
		'\x2', '\x2', '\x1F4', '\x1F9', '\x5', ',', '\x17', '\x2', '\x1F5', '\x1F6', 
		'\x5', 'N', '(', '\x2', '\x1F6', '\x1F7', '\a', '+', '\x2', '\x2', '\x1F7', 
		'\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F3', '\x3', '\x2', '\x2', 
		'\x2', '\x1F8', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F9', ']', '\x3', 
		'\x2', '\x2', '\x2', '\x1FA', '\x1FC', '\x5', '\x66', '\x34', '\x2', '\x1FB', 
		'\x1FD', '\x5', '\x16', '\f', '\x2', '\x1FC', '\x1FB', '\x3', '\x2', '\x2', 
		'\x2', '\x1FC', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FD', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x1FE', '\x201', '\x5', '.', '\x18', '\x2', '\x1FF', 
		'\x201', '\x5', '\x62', '\x32', '\x2', '\x200', '\x1FE', '\x3', '\x2', 
		'\x2', '\x2', '\x200', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x201', '\x204', 
		'\x3', '\x2', '\x2', '\x2', '\x202', '\x203', '\a', '*', '\x2', '\x2', 
		'\x203', '\x205', '\a', '+', '\x2', '\x2', '\x204', '\x202', '\x3', '\x2', 
		'\x2', '\x2', '\x204', '\x205', '\x3', '\x2', '\x2', '\x2', '\x205', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x206', '\x207', '\t', '\b', '\x2', '\x2', 
		'\x207', '\x63', '\x3', '\x2', '\x2', '\x2', '\x208', '\x20F', '\x5', 
		'\x66', '\x34', '\x2', '\x209', '\x20A', '\a', '.', '\x2', '\x2', '\x20A', 
		'\x20C', '\a', '[', '\x2', '\x2', '\x20B', '\x20D', '\x5', '\x66', '\x34', 
		'\x2', '\x20C', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', 
		'\x3', '\x2', '\x2', '\x2', '\x20D', '\x20F', '\x3', '\x2', '\x2', '\x2', 
		'\x20E', '\x208', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x209', '\x3', 
		'\x2', '\x2', '\x2', '\x20F', '\x65', '\x3', '\x2', '\x2', '\x2', '\x210', 
		'\x212', '\a', '&', '\x2', '\x2', '\x211', '\x213', '\x5', 'H', '%', '\x2', 
		'\x212', '\x211', '\x3', '\x2', '\x2', '\x2', '\x212', '\x213', '\x3', 
		'\x2', '\x2', '\x2', '\x213', '\x214', '\x3', '\x2', '\x2', '\x2', '\x214', 
		'\x215', '\a', '\'', '\x2', '\x2', '\x215', 'g', '\x3', '\x2', '\x2', 
		'\x2', ':', 'k', 'p', 's', 'w', '\x84', '\x88', '\x92', '\x9B', '\xA0', 
		'\xA3', '\xA9', '\xB2', '\xB6', '\xBB', '\xC4', '\xCB', '\xCF', '\xDC', 
		'\xE3', '\xE8', '\xF0', '\xF4', '\xF6', '\xFE', '\x107', '\x10E', '\x113', 
		'\x11A', '\x11F', '\x122', '\x136', '\x143', '\x146', '\x158', '\x170', 
		'\x176', '\x186', '\x190', '\x19D', '\x1B8', '\x1BF', '\x1C1', '\x1CB', 
		'\x1D4', '\x1D8', '\x1DC', '\x1E7', '\x1EC', '\x1F0', '\x1F8', '\x1FC', 
		'\x200', '\x204', '\x20C', '\x20E', '\x212',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Alice.Tweedle
