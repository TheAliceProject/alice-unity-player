//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TweedleParser.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class TweedleParser : Parser {
	public const int
		BOOLEAN=1, CLASS=2, COUNT_UP_TO=3, CONSTANT=4, DECIMAL_NUMBER=5, DO_IN_ORDER=6, 
		DO_TOGETHER=7, EACH=8, ELSE=9, ENUM=10, EXTENDS=11, FOR_EACH=12, EACH_TOGETHER=13, 
		HIDE=14, IF=15, IN=16, LOOP=17, MODELS=18, NEW=19, NUMBER=20, PRIMETIME=21, 
		RETURN=22, STATIC=23, SUPER=24, THIS=25, TUCKED_AWAY=26, VOID=27, WHILE=28, 
		WHOLE_NUMBER=29, DECIMAL_LITERAL=30, FLOAT_LITERAL=31, BOOL_LITERAL=32, 
		STRING_LITERAL=33, NULL_LITERAL=34, LPAREN=35, RPAREN=36, LBRACE=37, RBRACE=38, 
		LBRACK=39, RBRACK=40, SEMI=41, COMMA=42, DOT=43, ASSIGN=44, GT=45, LT=46, 
		BANG=47, TILDE=48, QUESTION=49, COLON=50, EQUAL=51, LE=52, GE=53, NOTEQUAL=54, 
		AND=55, OR=56, INC=57, DEC=58, ADD=59, SUB=60, MUL=61, DIV=62, BITAND=63, 
		BITOR=64, CARET=65, MOD=66, ADD_ASSIGN=67, SUB_ASSIGN=68, MUL_ASSIGN=69, 
		DIV_ASSIGN=70, AND_ASSIGN=71, OR_ASSIGN=72, XOR_ASSIGN=73, MOD_ASSIGN=74, 
		LSHIFT_ASSIGN=75, RSHIFT_ASSIGN=76, URSHIFT_ASSIGN=77, ARROW=78, COLONCOLON=79, 
		AT=80, ELLIPSIS=81, LARROW=82, WS=83, COMMENT=84, LINE_COMMENT=85, NODE_COMMENT=86, 
		IDENTIFIER=87;
	public const int
		RULE_compilationUnit = 0, RULE_typeDeclaration = 1, RULE_classModifier = 2, 
		RULE_visibility = 3, RULE_visibilityLevel = 4, RULE_variableModifier = 5, 
		RULE_classDeclaration = 6, RULE_typeParameters = 7, RULE_typeParameter = 8, 
		RULE_typeBound = 9, RULE_enumDeclaration = 10, RULE_enumConstants = 11, 
		RULE_enumConstant = 12, RULE_classBody = 13, RULE_classBodyDeclaration = 14, 
		RULE_memberDeclaration = 15, RULE_methodDeclaration = 16, RULE_methodBody = 17, 
		RULE_typeTypeOrVoid = 18, RULE_genericMethodDeclaration = 19, RULE_genericConstructorDeclaration = 20, 
		RULE_constructorDeclaration = 21, RULE_fieldDeclaration = 22, RULE_variableDeclarators = 23, 
		RULE_variableDeclarator = 24, RULE_variableDeclaratorId = 25, RULE_variableInitializer = 26, 
		RULE_arrayInitializer = 27, RULE_classOrInterfaceType = 28, RULE_typeArgument = 29, 
		RULE_formalParameters = 30, RULE_formalParameterList = 31, RULE_formalParameter = 32, 
		RULE_lastFormalParameter = 33, RULE_literal = 34, RULE_block = 35, RULE_blockStatement = 36, 
		RULE_localVariableDeclaration = 37, RULE_statement = 38, RULE_forControl = 39, 
		RULE_parExpression = 40, RULE_expressionList = 41, RULE_methodCall = 42, 
		RULE_expression = 43, RULE_lambdaExpression = 44, RULE_lambdaParameters = 45, 
		RULE_lambdaBody = 46, RULE_primary = 47, RULE_classType = 48, RULE_creator = 49, 
		RULE_createdName = 50, RULE_innerCreator = 51, RULE_arrayCreatorRest = 52, 
		RULE_classCreatorRest = 53, RULE_explicitGenericInvocation = 54, RULE_typeArgumentsOrDiamond = 55, 
		RULE_nonWildcardTypeArgumentsOrDiamond = 56, RULE_nonWildcardTypeArguments = 57, 
		RULE_typeList = 58, RULE_typeType = 59, RULE_primitiveType = 60, RULE_typeArguments = 61, 
		RULE_superSuffix = 62, RULE_explicitGenericInvocationSuffix = 63, RULE_arguments = 64;
	public static readonly string[] ruleNames = {
		"compilationUnit", "typeDeclaration", "classModifier", "visibility", "visibilityLevel", 
		"variableModifier", "classDeclaration", "typeParameters", "typeParameter", 
		"typeBound", "enumDeclaration", "enumConstants", "enumConstant", "classBody", 
		"classBodyDeclaration", "memberDeclaration", "methodDeclaration", "methodBody", 
		"typeTypeOrVoid", "genericMethodDeclaration", "genericConstructorDeclaration", 
		"constructorDeclaration", "fieldDeclaration", "variableDeclarators", "variableDeclarator", 
		"variableDeclaratorId", "variableInitializer", "arrayInitializer", "classOrInterfaceType", 
		"typeArgument", "formalParameters", "formalParameterList", "formalParameter", 
		"lastFormalParameter", "literal", "block", "blockStatement", "localVariableDeclaration", 
		"statement", "forControl", "parExpression", "expressionList", "methodCall", 
		"expression", "lambdaExpression", "lambdaParameters", "lambdaBody", "primary", 
		"classType", "creator", "createdName", "innerCreator", "arrayCreatorRest", 
		"classCreatorRest", "explicitGenericInvocation", "typeArgumentsOrDiamond", 
		"nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", "typeList", 
		"typeType", "primitiveType", "typeArguments", "superSuffix", "explicitGenericInvocationSuffix", 
		"arguments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Boolean'", "'class'", "'countUpTo'", "'constant'", "'DecimalNumber'", 
		"'doInOrder'", "'doTogether'", "'each'", "'else'", "'enum'", "'extends'", 
		"'forEach'", "'eachTogether'", "'hidden'", "'if'", "'in'", "'loop'", "'models'", 
		"'new'", "'Number'", "'primetime'", "'return'", "'static'", "'super'", 
		"'this'", "'tuckedAway'", "'void'", "'while'", "'WholeNumber'", null, 
		null, null, null, "'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
		"';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", 
		"'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
		"'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", "'-='", "'*='", 
		"'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", "'>>>='", "'->'", 
		"'::'", "'@'", "'...'", "'<-'", null, null, null, "'**'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BOOLEAN", "CLASS", "COUNT_UP_TO", "CONSTANT", "DECIMAL_NUMBER", 
		"DO_IN_ORDER", "DO_TOGETHER", "EACH", "ELSE", "ENUM", "EXTENDS", "FOR_EACH", 
		"EACH_TOGETHER", "HIDE", "IF", "IN", "LOOP", "MODELS", "NEW", "NUMBER", 
		"PRIMETIME", "RETURN", "STATIC", "SUPER", "THIS", "TUCKED_AWAY", "VOID", 
		"WHILE", "WHOLE_NUMBER", "DECIMAL_LITERAL", "FLOAT_LITERAL", "BOOL_LITERAL", 
		"STRING_LITERAL", "NULL_LITERAL", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", "GT", "LT", "BANG", 
		"TILDE", "QUESTION", "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", 
		"OR", "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", 
		"MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", 
		"OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
		"URSHIFT_ASSIGN", "ARROW", "COLONCOLON", "AT", "ELLIPSIS", "LARROW", "WS", 
		"COMMENT", "LINE_COMMENT", "NODE_COMMENT", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TweedleParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TweedleParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(TweedleParser.Eof, 0); }
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << ENUM) | (1L << STATIC) | (1L << SEMI))) != 0) || _la==AT) {
				{
				{
				State = 130; typeDeclaration();
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 136; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_typeDeclaration);
		int _la;
		try {
			State = 149;
			switch (TokenStream.La(1)) {
			case CLASS:
			case ENUM:
			case STATIC:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==STATIC || _la==AT) {
					{
					{
					State = 138; classModifier();
					}
					}
					State = 143;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 146;
				switch (TokenStream.La(1)) {
				case CLASS:
					{
					State = 144; classDeclaration();
					}
					break;
				case ENUM:
					{
					State = 145; enumDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 148; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifierContext : ParserRuleContext {
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(TweedleParser.STATIC, 0); }
		public ClassModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterClassModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitClassModifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifierContext classModifier() {
		ClassModifierContext _localctx = new ClassModifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_classModifier);
		try {
			State = 153;
			switch (TokenStream.La(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 151; visibility();
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152; Match(STATIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public VisibilityLevelContext visibilityLevel() {
			return GetRuleContext<VisibilityLevelContext>(0);
		}
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 6, RULE_visibility);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(AT);
			State = 156; visibilityLevel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityLevelContext : ParserRuleContext {
		public ITerminalNode HIDE() { return GetToken(TweedleParser.HIDE, 0); }
		public ITerminalNode TUCKED_AWAY() { return GetToken(TweedleParser.TUCKED_AWAY, 0); }
		public ITerminalNode PRIMETIME() { return GetToken(TweedleParser.PRIMETIME, 0); }
		public VisibilityLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibilityLevel; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterVisibilityLevel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitVisibilityLevel(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityLevelContext visibilityLevel() {
		VisibilityLevelContext _localctx = new VisibilityLevelContext(Context, State);
		EnterRule(_localctx, 8, RULE_visibilityLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HIDE) | (1L << PRIMETIME) | (1L << TUCKED_AWAY))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		public ITerminalNode CONSTANT() { return GetToken(TweedleParser.CONSTANT, 0); }
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableModifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(CONSTANT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(TweedleParser.CLASS, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(TweedleParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(TweedleParser.IDENTIFIER, i);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ITerminalNode EXTENDS() { return GetToken(TweedleParser.EXTENDS, 0); }
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode MODELS() { return GetToken(TweedleParser.MODELS, 0); }
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(CLASS);
			State = 163; Match(IDENTIFIER);
			State = 165;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 164; typeParameters();
				}
			}

			State = 169;
			_la = TokenStream.La(1);
			if (_la==EXTENDS) {
				{
				State = 167; Match(EXTENDS);
				State = 168; typeType();
				}
			}

			State = 173;
			_la = TokenStream.La(1);
			if (_la==MODELS) {
				{
				State = 171; Match(MODELS);
				State = 172; Match(IDENTIFIER);
				}
			}

			State = 175; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 14, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(LT);
			State = 178; typeParameter();
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 179; Match(COMMA);
				State = 180; typeParameter();
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 186; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public ITerminalNode EXTENDS() { return GetToken(TweedleParser.EXTENDS, 0); }
		public TypeBoundContext typeBound() {
			return GetRuleContext<TypeBoundContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(IDENTIFIER);
			State = 191;
			_la = TokenStream.La(1);
			if (_la==EXTENDS) {
				{
				State = 189; Match(EXTENDS);
				State = 190; typeBound();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBoundContext : ParserRuleContext {
		public TypeTypeContext[] typeType() {
			return GetRuleContexts<TypeTypeContext>();
		}
		public TypeTypeContext typeType(int i) {
			return GetRuleContext<TypeTypeContext>(i);
		}
		public TypeBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterTypeBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitTypeBound(this);
		}
	}

	[RuleVersion(0)]
	public TypeBoundContext typeBound() {
		TypeBoundContext _localctx = new TypeBoundContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeBound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; typeType();
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==BITAND) {
				{
				{
				State = 194; Match(BITAND);
				State = 195; typeType();
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(TweedleParser.ENUM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public EnumConstantsContext enumConstants() {
			return GetRuleContext<EnumConstantsContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(ENUM);
			State = 202; Match(IDENTIFIER);
			State = 203; Match(LBRACE);
			State = 205;
			_la = TokenStream.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 204; enumConstants();
				}
			}

			State = 207; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantsContext : ParserRuleContext {
		public EnumConstantContext[] enumConstant() {
			return GetRuleContexts<EnumConstantContext>();
		}
		public EnumConstantContext enumConstant(int i) {
			return GetRuleContext<EnumConstantContext>(i);
		}
		public EnumConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstants; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterEnumConstants(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitEnumConstants(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantsContext enumConstants() {
		EnumConstantsContext _localctx = new EnumConstantsContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumConstants);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; enumConstant();
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 210; Match(COMMA);
				State = 211; enumConstant();
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public EnumConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterEnumConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitEnumConstant(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantContext enumConstant() {
		EnumConstantContext _localctx = new EnumConstantContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(IDENTIFIER);
			State = 219;
			_la = TokenStream.La(1);
			if (_la==LPAREN) {
				{
				State = 218; arguments();
				}
			}

			State = 222;
			_la = TokenStream.La(1);
			if (_la==LBRACE) {
				{
				State = 221; classBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(LBRACE);
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CLASS) | (1L << DECIMAL_NUMBER) | (1L << ENUM) | (1L << NUMBER) | (1L << STATIC) | (1L << VOID) | (1L << WHOLE_NUMBER) | (1L << LBRACE) | (1L << SEMI) | (1L << LT))) != 0) || _la==AT || _la==IDENTIFIER) {
				{
				{
				State = 225; classBodyDeclaration();
				}
				}
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 231; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclarationContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(TweedleParser.STATIC, 0); }
		public MemberDeclarationContext memberDeclaration() {
			return GetRuleContext<MemberDeclarationContext>(0);
		}
		public ClassModifierContext[] classModifier() {
			return GetRuleContexts<ClassModifierContext>();
		}
		public ClassModifierContext classModifier(int i) {
			return GetRuleContext<ClassModifierContext>(i);
		}
		public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclarationContext classBodyDeclaration() {
		ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_classBodyDeclaration);
		int _la;
		try {
			State = 245;
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233; Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235;
				_la = TokenStream.La(1);
				if (_la==STATIC) {
					{
					State = 234; Match(STATIC);
					}
				}

				State = 237; block();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==STATIC || _la==AT) {
					{
					{
					State = 238; classModifier();
					}
					}
					State = 243;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 244; memberDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public GenericMethodDeclarationContext genericMethodDeclaration() {
			return GetRuleContext<GenericMethodDeclarationContext>(0);
		}
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public GenericConstructorDeclarationContext genericConstructorDeclaration() {
			return GetRuleContext<GenericConstructorDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_memberDeclaration);
		try {
			State = 254;
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247; methodDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 248; genericMethodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 249; fieldDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 250; constructorDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 251; genericConstructorDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 252; classDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 253; enumDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; typeTypeOrVoid();
			State = 257; Match(IDENTIFIER);
			State = 258; formalParameters();
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==LBRACK) {
				{
				{
				State = 259; Match(LBRACK);
				State = 260; Match(RBRACK);
				}
				}
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 266; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_methodBody);
		try {
			State = 270;
			switch (TokenStream.La(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268; block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeOrVoidContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(TweedleParser.VOID, 0); }
		public TypeTypeOrVoidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTypeOrVoid; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterTypeTypeOrVoid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitTypeTypeOrVoid(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeOrVoidContext typeTypeOrVoid() {
		TypeTypeOrVoidContext _localctx = new TypeTypeOrVoidContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeTypeOrVoid);
		try {
			State = 274;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case DECIMAL_NUMBER:
			case NUMBER:
			case WHOLE_NUMBER:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272; typeType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericMethodDeclarationContext : ParserRuleContext {
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public GenericMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericMethodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterGenericMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitGenericMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GenericMethodDeclarationContext genericMethodDeclaration() {
		GenericMethodDeclarationContext _localctx = new GenericMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_genericMethodDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; typeParameters();
			State = 277; methodDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericConstructorDeclarationContext : ParserRuleContext {
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public GenericConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericConstructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterGenericConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitGenericConstructorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GenericConstructorDeclarationContext genericConstructorDeclaration() {
		GenericConstructorDeclarationContext _localctx = new GenericConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_genericConstructorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; typeParameters();
			State = 280; constructorDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public BlockContext constructorBody;
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_constructorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; Match(IDENTIFIER);
			State = 283; formalParameters();
			State = 284; _localctx.constructorBody = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; typeType();
			State = 287; variableDeclarators();
			State = 288; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorsContext : ParserRuleContext {
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarators(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorsContext variableDeclarators() {
		VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(Context, State);
		EnterRule(_localctx, 46, RULE_variableDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; variableDeclarator();
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 291; Match(COMMA);
				State = 292; variableDeclarator();
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ITerminalNode LARROW() { return GetToken(TweedleParser.LARROW, 0); }
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 48, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; variableDeclaratorId();
			State = 301;
			_la = TokenStream.La(1);
			if (_la==LARROW) {
				{
				State = 299; Match(LARROW);
				State = 300; variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 50, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; Match(IDENTIFIER);
			State = 308;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==LBRACK) {
				{
				{
				State = 304; Match(LBRACK);
				State = 305; Match(RBRACK);
				}
				}
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 52, RULE_variableInitializer);
		try {
			State = 313;
			switch (TokenStream.La(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 311; arrayInitializer();
				}
				break;
			case BOOLEAN:
			case DECIMAL_NUMBER:
			case NEW:
			case NUMBER:
			case SUPER:
			case THIS:
			case VOID:
			case WHOLE_NUMBER:
			case DECIMAL_LITERAL:
			case FLOAT_LITERAL:
			case BOOL_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 312; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 54, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; Match(LBRACE);
			State = 327;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << DECIMAL_NUMBER) | (1L << NEW) | (1L << NUMBER) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << WHOLE_NUMBER) | (1L << DECIMAL_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << LBRACE) | (1L << LT) | (1L << BANG) | (1L << TILDE) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB))) != 0) || _la==IDENTIFIER) {
				{
				State = 316; variableInitializer();
				State = 321;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 317; Match(COMMA);
						State = 318; variableInitializer();
						}
						} 
					}
					State = 323;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				}
				State = 325;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 324; Match(COMMA);
					}
				}

				}
			}

			State = 329; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(TweedleParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(TweedleParser.IDENTIFIER, i);
		}
		public TypeArgumentsContext[] typeArguments() {
			return GetRuleContexts<TypeArgumentsContext>();
		}
		public TypeArgumentsContext typeArguments(int i) {
			return GetRuleContext<TypeArgumentsContext>(i);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 56, RULE_classOrInterfaceType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 331; Match(IDENTIFIER);
			State = 333;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 332; typeArguments();
				}
			}

			State = 342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 335; Match(DOT);
					State = 336; Match(IDENTIFIER);
					State = 338;
					_la = TokenStream.La(1);
					if (_la==LT) {
						{
						State = 337; typeArguments();
						}
					}

					}
					} 
				}
				State = 344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode EXTENDS() { return GetToken(TweedleParser.EXTENDS, 0); }
		public ITerminalNode SUPER() { return GetToken(TweedleParser.SUPER, 0); }
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 58, RULE_typeArgument);
		int _la;
		try {
			State = 351;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case DECIMAL_NUMBER:
			case NUMBER:
			case WHOLE_NUMBER:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 345; typeType();
				}
				break;
			case QUESTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 346; Match(QUESTION);
				State = 349;
				_la = TokenStream.La(1);
				if (_la==EXTENDS || _la==SUPER) {
					{
					State = 347;
					_la = TokenStream.La(1);
					if ( !(_la==EXTENDS || _la==SUPER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 348; typeType();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 60, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; Match(LPAREN);
			State = 355;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CONSTANT) | (1L << DECIMAL_NUMBER) | (1L << NUMBER) | (1L << WHOLE_NUMBER))) != 0) || _la==IDENTIFIER) {
				{
				State = 354; formalParameterList();
				}
			}

			State = 357; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 62, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 372;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 359; formalParameter();
				State = 364;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 360; Match(COMMA);
						State = 361; formalParameter();
						}
						} 
					}
					State = 366;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
				}
				State = 369;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 367; Match(COMMA);
					State = 368; lastFormalParameter();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 371; lastFormalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 64, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CONSTANT) {
				{
				{
				State = 374; variableModifier();
				}
				}
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 380; typeType();
			State = 381; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterLastFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitLastFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterContext lastFormalParameter() {
		LastFormalParameterContext _localctx = new LastFormalParameterContext(Context, State);
		EnterRule(_localctx, 66, RULE_lastFormalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CONSTANT) {
				{
				{
				State = 383; variableModifier();
				}
				}
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 389; typeType();
			State = 390; Match(ELLIPSIS);
			State = 391; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(TweedleParser.DECIMAL_LITERAL, 0); }
		public ITerminalNode FLOAT_LITERAL() { return GetToken(TweedleParser.FLOAT_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(TweedleParser.STRING_LITERAL, 0); }
		public ITerminalNode BOOL_LITERAL() { return GetToken(TweedleParser.BOOL_LITERAL, 0); }
		public ITerminalNode NULL_LITERAL() { return GetToken(TweedleParser.NULL_LITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 68, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DECIMAL_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 70, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; Match(LBRACE);
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << COUNT_UP_TO) | (1L << CONSTANT) | (1L << DECIMAL_NUMBER) | (1L << DO_IN_ORDER) | (1L << DO_TOGETHER) | (1L << FOR_EACH) | (1L << EACH_TOGETHER) | (1L << IF) | (1L << NEW) | (1L << NUMBER) | (1L << RETURN) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << WHILE) | (1L << WHOLE_NUMBER) | (1L << DECIMAL_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << LBRACE) | (1L << LT) | (1L << BANG) | (1L << TILDE) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB))) != 0) || _la==NODE_COMMENT || _la==IDENTIFIER) {
				{
				{
				State = 396; blockStatement();
				}
				}
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 402; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_blockStatement);
		try {
			State = 408;
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 404; localVariableDeclaration();
				State = 405; Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 407; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public ITerminalNode NODE_COMMENT() { return GetToken(TweedleParser.NODE_COMMENT, 0); }
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 74, RULE_localVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			_la = TokenStream.La(1);
			if (_la==NODE_COMMENT) {
				{
				State = 410; Match(NODE_COMMENT);
				}
			}

			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CONSTANT) {
				{
				{
				State = 413; variableModifier();
				}
				}
				State = 418;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 419; typeType();
			State = 420; variableDeclarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext blockLabel;
		public ExpressionContext statementExpression;
		public IToken identifierLabel;
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode COUNT_UP_TO() { return GetToken(TweedleParser.COUNT_UP_TO, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IF() { return GetToken(TweedleParser.IF, 0); }
		public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(TweedleParser.ELSE, 0); }
		public ITerminalNode FOR_EACH() { return GetToken(TweedleParser.FOR_EACH, 0); }
		public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		public ITerminalNode EACH_TOGETHER() { return GetToken(TweedleParser.EACH_TOGETHER, 0); }
		public ITerminalNode WHILE() { return GetToken(TweedleParser.WHILE, 0); }
		public ITerminalNode DO_IN_ORDER() { return GetToken(TweedleParser.DO_IN_ORDER, 0); }
		public ITerminalNode DO_TOGETHER() { return GetToken(TweedleParser.DO_TOGETHER, 0); }
		public ITerminalNode RETURN() { return GetToken(TweedleParser.RETURN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public ITerminalNode NODE_COMMENT() { return GetToken(TweedleParser.NODE_COMMENT, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_statement);
		int _la;
		try {
			State = 467;
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 422; _localctx.blockLabel = block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 423; Match(COUNT_UP_TO);
				{
				State = 424; expression(0);
				}
				State = 425; statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 427; Match(IF);
				State = 428; parExpression();
				State = 429; statement();
				State = 432;
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 430; Match(ELSE);
					State = 431; statement();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 434; Match(FOR_EACH);
				State = 435; Match(LPAREN);
				State = 436; forControl();
				State = 437; Match(RPAREN);
				State = 438; statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 440; Match(EACH_TOGETHER);
				State = 441; Match(LPAREN);
				State = 442; forControl();
				State = 443; Match(RPAREN);
				State = 444; statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 446; Match(WHILE);
				State = 447; parExpression();
				State = 448; statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 450; Match(DO_IN_ORDER);
				State = 451; block();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 452; Match(DO_TOGETHER);
				State = 453; block();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 454; Match(RETURN);
				State = 456;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << DECIMAL_NUMBER) | (1L << NEW) | (1L << NUMBER) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << WHOLE_NUMBER) | (1L << DECIMAL_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << LT) | (1L << BANG) | (1L << TILDE) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB))) != 0) || _la==IDENTIFIER) {
					{
					State = 455; expression(0);
					}
				}

				State = 458; Match(SEMI);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 459; _localctx.statementExpression = expression(0);
				State = 460; Match(SEMI);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 462; _localctx.identifierLabel = Match(IDENTIFIER);
				State = 463; Match(COLON);
				State = 464; statement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 465; Match(NODE_COMMENT);
				State = 466; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ITerminalNode IN() { return GetToken(TweedleParser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterForControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitForControl(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 78, RULE_forControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469; typeType();
			State = 470; variableDeclaratorId();
			State = 471; Match(IN);
			State = 472; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterParExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitParExpression(this);
		}
	}

	[RuleVersion(0)]
	public ParExpressionContext parExpression() {
		ParExpressionContext _localctx = new ParExpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_parExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474; Match(LPAREN);
			State = 475; expression(0);
			State = 476; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 82, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478; expression(0);
			State = 483;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 479; Match(COMMA);
				State = 480; expression(0);
				}
				}
				State = 485;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 84, RULE_methodCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; Match(IDENTIFIER);
			State = 487; Match(LPAREN);
			State = 489;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << DECIMAL_NUMBER) | (1L << NEW) | (1L << NUMBER) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << WHOLE_NUMBER) | (1L << DECIMAL_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << LT) | (1L << BANG) | (1L << TILDE) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB))) != 0) || _la==IDENTIFIER) {
				{
				State = 488; expressionList();
				}
			}

			State = 491; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken prefix;
		public IToken bop;
		public IToken postfix;
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(TweedleParser.NEW, 0); }
		public CreatorContext creator() {
			return GetRuleContext<CreatorContext>(0);
		}
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ITerminalNode LARROW() { return GetToken(TweedleParser.LARROW, 0); }
		public ITerminalNode THIS() { return GetToken(TweedleParser.THIS, 0); }
		public InnerCreatorContext innerCreator() {
			return GetRuleContext<InnerCreatorContext>(0);
		}
		public ITerminalNode SUPER() { return GetToken(TweedleParser.SUPER, 0); }
		public SuperSuffixContext superSuffix() {
			return GetRuleContext<SuperSuffixContext>(0);
		}
		public ExplicitGenericInvocationContext explicitGenericInvocation() {
			return GetRuleContext<ExplicitGenericInvocationContext>(0);
		}
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 524;
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 494; Match(LPAREN);
				State = 495; typeType();
				State = 496; Match(RPAREN);
				State = 497; expression(20);
				}
				break;
			case 2:
				{
				State = 499;
				_localctx.prefix = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB))) != 0)) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 500; expression(18);
				}
				break;
			case 3:
				{
				State = 501;
				_localctx.prefix = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==BANG || _la==TILDE) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 502; expression(17);
				}
				break;
			case 4:
				{
				State = 503; primary();
				}
				break;
			case 5:
				{
				State = 504; methodCall();
				}
				break;
			case 6:
				{
				State = 505; Match(NEW);
				State = 506; creator();
				}
				break;
			case 7:
				{
				State = 507; lambdaExpression();
				}
				break;
			case 8:
				{
				State = 508; typeType();
				State = 509; Match(COLONCOLON);
				State = 515;
				switch (TokenStream.La(1)) {
				case LT:
				case IDENTIFIER:
					{
					State = 511;
					_la = TokenStream.La(1);
					if (_la==LT) {
						{
						State = 510; typeArguments();
						}
					}

					State = 513; Match(IDENTIFIER);
					}
					break;
				case NEW:
					{
					State = 514; Match(NEW);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				{
				State = 517; classType();
				State = 518; Match(COLONCOLON);
				State = 520;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 519; typeArguments();
					}
				}

				State = 522; Match(NEW);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 603;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 601;
					switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 526;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 527;
						_localctx.bop = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (MUL - 61)) | (1L << (DIV - 61)) | (1L << (MOD - 61)))) != 0)) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 528; expression(17);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 529;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 530;
						_localctx.bop = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 531; expression(16);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 532;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 540;
						switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
						case 1:
							{
							State = 533; Match(LT);
							State = 534; Match(LT);
							}
							break;
						case 2:
							{
							State = 535; Match(GT);
							State = 536; Match(GT);
							State = 537; Match(GT);
							}
							break;
						case 3:
							{
							State = 538; Match(GT);
							State = 539; Match(GT);
							}
							break;
						}
						State = 542; expression(15);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 543;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 544;
						_localctx.bop = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << LE) | (1L << GE))) != 0)) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 545; expression(14);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 546;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 547;
						_localctx.bop = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 548; expression(13);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 549;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 550; _localctx.bop = Match(BITAND);
						State = 551; expression(12);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 552;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 553; _localctx.bop = Match(CARET);
						State = 554; expression(11);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 555;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 556; _localctx.bop = Match(BITOR);
						State = 557; expression(10);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 558;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 559; _localctx.bop = Match(AND);
						State = 560; expression(9);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 561;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 562; _localctx.bop = Match(OR);
						State = 563; expression(8);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 564;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 565; _localctx.bop = Match(QUESTION);
						State = 566; expression(0);
						State = 567; Match(COLON);
						State = 568; expression(7);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 570;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 571; Match(LARROW);
						State = 572; expression(5);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 573;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 574; _localctx.bop = Match(DOT);
						State = 586;
						switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
						case 1:
							{
							State = 575; Match(IDENTIFIER);
							}
							break;
						case 2:
							{
							State = 576; methodCall();
							}
							break;
						case 3:
							{
							State = 577; Match(THIS);
							}
							break;
						case 4:
							{
							State = 578; Match(NEW);
							State = 580;
							_la = TokenStream.La(1);
							if (_la==LT) {
								{
								State = 579; nonWildcardTypeArguments();
								}
							}

							State = 582; innerCreator();
							}
							break;
						case 5:
							{
							State = 583; Match(SUPER);
							State = 584; superSuffix();
							}
							break;
						case 6:
							{
							State = 585; explicitGenericInvocation();
							}
							break;
						}
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 588;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 589; Match(LBRACK);
						State = 590; expression(0);
						State = 591; Match(RBRACK);
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 593;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 594;
						_localctx.postfix = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==INC || _la==DEC) ) {
							_localctx.postfix = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						}
						break;
					case 16:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 595;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 596; Match(COLONCOLON);
						State = 598;
						_la = TokenStream.La(1);
						if (_la==LT) {
							{
							State = 597; typeArguments();
							}
						}

						State = 600; Match(IDENTIFIER);
						}
						break;
					}
					} 
				}
				State = 605;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		public LambdaParametersContext lambdaParameters() {
			return GetRuleContext<LambdaParametersContext>(0);
		}
		public LambdaBodyContext lambdaBody() {
			return GetRuleContext<LambdaBodyContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606; lambdaParameters();
			State = 607; Match(ARROW);
			State = 608; lambdaBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParametersContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(TweedleParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(TweedleParser.IDENTIFIER, i);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public LambdaParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterLambdaParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitLambdaParameters(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParametersContext lambdaParameters() {
		LambdaParametersContext _localctx = new LambdaParametersContext(Context, State);
		EnterRule(_localctx, 90, RULE_lambdaParameters);
		int _la;
		try {
			State = 626;
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 610; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 611; Match(LPAREN);
				State = 613;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CONSTANT) | (1L << DECIMAL_NUMBER) | (1L << NUMBER) | (1L << WHOLE_NUMBER))) != 0) || _la==IDENTIFIER) {
					{
					State = 612; formalParameterList();
					}
				}

				State = 615; Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 616; Match(LPAREN);
				State = 617; Match(IDENTIFIER);
				State = 622;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA) {
					{
					{
					State = 618; Match(COMMA);
					State = 619; Match(IDENTIFIER);
					}
					}
					State = 624;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 625; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaBodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LambdaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterLambdaBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitLambdaBody(this);
		}
	}

	[RuleVersion(0)]
	public LambdaBodyContext lambdaBody() {
		LambdaBodyContext _localctx = new LambdaBodyContext(Context, State);
		EnterRule(_localctx, 92, RULE_lambdaBody);
		try {
			State = 630;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case DECIMAL_NUMBER:
			case NEW:
			case NUMBER:
			case SUPER:
			case THIS:
			case VOID:
			case WHOLE_NUMBER:
			case DECIMAL_LITERAL:
			case FLOAT_LITERAL:
			case BOOL_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 628; expression(0);
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 629; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THIS() { return GetToken(TweedleParser.THIS, 0); }
		public ITerminalNode SUPER() { return GetToken(TweedleParser.SUPER, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(TweedleParser.CLASS, 0); }
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
			return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 94, RULE_primary);
		try {
			State = 650;
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 632; Match(LPAREN);
				State = 633; expression(0);
				State = 634; Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 636; Match(THIS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 637; Match(SUPER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 638; literal();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 639; Match(IDENTIFIER);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 640; typeTypeOrVoid();
				State = 641; Match(DOT);
				State = 642; Match(CLASS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 644; nonWildcardTypeArguments();
				State = 648;
				switch (TokenStream.La(1)) {
				case SUPER:
				case IDENTIFIER:
					{
					State = 645; explicitGenericInvocationSuffix();
					}
					break;
				case THIS:
					{
					State = 646; Match(THIS);
					State = 647; arguments();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 96, RULE_classType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				{
				State = 652; classOrInterfaceType();
				State = 653; Match(DOT);
				}
				break;
			}
			State = 657; Match(IDENTIFIER);
			State = 659;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 658; typeArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatorContext : ParserRuleContext {
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public CreatedNameContext createdName() {
			return GetRuleContext<CreatedNameContext>(0);
		}
		public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		public ArrayCreatorRestContext arrayCreatorRest() {
			return GetRuleContext<ArrayCreatorRestContext>(0);
		}
		public CreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterCreator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitCreator(this);
		}
	}

	[RuleVersion(0)]
	public CreatorContext creator() {
		CreatorContext _localctx = new CreatorContext(Context, State);
		EnterRule(_localctx, 98, RULE_creator);
		try {
			State = 670;
			switch (TokenStream.La(1)) {
			case LT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 661; nonWildcardTypeArguments();
				State = 662; createdName();
				State = 663; classCreatorRest();
				}
				break;
			case BOOLEAN:
			case DECIMAL_NUMBER:
			case NUMBER:
			case WHOLE_NUMBER:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 665; createdName();
				State = 668;
				switch (TokenStream.La(1)) {
				case LBRACK:
					{
					State = 666; arrayCreatorRest();
					}
					break;
				case LPAREN:
					{
					State = 667; classCreatorRest();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedNameContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(TweedleParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(TweedleParser.IDENTIFIER, i);
		}
		public TypeArgumentsOrDiamondContext[] typeArgumentsOrDiamond() {
			return GetRuleContexts<TypeArgumentsOrDiamondContext>();
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond(int i) {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(i);
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public CreatedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterCreatedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitCreatedName(this);
		}
	}

	[RuleVersion(0)]
	public CreatedNameContext createdName() {
		CreatedNameContext _localctx = new CreatedNameContext(Context, State);
		EnterRule(_localctx, 100, RULE_createdName);
		int _la;
		try {
			State = 687;
			switch (TokenStream.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 672; Match(IDENTIFIER);
				State = 674;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 673; typeArgumentsOrDiamond();
					}
				}

				State = 683;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOT) {
					{
					{
					State = 676; Match(DOT);
					State = 677; Match(IDENTIFIER);
					State = 679;
					_la = TokenStream.La(1);
					if (_la==LT) {
						{
						State = 678; typeArgumentsOrDiamond();
						}
					}

					}
					}
					State = 685;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case BOOLEAN:
			case DECIMAL_NUMBER:
			case NUMBER:
			case WHOLE_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 686; primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerCreatorContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() {
			return GetRuleContext<NonWildcardTypeArgumentsOrDiamondContext>(0);
		}
		public InnerCreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerCreator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterInnerCreator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitInnerCreator(this);
		}
	}

	[RuleVersion(0)]
	public InnerCreatorContext innerCreator() {
		InnerCreatorContext _localctx = new InnerCreatorContext(Context, State);
		EnterRule(_localctx, 102, RULE_innerCreator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689; Match(IDENTIFIER);
			State = 691;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 690; nonWildcardTypeArgumentsOrDiamond();
				}
			}

			State = 693; classCreatorRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreatorRestContext : ParserRuleContext {
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreatorRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterArrayCreatorRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitArrayCreatorRest(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreatorRestContext arrayCreatorRest() {
		ArrayCreatorRestContext _localctx = new ArrayCreatorRestContext(Context, State);
		EnterRule(_localctx, 104, RULE_arrayCreatorRest);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 695; Match(LBRACK);
			State = 723;
			switch (TokenStream.La(1)) {
			case RBRACK:
				{
				State = 696; Match(RBRACK);
				State = 701;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 697; Match(LBRACK);
					State = 698; Match(RBRACK);
					}
					}
					State = 703;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 704; arrayInitializer();
				}
				break;
			case BOOLEAN:
			case DECIMAL_NUMBER:
			case NEW:
			case NUMBER:
			case SUPER:
			case THIS:
			case VOID:
			case WHOLE_NUMBER:
			case DECIMAL_LITERAL:
			case FLOAT_LITERAL:
			case BOOL_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case IDENTIFIER:
				{
				State = 705; expression(0);
				State = 706; Match(RBRACK);
				State = 713;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 707; Match(LBRACK);
						State = 708; expression(0);
						State = 709; Match(RBRACK);
						}
						} 
					}
					State = 715;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
				}
				State = 720;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 716; Match(LBRACK);
						State = 717; Match(RBRACK);
						}
						} 
					}
					State = 722;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassCreatorRestContext : ParserRuleContext {
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classCreatorRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterClassCreatorRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitClassCreatorRest(this);
		}
	}

	[RuleVersion(0)]
	public ClassCreatorRestContext classCreatorRest() {
		ClassCreatorRestContext _localctx = new ClassCreatorRestContext(Context, State);
		EnterRule(_localctx, 106, RULE_classCreatorRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725; arguments();
			State = 727;
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 726; classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitGenericInvocationContext : ParserRuleContext {
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
			return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
		}
		public ExplicitGenericInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitGenericInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterExplicitGenericInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitExplicitGenericInvocation(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitGenericInvocationContext explicitGenericInvocation() {
		ExplicitGenericInvocationContext _localctx = new ExplicitGenericInvocationContext(Context, State);
		EnterRule(_localctx, 108, RULE_explicitGenericInvocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729; nonWildcardTypeArguments();
			State = 730; explicitGenericInvocationSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsOrDiamondContext : ParserRuleContext {
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentsOrDiamond; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentsOrDiamond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentsOrDiamond(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
		TypeArgumentsOrDiamondContext _localctx = new TypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 110, RULE_typeArgumentsOrDiamond);
		try {
			State = 735;
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 732; Match(LT);
				State = 733; Match(GT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 734; typeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWildcardTypeArgumentsOrDiamondContext : ParserRuleContext {
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWildcardTypeArgumentsOrDiamond; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterNonWildcardTypeArgumentsOrDiamond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitNonWildcardTypeArgumentsOrDiamond(this);
		}
	}

	[RuleVersion(0)]
	public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() {
		NonWildcardTypeArgumentsOrDiamondContext _localctx = new NonWildcardTypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 112, RULE_nonWildcardTypeArgumentsOrDiamond);
		try {
			State = 740;
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 737; Match(LT);
				State = 738; Match(GT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 739; nonWildcardTypeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWildcardTypeArgumentsContext : ParserRuleContext {
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public NonWildcardTypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWildcardTypeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterNonWildcardTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitNonWildcardTypeArguments(this);
		}
	}

	[RuleVersion(0)]
	public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
		NonWildcardTypeArgumentsContext _localctx = new NonWildcardTypeArgumentsContext(Context, State);
		EnterRule(_localctx, 114, RULE_nonWildcardTypeArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742; Match(LT);
			State = 743; typeList();
			State = 744; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		public TypeTypeContext[] typeType() {
			return GetRuleContexts<TypeTypeContext>();
		}
		public TypeTypeContext typeType(int i) {
			return GetRuleContext<TypeTypeContext>(i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 116, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 746; typeType();
			State = 751;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 747; Match(COMMA);
				State = 748; typeType();
				}
				}
				State = 753;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeContext : ParserRuleContext {
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterTypeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitTypeType(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeContext typeType() {
		TypeTypeContext _localctx = new TypeTypeContext(Context, State);
		EnterRule(_localctx, 118, RULE_typeType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756;
			switch (TokenStream.La(1)) {
			case IDENTIFIER:
				{
				State = 754; classOrInterfaceType();
				}
				break;
			case BOOLEAN:
			case DECIMAL_NUMBER:
			case NUMBER:
			case WHOLE_NUMBER:
				{
				State = 755; primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 762;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==LBRACK) {
				{
				{
				State = 758; Match(LBRACK);
				State = 759; Match(RBRACK);
				}
				}
				State = 764;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 766;
			_la = TokenStream.La(1);
			if (_la==QUESTION) {
				{
				State = 765; Match(QUESTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(TweedleParser.BOOLEAN, 0); }
		public ITerminalNode DECIMAL_NUMBER() { return GetToken(TweedleParser.DECIMAL_NUMBER, 0); }
		public ITerminalNode WHOLE_NUMBER() { return GetToken(TweedleParser.WHOLE_NUMBER, 0); }
		public ITerminalNode NUMBER() { return GetToken(TweedleParser.NUMBER, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 120, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 768;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << DECIMAL_NUMBER) | (1L << NUMBER) | (1L << WHOLE_NUMBER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 122, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 770; Match(LT);
			State = 771; typeArgument();
			State = 776;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 772; Match(COMMA);
				State = 773; typeArgument();
				}
				}
				State = 778;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 779; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperSuffixContext : ParserRuleContext {
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public SuperSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterSuperSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitSuperSuffix(this);
		}
	}

	[RuleVersion(0)]
	public SuperSuffixContext superSuffix() {
		SuperSuffixContext _localctx = new SuperSuffixContext(Context, State);
		EnterRule(_localctx, 124, RULE_superSuffix);
		try {
			State = 787;
			switch (TokenStream.La(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 781; arguments();
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 782; Match(DOT);
				State = 783; Match(IDENTIFIER);
				State = 785;
				switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
				case 1:
					{
					State = 784; arguments();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitGenericInvocationSuffixContext : ParserRuleContext {
		public ITerminalNode SUPER() { return GetToken(TweedleParser.SUPER, 0); }
		public SuperSuffixContext superSuffix() {
			return GetRuleContext<SuperSuffixContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(TweedleParser.IDENTIFIER, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ExplicitGenericInvocationSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitGenericInvocationSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterExplicitGenericInvocationSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitExplicitGenericInvocationSuffix(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
		ExplicitGenericInvocationSuffixContext _localctx = new ExplicitGenericInvocationSuffixContext(Context, State);
		EnterRule(_localctx, 126, RULE_explicitGenericInvocationSuffix);
		try {
			State = 793;
			switch (TokenStream.La(1)) {
			case SUPER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 789; Match(SUPER);
				State = 790; superSuffix();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 791; Match(IDENTIFIER);
				State = 792; arguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITweedleParserListener typedListener = listener as ITweedleParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 128, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795; Match(LPAREN);
			State = 797;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << DECIMAL_NUMBER) | (1L << NEW) | (1L << NUMBER) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << WHOLE_NUMBER) | (1L << DECIMAL_LITERAL) | (1L << FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << LT) | (1L << BANG) | (1L << TILDE) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB))) != 0) || _la==IDENTIFIER) {
				{
				State = 796; expressionList();
				}
			}

			State = 799; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 43: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 16);
		case 1: return Precpred(Context, 15);
		case 2: return Precpred(Context, 14);
		case 3: return Precpred(Context, 13);
		case 4: return Precpred(Context, 12);
		case 5: return Precpred(Context, 11);
		case 6: return Precpred(Context, 10);
		case 7: return Precpred(Context, 9);
		case 8: return Precpred(Context, 8);
		case 9: return Precpred(Context, 7);
		case 10: return Precpred(Context, 6);
		case 11: return Precpred(Context, 5);
		case 12: return Precpred(Context, 24);
		case 13: return Precpred(Context, 23);
		case 14: return Precpred(Context, 19);
		case 15: return Precpred(Context, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3Y\x324\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x3\x2\a\x2\x86\n\x2\f\x2\xE\x2\x89\v\x2"+
		"\x3\x2\x3\x2\x3\x3\a\x3\x8E\n\x3\f\x3\xE\x3\x91\v\x3\x3\x3\x3\x3\x5\x3"+
		"\x95\n\x3\x3\x3\x5\x3\x98\n\x3\x3\x4\x3\x4\x5\x4\x9C\n\x4\x3\x5\x3\x5"+
		"\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x5\b\xA8\n\b\x3\b\x3\b\x5"+
		"\b\xAC\n\b\x3\b\x3\b\x5\b\xB0\n\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\a\t\xB8"+
		"\n\t\f\t\xE\t\xBB\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\x5\n\xC2\n\n\x3\v\x3\v"+
		"\x3\v\a\v\xC7\n\v\f\v\xE\v\xCA\v\v\x3\f\x3\f\x3\f\x3\f\x5\f\xD0\n\f\x3"+
		"\f\x3\f\x3\r\x3\r\x3\r\a\r\xD7\n\r\f\r\xE\r\xDA\v\r\x3\xE\x3\xE\x5\xE"+
		"\xDE\n\xE\x3\xE\x5\xE\xE1\n\xE\x3\xF\x3\xF\a\xF\xE5\n\xF\f\xF\xE\xF\xE8"+
		"\v\xF\x3\xF\x3\xF\x3\x10\x3\x10\x5\x10\xEE\n\x10\x3\x10\x3\x10\a\x10\xF2"+
		"\n\x10\f\x10\xE\x10\xF5\v\x10\x3\x10\x5\x10\xF8\n\x10\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x101\n\x11\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\a\x12\x108\n\x12\f\x12\xE\x12\x10B\v\x12\x3\x12\x3\x12"+
		"\x3\x13\x3\x13\x5\x13\x111\n\x13\x3\x14\x3\x14\x5\x14\x115\n\x14\x3\x15"+
		"\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\a\x19\x128\n\x19\f\x19\xE\x19"+
		"\x12B\v\x19\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x130\n\x1A\x3\x1B\x3\x1B\x3\x1B"+
		"\a\x1B\x135\n\x1B\f\x1B\xE\x1B\x138\v\x1B\x3\x1C\x3\x1C\x5\x1C\x13C\n"+
		"\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\a\x1D\x142\n\x1D\f\x1D\xE\x1D\x145\v"+
		"\x1D\x3\x1D\x5\x1D\x148\n\x1D\x5\x1D\x14A\n\x1D\x3\x1D\x3\x1D\x3\x1E\x3"+
		"\x1E\x5\x1E\x150\n\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x155\n\x1E\a\x1E\x157"+
		"\n\x1E\f\x1E\xE\x1E\x15A\v\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x160"+
		"\n\x1F\x5\x1F\x162\n\x1F\x3 \x3 \x5 \x166\n \x3 \x3 \x3!\x3!\x3!\a!\x16D"+
		"\n!\f!\xE!\x170\v!\x3!\x3!\x5!\x174\n!\x3!\x5!\x177\n!\x3\"\a\"\x17A\n"+
		"\"\f\"\xE\"\x17D\v\"\x3\"\x3\"\x3\"\x3#\a#\x183\n#\f#\xE#\x186\v#\x3#"+
		"\x3#\x3#\x3#\x3$\x3$\x3%\x3%\a%\x190\n%\f%\xE%\x193\v%\x3%\x3%\x3&\x3"+
		"&\x3&\x3&\x5&\x19B\n&\x3\'\x5\'\x19E\n\'\x3\'\a\'\x1A1\n\'\f\'\xE\'\x1A4"+
		"\v\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x1B3\n"+
		"(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3("+
		"\x3(\x3(\x3(\x3(\x3(\x5(\x1CB\n(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5"+
		"(\x1D6\n(\x3)\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x3+\x3+\x3+\a+\x1E4\n+\f"+
		"+\xE+\x1E7\v+\x3,\x3,\x3,\x5,\x1EC\n,\x3,\x3,\x3-\x3-\x3-\x3-\x3-\x3-"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x202\n-\x3-\x3-\x5"+
		"-\x206\n-\x3-\x3-\x3-\x5-\x20B\n-\x3-\x3-\x5-\x20F\n-\x3-\x3-\x3-\x3-"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x21F\n-\x3-\x3-\x3-\x3-\x3"+
		"-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-"+
		"\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x247"+
		"\n-\x3-\x3-\x3-\x3-\x5-\x24D\n-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3"+
		"-\x5-\x259\n-\x3-\a-\x25C\n-\f-\xE-\x25F\v-\x3.\x3.\x3.\x3.\x3/\x3/\x3"+
		"/\x5/\x268\n/\x3/\x3/\x3/\x3/\x3/\a/\x26F\n/\f/\xE/\x272\v/\x3/\x5/\x275"+
		"\n/\x3\x30\x3\x30\x5\x30\x279\n\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31"+
		"\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31"+
		"\x3\x31\x5\x31\x28B\n\x31\x5\x31\x28D\n\x31\x3\x32\x3\x32\x3\x32\x5\x32"+
		"\x292\n\x32\x3\x32\x3\x32\x5\x32\x296\n\x32\x3\x33\x3\x33\x3\x33\x3\x33"+
		"\x3\x33\x3\x33\x3\x33\x5\x33\x29F\n\x33\x5\x33\x2A1\n\x33\x3\x34\x3\x34"+
		"\x5\x34\x2A5\n\x34\x3\x34\x3\x34\x3\x34\x5\x34\x2AA\n\x34\a\x34\x2AC\n"+
		"\x34\f\x34\xE\x34\x2AF\v\x34\x3\x34\x5\x34\x2B2\n\x34\x3\x35\x3\x35\x5"+
		"\x35\x2B6\n\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\a\x36\x2BE\n"+
		"\x36\f\x36\xE\x36\x2C1\v\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36"+
		"\x3\x36\a\x36\x2CA\n\x36\f\x36\xE\x36\x2CD\v\x36\x3\x36\x3\x36\a\x36\x2D1"+
		"\n\x36\f\x36\xE\x36\x2D4\v\x36\x5\x36\x2D6\n\x36\x3\x37\x3\x37\x5\x37"+
		"\x2DA\n\x37\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x5\x39\x2E2\n\x39"+
		"\x3:\x3:\x3:\x5:\x2E7\n:\x3;\x3;\x3;\x3;\x3<\x3<\x3<\a<\x2F0\n<\f<\xE"+
		"<\x2F3\v<\x3=\x3=\x5=\x2F7\n=\x3=\x3=\a=\x2FB\n=\f=\xE=\x2FE\v=\x3=\x5"+
		"=\x301\n=\x3>\x3>\x3?\x3?\x3?\x3?\a?\x309\n?\f?\xE?\x30C\v?\x3?\x3?\x3"+
		"@\x3@\x3@\x3@\x5@\x314\n@\x5@\x316\n@\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41"+
		"\x31C\n\x41\x3\x42\x3\x42\x5\x42\x320\n\x42\x3\x42\x3\x42\x3\x42\x2\x3"+
		"X\x43\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32"+
		"\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80"+
		"\x82\x2\r\x5\x2\x10\x10\x17\x17\x1C\x1C\x4\x2\r\r\x1A\x1A\x3\x2 $\x3\x2"+
		";>\x3\x2\x31\x32\x4\x2?@\x44\x44\x3\x2=>\x4\x2/\x30\x36\x37\x4\x2\x35"+
		"\x35\x38\x38\x3\x2;<\x6\x2\x3\x3\a\a\x16\x16\x1F\x1F\x36D\x2\x87\x3\x2"+
		"\x2\x2\x4\x97\x3\x2\x2\x2\x6\x9B\x3\x2\x2\x2\b\x9D\x3\x2\x2\x2\n\xA0\x3"+
		"\x2\x2\x2\f\xA2\x3\x2\x2\x2\xE\xA4\x3\x2\x2\x2\x10\xB3\x3\x2\x2\x2\x12"+
		"\xBE\x3\x2\x2\x2\x14\xC3\x3\x2\x2\x2\x16\xCB\x3\x2\x2\x2\x18\xD3\x3\x2"+
		"\x2\x2\x1A\xDB\x3\x2\x2\x2\x1C\xE2\x3\x2\x2\x2\x1E\xF7\x3\x2\x2\x2 \x100"+
		"\x3\x2\x2\x2\"\x102\x3\x2\x2\x2$\x110\x3\x2\x2\x2&\x114\x3\x2\x2\x2(\x116"+
		"\x3\x2\x2\x2*\x119\x3\x2\x2\x2,\x11C\x3\x2\x2\x2.\x120\x3\x2\x2\x2\x30"+
		"\x124\x3\x2\x2\x2\x32\x12C\x3\x2\x2\x2\x34\x131\x3\x2\x2\x2\x36\x13B\x3"+
		"\x2\x2\x2\x38\x13D\x3\x2\x2\x2:\x14D\x3\x2\x2\x2<\x161\x3\x2\x2\x2>\x163"+
		"\x3\x2\x2\x2@\x176\x3\x2\x2\x2\x42\x17B\x3\x2\x2\x2\x44\x184\x3\x2\x2"+
		"\x2\x46\x18B\x3\x2\x2\x2H\x18D\x3\x2\x2\x2J\x19A\x3\x2\x2\x2L\x19D\x3"+
		"\x2\x2\x2N\x1D5\x3\x2\x2\x2P\x1D7\x3\x2\x2\x2R\x1DC\x3\x2\x2\x2T\x1E0"+
		"\x3\x2\x2\x2V\x1E8\x3\x2\x2\x2X\x20E\x3\x2\x2\x2Z\x260\x3\x2\x2\x2\\\x274"+
		"\x3\x2\x2\x2^\x278\x3\x2\x2\x2`\x28C\x3\x2\x2\x2\x62\x291\x3\x2\x2\x2"+
		"\x64\x2A0\x3\x2\x2\x2\x66\x2B1\x3\x2\x2\x2h\x2B3\x3\x2\x2\x2j\x2B9\x3"+
		"\x2\x2\x2l\x2D7\x3\x2\x2\x2n\x2DB\x3\x2\x2\x2p\x2E1\x3\x2\x2\x2r\x2E6"+
		"\x3\x2\x2\x2t\x2E8\x3\x2\x2\x2v\x2EC\x3\x2\x2\x2x\x2F6\x3\x2\x2\x2z\x302"+
		"\x3\x2\x2\x2|\x304\x3\x2\x2\x2~\x315\x3\x2\x2\x2\x80\x31B\x3\x2\x2\x2"+
		"\x82\x31D\x3\x2\x2\x2\x84\x86\x5\x4\x3\x2\x85\x84\x3\x2\x2\x2\x86\x89"+
		"\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x8A\x3\x2\x2"+
		"\x2\x89\x87\x3\x2\x2\x2\x8A\x8B\a\x2\x2\x3\x8B\x3\x3\x2\x2\x2\x8C\x8E"+
		"\x5\x6\x4\x2\x8D\x8C\x3\x2\x2\x2\x8E\x91\x3\x2\x2\x2\x8F\x8D\x3\x2\x2"+
		"\x2\x8F\x90\x3\x2\x2\x2\x90\x94\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x92\x95"+
		"\x5\xE\b\x2\x93\x95\x5\x16\f\x2\x94\x92\x3\x2\x2\x2\x94\x93\x3\x2\x2\x2"+
		"\x95\x98\x3\x2\x2\x2\x96\x98\a+\x2\x2\x97\x8F\x3\x2\x2\x2\x97\x96\x3\x2"+
		"\x2\x2\x98\x5\x3\x2\x2\x2\x99\x9C\x5\b\x5\x2\x9A\x9C\a\x19\x2\x2\x9B\x99"+
		"\x3\x2\x2\x2\x9B\x9A\x3\x2\x2\x2\x9C\a\x3\x2\x2\x2\x9D\x9E\aR\x2\x2\x9E"+
		"\x9F\x5\n\x6\x2\x9F\t\x3\x2\x2\x2\xA0\xA1\t\x2\x2\x2\xA1\v\x3\x2\x2\x2"+
		"\xA2\xA3\a\x6\x2\x2\xA3\r\x3\x2\x2\x2\xA4\xA5\a\x4\x2\x2\xA5\xA7\aY\x2"+
		"\x2\xA6\xA8\x5\x10\t\x2\xA7\xA6\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xAB"+
		"\x3\x2\x2\x2\xA9\xAA\a\r\x2\x2\xAA\xAC\x5x=\x2\xAB\xA9\x3\x2\x2\x2\xAB"+
		"\xAC\x3\x2\x2\x2\xAC\xAF\x3\x2\x2\x2\xAD\xAE\a\x14\x2\x2\xAE\xB0\aY\x2"+
		"\x2\xAF\xAD\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB2"+
		"\x5\x1C\xF\x2\xB2\xF\x3\x2\x2\x2\xB3\xB4\a\x30\x2\x2\xB4\xB9\x5\x12\n"+
		"\x2\xB5\xB6\a,\x2\x2\xB6\xB8\x5\x12\n\x2\xB7\xB5\x3\x2\x2\x2\xB8\xBB\x3"+
		"\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBC\x3\x2\x2\x2"+
		"\xBB\xB9\x3\x2\x2\x2\xBC\xBD\a/\x2\x2\xBD\x11\x3\x2\x2\x2\xBE\xC1\aY\x2"+
		"\x2\xBF\xC0\a\r\x2\x2\xC0\xC2\x5\x14\v\x2\xC1\xBF\x3\x2\x2\x2\xC1\xC2"+
		"\x3\x2\x2\x2\xC2\x13\x3\x2\x2\x2\xC3\xC8\x5x=\x2\xC4\xC5\a\x41\x2\x2\xC5"+
		"\xC7\x5x=\x2\xC6\xC4\x3\x2\x2\x2\xC7\xCA\x3\x2\x2\x2\xC8\xC6\x3\x2\x2"+
		"\x2\xC8\xC9\x3\x2\x2\x2\xC9\x15\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCB\xCC"+
		"\a\f\x2\x2\xCC\xCD\aY\x2\x2\xCD\xCF\a\'\x2\x2\xCE\xD0\x5\x18\r\x2\xCF"+
		"\xCE\x3\x2\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD2\a(\x2"+
		"\x2\xD2\x17\x3\x2\x2\x2\xD3\xD8\x5\x1A\xE\x2\xD4\xD5\a,\x2\x2\xD5\xD7"+
		"\x5\x1A\xE\x2\xD6\xD4\x3\x2\x2\x2\xD7\xDA\x3\x2\x2\x2\xD8\xD6\x3\x2\x2"+
		"\x2\xD8\xD9\x3\x2\x2\x2\xD9\x19\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDB\xDD"+
		"\aY\x2\x2\xDC\xDE\x5\x82\x42\x2\xDD\xDC\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2"+
		"\xDE\xE0\x3\x2\x2\x2\xDF\xE1\x5\x1C\xF\x2\xE0\xDF\x3\x2\x2\x2\xE0\xE1"+
		"\x3\x2\x2\x2\xE1\x1B\x3\x2\x2\x2\xE2\xE6\a\'\x2\x2\xE3\xE5\x5\x1E\x10"+
		"\x2\xE4\xE3\x3\x2\x2\x2\xE5\xE8\x3\x2\x2\x2\xE6\xE4\x3\x2\x2\x2\xE6\xE7"+
		"\x3\x2\x2\x2\xE7\xE9\x3\x2\x2\x2\xE8\xE6\x3\x2\x2\x2\xE9\xEA\a(\x2\x2"+
		"\xEA\x1D\x3\x2\x2\x2\xEB\xF8\a+\x2\x2\xEC\xEE\a\x19\x2\x2\xED\xEC\x3\x2"+
		"\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\xF8\x5H%\x2\xF0\xF2"+
		"\x5\x6\x4\x2\xF1\xF0\x3\x2\x2\x2\xF2\xF5\x3\x2\x2\x2\xF3\xF1\x3\x2\x2"+
		"\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF6\x3\x2\x2\x2\xF5\xF3\x3\x2\x2\x2\xF6\xF8"+
		"\x5 \x11\x2\xF7\xEB\x3\x2\x2\x2\xF7\xED\x3\x2\x2\x2\xF7\xF3\x3\x2\x2\x2"+
		"\xF8\x1F\x3\x2\x2\x2\xF9\x101\x5\"\x12\x2\xFA\x101\x5(\x15\x2\xFB\x101"+
		"\x5.\x18\x2\xFC\x101\x5,\x17\x2\xFD\x101\x5*\x16\x2\xFE\x101\x5\xE\b\x2"+
		"\xFF\x101\x5\x16\f\x2\x100\xF9\x3\x2\x2\x2\x100\xFA\x3\x2\x2\x2\x100\xFB"+
		"\x3\x2\x2\x2\x100\xFC\x3\x2\x2\x2\x100\xFD\x3\x2\x2\x2\x100\xFE\x3\x2"+
		"\x2\x2\x100\xFF\x3\x2\x2\x2\x101!\x3\x2\x2\x2\x102\x103\x5&\x14\x2\x103"+
		"\x104\aY\x2\x2\x104\x109\x5> \x2\x105\x106\a)\x2\x2\x106\x108\a*\x2\x2"+
		"\x107\x105\x3\x2\x2\x2\x108\x10B\x3\x2\x2\x2\x109\x107\x3\x2\x2\x2\x109"+
		"\x10A\x3\x2\x2\x2\x10A\x10C\x3\x2\x2\x2\x10B\x109\x3\x2\x2\x2\x10C\x10D"+
		"\x5$\x13\x2\x10D#\x3\x2\x2\x2\x10E\x111\x5H%\x2\x10F\x111\a+\x2\x2\x110"+
		"\x10E\x3\x2\x2\x2\x110\x10F\x3\x2\x2\x2\x111%\x3\x2\x2\x2\x112\x115\x5"+
		"x=\x2\x113\x115\a\x1D\x2\x2\x114\x112\x3\x2\x2\x2\x114\x113\x3\x2\x2\x2"+
		"\x115\'\x3\x2\x2\x2\x116\x117\x5\x10\t\x2\x117\x118\x5\"\x12\x2\x118)"+
		"\x3\x2\x2\x2\x119\x11A\x5\x10\t\x2\x11A\x11B\x5,\x17\x2\x11B+\x3\x2\x2"+
		"\x2\x11C\x11D\aY\x2\x2\x11D\x11E\x5> \x2\x11E\x11F\x5H%\x2\x11F-\x3\x2"+
		"\x2\x2\x120\x121\x5x=\x2\x121\x122\x5\x30\x19\x2\x122\x123\a+\x2\x2\x123"+
		"/\x3\x2\x2\x2\x124\x129\x5\x32\x1A\x2\x125\x126\a,\x2\x2\x126\x128\x5"+
		"\x32\x1A\x2\x127\x125\x3\x2\x2\x2\x128\x12B\x3\x2\x2\x2\x129\x127\x3\x2"+
		"\x2\x2\x129\x12A\x3\x2\x2\x2\x12A\x31\x3\x2\x2\x2\x12B\x129\x3\x2\x2\x2"+
		"\x12C\x12F\x5\x34\x1B\x2\x12D\x12E\aT\x2\x2\x12E\x130\x5\x36\x1C\x2\x12F"+
		"\x12D\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130\x33\x3\x2\x2\x2\x131\x136"+
		"\aY\x2\x2\x132\x133\a)\x2\x2\x133\x135\a*\x2\x2\x134\x132\x3\x2\x2\x2"+
		"\x135\x138\x3\x2\x2\x2\x136\x134\x3\x2\x2\x2\x136\x137\x3\x2\x2\x2\x137"+
		"\x35\x3\x2\x2\x2\x138\x136\x3\x2\x2\x2\x139\x13C\x5\x38\x1D\x2\x13A\x13C"+
		"\x5X-\x2\x13B\x139\x3\x2\x2\x2\x13B\x13A\x3\x2\x2\x2\x13C\x37\x3\x2\x2"+
		"\x2\x13D\x149\a\'\x2\x2\x13E\x143\x5\x36\x1C\x2\x13F\x140\a,\x2\x2\x140"+
		"\x142\x5\x36\x1C\x2\x141\x13F\x3\x2\x2\x2\x142\x145\x3\x2\x2\x2\x143\x141"+
		"\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144\x147\x3\x2\x2\x2\x145\x143\x3"+
		"\x2\x2\x2\x146\x148\a,\x2\x2\x147\x146\x3\x2\x2\x2\x147\x148\x3\x2\x2"+
		"\x2\x148\x14A\x3\x2\x2\x2\x149\x13E\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2"+
		"\x14A\x14B\x3\x2\x2\x2\x14B\x14C\a(\x2\x2\x14C\x39\x3\x2\x2\x2\x14D\x14F"+
		"\aY\x2\x2\x14E\x150\x5|?\x2\x14F\x14E\x3\x2\x2\x2\x14F\x150\x3\x2\x2\x2"+
		"\x150\x158\x3\x2\x2\x2\x151\x152\a-\x2\x2\x152\x154\aY\x2\x2\x153\x155"+
		"\x5|?\x2\x154\x153\x3\x2\x2\x2\x154\x155\x3\x2\x2\x2\x155\x157\x3\x2\x2"+
		"\x2\x156\x151\x3\x2\x2\x2\x157\x15A\x3\x2\x2\x2\x158\x156\x3\x2\x2\x2"+
		"\x158\x159\x3\x2\x2\x2\x159;\x3\x2\x2\x2\x15A\x158\x3\x2\x2\x2\x15B\x162"+
		"\x5x=\x2\x15C\x15F\a\x33\x2\x2\x15D\x15E\t\x3\x2\x2\x15E\x160\x5x=\x2"+
		"\x15F\x15D\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160\x162\x3\x2\x2\x2\x161"+
		"\x15B\x3\x2\x2\x2\x161\x15C\x3\x2\x2\x2\x162=\x3\x2\x2\x2\x163\x165\a"+
		"%\x2\x2\x164\x166\x5@!\x2\x165\x164\x3\x2\x2\x2\x165\x166\x3\x2\x2\x2"+
		"\x166\x167\x3\x2\x2\x2\x167\x168\a&\x2\x2\x168?\x3\x2\x2\x2\x169\x16E"+
		"\x5\x42\"\x2\x16A\x16B\a,\x2\x2\x16B\x16D\x5\x42\"\x2\x16C\x16A\x3\x2"+
		"\x2\x2\x16D\x170\x3\x2\x2\x2\x16E\x16C\x3\x2\x2\x2\x16E\x16F\x3\x2\x2"+
		"\x2\x16F\x173\x3\x2\x2\x2\x170\x16E\x3\x2\x2\x2\x171\x172\a,\x2\x2\x172"+
		"\x174\x5\x44#\x2\x173\x171\x3\x2\x2\x2\x173\x174\x3\x2\x2\x2\x174\x177"+
		"\x3\x2\x2\x2\x175\x177\x5\x44#\x2\x176\x169\x3\x2\x2\x2\x176\x175\x3\x2"+
		"\x2\x2\x177\x41\x3\x2\x2\x2\x178\x17A\x5\f\a\x2\x179\x178\x3\x2\x2\x2"+
		"\x17A\x17D\x3\x2\x2\x2\x17B\x179\x3\x2\x2\x2\x17B\x17C\x3\x2\x2\x2\x17C"+
		"\x17E\x3\x2\x2\x2\x17D\x17B\x3\x2\x2\x2\x17E\x17F\x5x=\x2\x17F\x180\x5"+
		"\x34\x1B\x2\x180\x43\x3\x2\x2\x2\x181\x183\x5\f\a\x2\x182\x181\x3\x2\x2"+
		"\x2\x183\x186\x3\x2\x2\x2\x184\x182\x3\x2\x2\x2\x184\x185\x3\x2\x2\x2"+
		"\x185\x187\x3\x2\x2\x2\x186\x184\x3\x2\x2\x2\x187\x188\x5x=\x2\x188\x189"+
		"\aS\x2\x2\x189\x18A\x5\x34\x1B\x2\x18A\x45\x3\x2\x2\x2\x18B\x18C\t\x4"+
		"\x2\x2\x18CG\x3\x2\x2\x2\x18D\x191\a\'\x2\x2\x18E\x190\x5J&\x2\x18F\x18E"+
		"\x3\x2\x2\x2\x190\x193\x3\x2\x2\x2\x191\x18F\x3\x2\x2\x2\x191\x192\x3"+
		"\x2\x2\x2\x192\x194\x3\x2\x2\x2\x193\x191\x3\x2\x2\x2\x194\x195\a(\x2"+
		"\x2\x195I\x3\x2\x2\x2\x196\x197\x5L\'\x2\x197\x198\a+\x2\x2\x198\x19B"+
		"\x3\x2\x2\x2\x199\x19B\x5N(\x2\x19A\x196\x3\x2\x2\x2\x19A\x199\x3\x2\x2"+
		"\x2\x19BK\x3\x2\x2\x2\x19C\x19E\aX\x2\x2\x19D\x19C\x3\x2\x2\x2\x19D\x19E"+
		"\x3\x2\x2\x2\x19E\x1A2\x3\x2\x2\x2\x19F\x1A1\x5\f\a\x2\x1A0\x19F\x3\x2"+
		"\x2\x2\x1A1\x1A4\x3\x2\x2\x2\x1A2\x1A0\x3\x2\x2\x2\x1A2\x1A3\x3\x2\x2"+
		"\x2\x1A3\x1A5\x3\x2\x2\x2\x1A4\x1A2\x3\x2\x2\x2\x1A5\x1A6\x5x=\x2\x1A6"+
		"\x1A7\x5\x30\x19\x2\x1A7M\x3\x2\x2\x2\x1A8\x1D6\x5H%\x2\x1A9\x1AA\a\x5"+
		"\x2\x2\x1AA\x1AB\x5X-\x2\x1AB\x1AC\x5N(\x2\x1AC\x1D6\x3\x2\x2\x2\x1AD"+
		"\x1AE\a\x11\x2\x2\x1AE\x1AF\x5R*\x2\x1AF\x1B2\x5N(\x2\x1B0\x1B1\a\v\x2"+
		"\x2\x1B1\x1B3\x5N(\x2\x1B2\x1B0\x3\x2\x2\x2\x1B2\x1B3\x3\x2\x2\x2\x1B3"+
		"\x1D6\x3\x2\x2\x2\x1B4\x1B5\a\xE\x2\x2\x1B5\x1B6\a%\x2\x2\x1B6\x1B7\x5"+
		"P)\x2\x1B7\x1B8\a&\x2\x2\x1B8\x1B9\x5N(\x2\x1B9\x1D6\x3\x2\x2\x2\x1BA"+
		"\x1BB\a\xF\x2\x2\x1BB\x1BC\a%\x2\x2\x1BC\x1BD\x5P)\x2\x1BD\x1BE\a&\x2"+
		"\x2\x1BE\x1BF\x5N(\x2\x1BF\x1D6\x3\x2\x2\x2\x1C0\x1C1\a\x1E\x2\x2\x1C1"+
		"\x1C2\x5R*\x2\x1C2\x1C3\x5N(\x2\x1C3\x1D6\x3\x2\x2\x2\x1C4\x1C5\a\b\x2"+
		"\x2\x1C5\x1D6\x5H%\x2\x1C6\x1C7\a\t\x2\x2\x1C7\x1D6\x5H%\x2\x1C8\x1CA"+
		"\a\x18\x2\x2\x1C9\x1CB\x5X-\x2\x1CA\x1C9\x3\x2\x2\x2\x1CA\x1CB\x3\x2\x2"+
		"\x2\x1CB\x1CC\x3\x2\x2\x2\x1CC\x1D6\a+\x2\x2\x1CD\x1CE\x5X-\x2\x1CE\x1CF"+
		"\a+\x2\x2\x1CF\x1D6\x3\x2\x2\x2\x1D0\x1D1\aY\x2\x2\x1D1\x1D2\a\x34\x2"+
		"\x2\x1D2\x1D6\x5N(\x2\x1D3\x1D4\aX\x2\x2\x1D4\x1D6\x5N(\x2\x1D5\x1A8\x3"+
		"\x2\x2\x2\x1D5\x1A9\x3\x2\x2\x2\x1D5\x1AD\x3\x2\x2\x2\x1D5\x1B4\x3\x2"+
		"\x2\x2\x1D5\x1BA\x3\x2\x2\x2\x1D5\x1C0\x3\x2\x2\x2\x1D5\x1C4\x3\x2\x2"+
		"\x2\x1D5\x1C6\x3\x2\x2\x2\x1D5\x1C8\x3\x2\x2\x2\x1D5\x1CD\x3\x2\x2\x2"+
		"\x1D5\x1D0\x3\x2\x2\x2\x1D5\x1D3\x3\x2\x2\x2\x1D6O\x3\x2\x2\x2\x1D7\x1D8"+
		"\x5x=\x2\x1D8\x1D9\x5\x34\x1B\x2\x1D9\x1DA\a\x12\x2\x2\x1DA\x1DB\x5X-"+
		"\x2\x1DBQ\x3\x2\x2\x2\x1DC\x1DD\a%\x2\x2\x1DD\x1DE\x5X-\x2\x1DE\x1DF\a"+
		"&\x2\x2\x1DFS\x3\x2\x2\x2\x1E0\x1E5\x5X-\x2\x1E1\x1E2\a,\x2\x2\x1E2\x1E4"+
		"\x5X-\x2\x1E3\x1E1\x3\x2\x2\x2\x1E4\x1E7\x3\x2\x2\x2\x1E5\x1E3\x3\x2\x2"+
		"\x2\x1E5\x1E6\x3\x2\x2\x2\x1E6U\x3\x2\x2\x2\x1E7\x1E5\x3\x2\x2\x2\x1E8"+
		"\x1E9\aY\x2\x2\x1E9\x1EB\a%\x2\x2\x1EA\x1EC\x5T+\x2\x1EB\x1EA\x3\x2\x2"+
		"\x2\x1EB\x1EC\x3\x2\x2\x2\x1EC\x1ED\x3\x2\x2\x2\x1ED\x1EE\a&\x2\x2\x1EE"+
		"W\x3\x2\x2\x2\x1EF\x1F0\b-\x1\x2\x1F0\x1F1\a%\x2\x2\x1F1\x1F2\x5x=\x2"+
		"\x1F2\x1F3\a&\x2\x2\x1F3\x1F4\x5X-\x16\x1F4\x20F\x3\x2\x2\x2\x1F5\x1F6"+
		"\t\x5\x2\x2\x1F6\x20F\x5X-\x14\x1F7\x1F8\t\x6\x2\x2\x1F8\x20F\x5X-\x13"+
		"\x1F9\x20F\x5`\x31\x2\x1FA\x20F\x5V,\x2\x1FB\x1FC\a\x15\x2\x2\x1FC\x20F"+
		"\x5\x64\x33\x2\x1FD\x20F\x5Z.\x2\x1FE\x1FF\x5x=\x2\x1FF\x205\aQ\x2\x2"+
		"\x200\x202\x5|?\x2\x201\x200\x3\x2\x2\x2\x201\x202\x3\x2\x2\x2\x202\x203"+
		"\x3\x2\x2\x2\x203\x206\aY\x2\x2\x204\x206\a\x15\x2\x2\x205\x201\x3\x2"+
		"\x2\x2\x205\x204\x3\x2\x2\x2\x206\x20F\x3\x2\x2\x2\x207\x208\x5\x62\x32"+
		"\x2\x208\x20A\aQ\x2\x2\x209\x20B\x5|?\x2\x20A\x209\x3\x2\x2\x2\x20A\x20B"+
		"\x3\x2\x2\x2\x20B\x20C\x3\x2\x2\x2\x20C\x20D\a\x15\x2\x2\x20D\x20F\x3"+
		"\x2\x2\x2\x20E\x1EF\x3\x2\x2\x2\x20E\x1F5\x3\x2\x2\x2\x20E\x1F7\x3\x2"+
		"\x2\x2\x20E\x1F9\x3\x2\x2\x2\x20E\x1FA\x3\x2\x2\x2\x20E\x1FB\x3\x2\x2"+
		"\x2\x20E\x1FD\x3\x2\x2\x2\x20E\x1FE\x3\x2\x2\x2\x20E\x207\x3\x2\x2\x2"+
		"\x20F\x25D\x3\x2\x2\x2\x210\x211\f\x12\x2\x2\x211\x212\t\a\x2\x2\x212"+
		"\x25C\x5X-\x13\x213\x214\f\x11\x2\x2\x214\x215\t\b\x2\x2\x215\x25C\x5"+
		"X-\x12\x216\x21E\f\x10\x2\x2\x217\x218\a\x30\x2\x2\x218\x21F\a\x30\x2"+
		"\x2\x219\x21A\a/\x2\x2\x21A\x21B\a/\x2\x2\x21B\x21F\a/\x2\x2\x21C\x21D"+
		"\a/\x2\x2\x21D\x21F\a/\x2\x2\x21E\x217\x3\x2\x2\x2\x21E\x219\x3\x2\x2"+
		"\x2\x21E\x21C\x3\x2\x2\x2\x21F\x220\x3\x2\x2\x2\x220\x25C\x5X-\x11\x221"+
		"\x222\f\xF\x2\x2\x222\x223\t\t\x2\x2\x223\x25C\x5X-\x10\x224\x225\f\xE"+
		"\x2\x2\x225\x226\t\n\x2\x2\x226\x25C\x5X-\xF\x227\x228\f\r\x2\x2\x228"+
		"\x229\a\x41\x2\x2\x229\x25C\x5X-\xE\x22A\x22B\f\f\x2\x2\x22B\x22C\a\x43"+
		"\x2\x2\x22C\x25C\x5X-\r\x22D\x22E\f\v\x2\x2\x22E\x22F\a\x42\x2\x2\x22F"+
		"\x25C\x5X-\f\x230\x231\f\n\x2\x2\x231\x232\a\x39\x2\x2\x232\x25C\x5X-"+
		"\v\x233\x234\f\t\x2\x2\x234\x235\a:\x2\x2\x235\x25C\x5X-\n\x236\x237\f"+
		"\b\x2\x2\x237\x238\a\x33\x2\x2\x238\x239\x5X-\x2\x239\x23A\a\x34\x2\x2"+
		"\x23A\x23B\x5X-\t\x23B\x25C\x3\x2\x2\x2\x23C\x23D\f\a\x2\x2\x23D\x23E"+
		"\aT\x2\x2\x23E\x25C\x5X-\a\x23F\x240\f\x1A\x2\x2\x240\x24C\a-\x2\x2\x241"+
		"\x24D\aY\x2\x2\x242\x24D\x5V,\x2\x243\x24D\a\x1B\x2\x2\x244\x246\a\x15"+
		"\x2\x2\x245\x247\x5t;\x2\x246\x245\x3\x2\x2\x2\x246\x247\x3\x2\x2\x2\x247"+
		"\x248\x3\x2\x2\x2\x248\x24D\x5h\x35\x2\x249\x24A\a\x1A\x2\x2\x24A\x24D"+
		"\x5~@\x2\x24B\x24D\x5n\x38\x2\x24C\x241\x3\x2\x2\x2\x24C\x242\x3\x2\x2"+
		"\x2\x24C\x243\x3\x2\x2\x2\x24C\x244\x3\x2\x2\x2\x24C\x249\x3\x2\x2\x2"+
		"\x24C\x24B\x3\x2\x2\x2\x24D\x25C\x3\x2\x2\x2\x24E\x24F\f\x19\x2\x2\x24F"+
		"\x250\a)\x2\x2\x250\x251\x5X-\x2\x251\x252\a*\x2\x2\x252\x25C\x3\x2\x2"+
		"\x2\x253\x254\f\x15\x2\x2\x254\x25C\t\v\x2\x2\x255\x256\f\x5\x2\x2\x256"+
		"\x258\aQ\x2\x2\x257\x259\x5|?\x2\x258\x257\x3\x2\x2\x2\x258\x259\x3\x2"+
		"\x2\x2\x259\x25A\x3\x2\x2\x2\x25A\x25C\aY\x2\x2\x25B\x210\x3\x2\x2\x2"+
		"\x25B\x213\x3\x2\x2\x2\x25B\x216\x3\x2\x2\x2\x25B\x221\x3\x2\x2\x2\x25B"+
		"\x224\x3\x2\x2\x2\x25B\x227\x3\x2\x2\x2\x25B\x22A\x3\x2\x2\x2\x25B\x22D"+
		"\x3\x2\x2\x2\x25B\x230\x3\x2\x2\x2\x25B\x233\x3\x2\x2\x2\x25B\x236\x3"+
		"\x2\x2\x2\x25B\x23C\x3\x2\x2\x2\x25B\x23F\x3\x2\x2\x2\x25B\x24E\x3\x2"+
		"\x2\x2\x25B\x253\x3\x2\x2\x2\x25B\x255\x3\x2\x2\x2\x25C\x25F\x3\x2\x2"+
		"\x2\x25D\x25B\x3\x2\x2\x2\x25D\x25E\x3\x2\x2\x2\x25EY\x3\x2\x2\x2\x25F"+
		"\x25D\x3\x2\x2\x2\x260\x261\x5\\/\x2\x261\x262\aP\x2\x2\x262\x263\x5^"+
		"\x30\x2\x263[\x3\x2\x2\x2\x264\x275\aY\x2\x2\x265\x267\a%\x2\x2\x266\x268"+
		"\x5@!\x2\x267\x266\x3\x2\x2\x2\x267\x268\x3\x2\x2\x2\x268\x269\x3\x2\x2"+
		"\x2\x269\x275\a&\x2\x2\x26A\x26B\a%\x2\x2\x26B\x270\aY\x2\x2\x26C\x26D"+
		"\a,\x2\x2\x26D\x26F\aY\x2\x2\x26E\x26C\x3\x2\x2\x2\x26F\x272\x3\x2\x2"+
		"\x2\x270\x26E\x3\x2\x2\x2\x270\x271\x3\x2\x2\x2\x271\x273\x3\x2\x2\x2"+
		"\x272\x270\x3\x2\x2\x2\x273\x275\a&\x2\x2\x274\x264\x3\x2\x2\x2\x274\x265"+
		"\x3\x2\x2\x2\x274\x26A\x3\x2\x2\x2\x275]\x3\x2\x2\x2\x276\x279\x5X-\x2"+
		"\x277\x279\x5H%\x2\x278\x276\x3\x2\x2\x2\x278\x277\x3\x2\x2\x2\x279_\x3"+
		"\x2\x2\x2\x27A\x27B\a%\x2\x2\x27B\x27C\x5X-\x2\x27C\x27D\a&\x2\x2\x27D"+
		"\x28D\x3\x2\x2\x2\x27E\x28D\a\x1B\x2\x2\x27F\x28D\a\x1A\x2\x2\x280\x28D"+
		"\x5\x46$\x2\x281\x28D\aY\x2\x2\x282\x283\x5&\x14\x2\x283\x284\a-\x2\x2"+
		"\x284\x285\a\x4\x2\x2\x285\x28D\x3\x2\x2\x2\x286\x28A\x5t;\x2\x287\x28B"+
		"\x5\x80\x41\x2\x288\x289\a\x1B\x2\x2\x289\x28B\x5\x82\x42\x2\x28A\x287"+
		"\x3\x2\x2\x2\x28A\x288\x3\x2\x2\x2\x28B\x28D\x3\x2\x2\x2\x28C\x27A\x3"+
		"\x2\x2\x2\x28C\x27E\x3\x2\x2\x2\x28C\x27F\x3\x2\x2\x2\x28C\x280\x3\x2"+
		"\x2\x2\x28C\x281\x3\x2\x2\x2\x28C\x282\x3\x2\x2\x2\x28C\x286\x3\x2\x2"+
		"\x2\x28D\x61\x3\x2\x2\x2\x28E\x28F\x5:\x1E\x2\x28F\x290\a-\x2\x2\x290"+
		"\x292\x3\x2\x2\x2\x291\x28E\x3\x2\x2\x2\x291\x292\x3\x2\x2\x2\x292\x293"+
		"\x3\x2\x2\x2\x293\x295\aY\x2\x2\x294\x296\x5|?\x2\x295\x294\x3\x2\x2\x2"+
		"\x295\x296\x3\x2\x2\x2\x296\x63\x3\x2\x2\x2\x297\x298\x5t;\x2\x298\x299"+
		"\x5\x66\x34\x2\x299\x29A\x5l\x37\x2\x29A\x2A1\x3\x2\x2\x2\x29B\x29E\x5"+
		"\x66\x34\x2\x29C\x29F\x5j\x36\x2\x29D\x29F\x5l\x37\x2\x29E\x29C\x3\x2"+
		"\x2\x2\x29E\x29D\x3\x2\x2\x2\x29F\x2A1\x3\x2\x2\x2\x2A0\x297\x3\x2\x2"+
		"\x2\x2A0\x29B\x3\x2\x2\x2\x2A1\x65\x3\x2\x2\x2\x2A2\x2A4\aY\x2\x2\x2A3"+
		"\x2A5\x5p\x39\x2\x2A4\x2A3\x3\x2\x2\x2\x2A4\x2A5\x3\x2\x2\x2\x2A5\x2AD"+
		"\x3\x2\x2\x2\x2A6\x2A7\a-\x2\x2\x2A7\x2A9\aY\x2\x2\x2A8\x2AA\x5p\x39\x2"+
		"\x2A9\x2A8\x3\x2\x2\x2\x2A9\x2AA\x3\x2\x2\x2\x2AA\x2AC\x3\x2\x2\x2\x2AB"+
		"\x2A6\x3\x2\x2\x2\x2AC\x2AF\x3\x2\x2\x2\x2AD\x2AB\x3\x2\x2\x2\x2AD\x2AE"+
		"\x3\x2\x2\x2\x2AE\x2B2\x3\x2\x2\x2\x2AF\x2AD\x3\x2\x2\x2\x2B0\x2B2\x5"+
		"z>\x2\x2B1\x2A2\x3\x2\x2\x2\x2B1\x2B0\x3\x2\x2\x2\x2B2g\x3\x2\x2\x2\x2B3"+
		"\x2B5\aY\x2\x2\x2B4\x2B6\x5r:\x2\x2B5\x2B4\x3\x2\x2\x2\x2B5\x2B6\x3\x2"+
		"\x2\x2\x2B6\x2B7\x3\x2\x2\x2\x2B7\x2B8\x5l\x37\x2\x2B8i\x3\x2\x2\x2\x2B9"+
		"\x2D5\a)\x2\x2\x2BA\x2BF\a*\x2\x2\x2BB\x2BC\a)\x2\x2\x2BC\x2BE\a*\x2\x2"+
		"\x2BD\x2BB\x3\x2\x2\x2\x2BE\x2C1\x3\x2\x2\x2\x2BF\x2BD\x3\x2\x2\x2\x2BF"+
		"\x2C0\x3\x2\x2\x2\x2C0\x2C2\x3\x2\x2\x2\x2C1\x2BF\x3\x2\x2\x2\x2C2\x2D6"+
		"\x5\x38\x1D\x2\x2C3\x2C4\x5X-\x2\x2C4\x2CB\a*\x2\x2\x2C5\x2C6\a)\x2\x2"+
		"\x2C6\x2C7\x5X-\x2\x2C7\x2C8\a*\x2\x2\x2C8\x2CA\x3\x2\x2\x2\x2C9\x2C5"+
		"\x3\x2\x2\x2\x2CA\x2CD\x3\x2\x2\x2\x2CB\x2C9\x3\x2\x2\x2\x2CB\x2CC\x3"+
		"\x2\x2\x2\x2CC\x2D2\x3\x2\x2\x2\x2CD\x2CB\x3\x2\x2\x2\x2CE\x2CF\a)\x2"+
		"\x2\x2CF\x2D1\a*\x2\x2\x2D0\x2CE\x3\x2\x2\x2\x2D1\x2D4\x3\x2\x2\x2\x2D2"+
		"\x2D0\x3\x2\x2\x2\x2D2\x2D3\x3\x2\x2\x2\x2D3\x2D6\x3\x2\x2\x2\x2D4\x2D2"+
		"\x3\x2\x2\x2\x2D5\x2BA\x3\x2\x2\x2\x2D5\x2C3\x3\x2\x2\x2\x2D6k\x3\x2\x2"+
		"\x2\x2D7\x2D9\x5\x82\x42\x2\x2D8\x2DA\x5\x1C\xF\x2\x2D9\x2D8\x3\x2\x2"+
		"\x2\x2D9\x2DA\x3\x2\x2\x2\x2DAm\x3\x2\x2\x2\x2DB\x2DC\x5t;\x2\x2DC\x2DD"+
		"\x5\x80\x41\x2\x2DDo\x3\x2\x2\x2\x2DE\x2DF\a\x30\x2\x2\x2DF\x2E2\a/\x2"+
		"\x2\x2E0\x2E2\x5|?\x2\x2E1\x2DE\x3\x2\x2\x2\x2E1\x2E0\x3\x2\x2\x2\x2E2"+
		"q\x3\x2\x2\x2\x2E3\x2E4\a\x30\x2\x2\x2E4\x2E7\a/\x2\x2\x2E5\x2E7\x5t;"+
		"\x2\x2E6\x2E3\x3\x2\x2\x2\x2E6\x2E5\x3\x2\x2\x2\x2E7s\x3\x2\x2\x2\x2E8"+
		"\x2E9\a\x30\x2\x2\x2E9\x2EA\x5v<\x2\x2EA\x2EB\a/\x2\x2\x2EBu\x3\x2\x2"+
		"\x2\x2EC\x2F1\x5x=\x2\x2ED\x2EE\a,\x2\x2\x2EE\x2F0\x5x=\x2\x2EF\x2ED\x3"+
		"\x2\x2\x2\x2F0\x2F3\x3\x2\x2\x2\x2F1\x2EF\x3\x2\x2\x2\x2F1\x2F2\x3\x2"+
		"\x2\x2\x2F2w\x3\x2\x2\x2\x2F3\x2F1\x3\x2\x2\x2\x2F4\x2F7\x5:\x1E\x2\x2F5"+
		"\x2F7\x5z>\x2\x2F6\x2F4\x3\x2\x2\x2\x2F6\x2F5\x3\x2\x2\x2\x2F7\x2FC\x3"+
		"\x2\x2\x2\x2F8\x2F9\a)\x2\x2\x2F9\x2FB\a*\x2\x2\x2FA\x2F8\x3\x2\x2\x2"+
		"\x2FB\x2FE\x3\x2\x2\x2\x2FC\x2FA\x3\x2\x2\x2\x2FC\x2FD\x3\x2\x2\x2\x2FD"+
		"\x300\x3\x2\x2\x2\x2FE\x2FC\x3\x2\x2\x2\x2FF\x301\a\x33\x2\x2\x300\x2FF"+
		"\x3\x2\x2\x2\x300\x301\x3\x2\x2\x2\x301y\x3\x2\x2\x2\x302\x303\t\f\x2"+
		"\x2\x303{\x3\x2\x2\x2\x304\x305\a\x30\x2\x2\x305\x30A\x5<\x1F\x2\x306"+
		"\x307\a,\x2\x2\x307\x309\x5<\x1F\x2\x308\x306\x3\x2\x2\x2\x309\x30C\x3"+
		"\x2\x2\x2\x30A\x308\x3\x2\x2\x2\x30A\x30B\x3\x2\x2\x2\x30B\x30D\x3\x2"+
		"\x2\x2\x30C\x30A\x3\x2\x2\x2\x30D\x30E\a/\x2\x2\x30E}\x3\x2\x2\x2\x30F"+
		"\x316\x5\x82\x42\x2\x310\x311\a-\x2\x2\x311\x313\aY\x2\x2\x312\x314\x5"+
		"\x82\x42\x2\x313\x312\x3\x2\x2\x2\x313\x314\x3\x2\x2\x2\x314\x316\x3\x2"+
		"\x2\x2\x315\x30F\x3\x2\x2\x2\x315\x310\x3\x2\x2\x2\x316\x7F\x3\x2\x2\x2"+
		"\x317\x318\a\x1A\x2\x2\x318\x31C\x5~@\x2\x319\x31A\aY\x2\x2\x31A\x31C"+
		"\x5\x82\x42\x2\x31B\x317\x3\x2\x2\x2\x31B\x319\x3\x2\x2\x2\x31C\x81\x3"+
		"\x2\x2\x2\x31D\x31F\a%\x2\x2\x31E\x320\x5T+\x2\x31F\x31E\x3\x2\x2\x2\x31F"+
		"\x320\x3\x2\x2\x2\x320\x321\x3\x2\x2\x2\x321\x322\a&\x2\x2\x322\x83\x3"+
		"\x2\x2\x2]\x87\x8F\x94\x97\x9B\xA7\xAB\xAF\xB9\xC1\xC8\xCF\xD8\xDD\xE0"+
		"\xE6\xED\xF3\xF7\x100\x109\x110\x114\x129\x12F\x136\x13B\x143\x147\x149"+
		"\x14F\x154\x158\x15F\x161\x165\x16E\x173\x176\x17B\x184\x191\x19A\x19D"+
		"\x1A2\x1B2\x1CA\x1D5\x1E5\x1EB\x201\x205\x20A\x20E\x21E\x246\x24C\x258"+
		"\x25B\x25D\x267\x270\x274\x278\x28A\x28C\x291\x295\x29E\x2A0\x2A4\x2A9"+
		"\x2AD\x2B1\x2B5\x2BF\x2CB\x2D2\x2D5\x2D9\x2E1\x2E6\x2F1\x2F6\x2FC\x300"+
		"\x30A\x313\x315\x31B\x31F";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
