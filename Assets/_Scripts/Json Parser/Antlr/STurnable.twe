class STurnable extends SThing {

	Boolean isFacing( SThing other ) {
		return isFacing( target: other );
	}

	void turn( TurnDirection direction,
	           Number amount,
	           DecimalNumber duration <- Defaults.getDuration(),
	           AnimationStyle animationStyle <- Defaults.getAnimationStyle(),
	           SThing asSeenBy <- this ) {
		animateApplyRotationInRevolutions( axis: direction.getAxis(), revolutions: amount, viewer: asSeenBy, duration: duration, animation: animationStyle );
	}

	void roll( RollDirection direction,
	           Number amount,
	           DecimalNumber duration <- Defaults.getDuration(),
	           AnimationStyle animationStyle <- Defaults.getAnimationStyle(),
	           SThing asSeenBy <- this ) {
		animateApplyRotationInRevolutions( axis: direction.getAxis(), revolutions: amount, viewer: asSeenBy, duration: duration, animation: animationStyle );
	}

	void turnToFace( SThing target,
	                 DecimalNumber duration <- Defaults.getDuration(),
	                 AnimationStyle animationStyle <- Defaults.getAnimationStyle() ) {
		animateOrientationOnlyToFace( target: target, offset: null, duration: duration, animation: animationStyle );
	}

	void orientToUpright( DecimalNumber duration <- Defaults.getDuration(),
	                      AnimationStyle animationStyle <- Defaults.getAnimationStyle(),
	                      SThing upAsSeenBy <- getScene() ) {
		animateOrientationToUpright( viewer: asSeenBy, duration: duration, animation: animationStyle );
	}

	void pointAt( SThing target,
	              DecimalNumber duration <- Defaults.getDuration(),
	              AnimationStyle animationStyle <- Defaults.getAnimationStyle(),
	              SThing upAsSeenBy <- getScene() ) {
		animateOrientationToPointAt( target: target, viewer: asSeenBy, duration: duration, animation: animationStyle );
	}

	void orientTo( SThing target,
	               DecimalNumber duration <- Defaults.getDuration(),
	               AnimationStyle animationStyle <- Defaults.getAnimationStyle() ) {
		animateOrientationOnly( target: target, offset: null, duration: duration, animation: animationStyle );
	}

	@tuckedAway Orientation getOrientationRelativeToVehicle() {
		return Orientation.createInstance( orientation: getLocalOrientation() );
	}

	@tuckedAway void setOrientationRelativeToVehicle( Orientation orientation,
                                                    DecimalNumber duration <- Defaults.getDuration(),
                                                    AnimationStyle animationStyle <- Defaults.getAnimationStyle() ) {
		if( vehicle != null ) {
			animateOrientationOnly( vehicle: vehicle, orientation: orientation.getInternal(), duration: duration, animation: animationStyle );
		} else {
			AbstractTransformable sgTransformable <- getSgComposite();
			AffineMatrix4x4 m <- sgTransformable.getLocalTransformation();
			m.orientation.setValue( orientation: orientation.getInternal() );
			sgTransformable.setLocalTransformation( transformation: m );
		}
	}

	Double getDistanceTo( STurnable other ) {
		return getDistanceTo( target: other );
	}

	Double getDistanceAbove( SThing other, SThing asSeenBy <- getScene() ) {
		return getDistanceAbove( target: other, viewer: asSeenBy );
	}

	Boolean isAbove( SThing other, SThing asSeenBy <- getScene() ) {
		return getDistanceAbove( target: other, viewer: asSeenBy ) > 0;
	}

	Double getDistanceBelow( SThing other, SThing asSeenBy <- getScene() ) {
		return getDistanceBelow( target: other, viewer: asSeenBy );
	}

	Boolean isBelow( SThing other, SThing asSeenBy <- getScene() ) {
		return getDistanceBelow( target: other, viewer: asSeenBy ) > 0;
	}

	Double getDistanceToTheRightOf( SThing other, SThing asSeenBy <- other ) {
		return getDistanceToTheRightOf( target: other, viewer: asSeenBy );
	}

	Boolean isToTheRightOf( SThing other, SThing asSeenBy <- other ) {
		return getDistanceToTheRightOf( target: other, viewer: asSeenBy ) > 0;
	}

	Double getDistanceToTheLeftOf( SThing other, SThing asSeenBy <- other ) {
		return getDistanceToTheLeftOf( target: other, viewer: asSeenBy );
	}

	Boolean isToTheLeftOf( SThing other, SThing asSeenBy <- other ) {
		return getDistanceToTheLeftOf( target: other, viewer: asSeenBy ) > 0;
	}

	Double getDistanceInFrontOf( SThing other, SThing asSeenBy <- other ) {
		return getDistanceInFrontOf( target: other, viewer: asSeenBy );
	}

	Boolean isInFrontOf( SThing other, SThing asSeenBy <- other ) {
		return getDistanceInFrontOf( target: other, viewer: asSeenBy ) > 0;
	}

	Double getDistanceBehind( SThing other, SThing asSeenBy <- other ) {
		return getDistanceBehind( target: other, viewer: asSeenBy );
	}

	Boolean isBehind( SThing other, SThing asSeenBy <- other ) {
		return getDistanceBehind( target: other, viewer: asSeenBy ) > 0;
	}
}
